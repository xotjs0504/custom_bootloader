
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa8  080101c4  080101c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0801816c  0801816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182a0  080182a0  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080182a0  080182a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080182a8  080182a8  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080182a8  080182a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080182ac  080182ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080182b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  20000150  08018400  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  08018400  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c51  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033b9  00000000  00000000  00035dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  0003a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230cc  00000000  00000000  0003ad28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f573  00000000  00000000  0005ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf1d2  00000000  00000000  0006d367  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  0012c5b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080101c4 <__do_global_dtors_aux>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4c05      	ldr	r4, [pc, #20]	; (80101dc <__do_global_dtors_aux+0x18>)
 80101c8:	7823      	ldrb	r3, [r4, #0]
 80101ca:	b933      	cbnz	r3, 80101da <__do_global_dtors_aux+0x16>
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x1c>)
 80101ce:	b113      	cbz	r3, 80101d6 <__do_global_dtors_aux+0x12>
 80101d0:	4804      	ldr	r0, [pc, #16]	; (80101e4 <__do_global_dtors_aux+0x20>)
 80101d2:	f3af 8000 	nop.w
 80101d6:	2301      	movs	r3, #1
 80101d8:	7023      	strb	r3, [r4, #0]
 80101da:	bd10      	pop	{r4, pc}
 80101dc:	20000150 	.word	0x20000150
 80101e0:	00000000 	.word	0x00000000
 80101e4:	08018154 	.word	0x08018154

080101e8 <frame_dummy>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <frame_dummy+0x10>)
 80101ec:	b11b      	cbz	r3, 80101f6 <frame_dummy+0xe>
 80101ee:	4903      	ldr	r1, [pc, #12]	; (80101fc <frame_dummy+0x14>)
 80101f0:	4803      	ldr	r0, [pc, #12]	; (8010200 <frame_dummy+0x18>)
 80101f2:	f3af 8000 	nop.w
 80101f6:	bd08      	pop	{r3, pc}
 80101f8:	00000000 	.word	0x00000000
 80101fc:	20000154 	.word	0x20000154
 8010200:	08018154 	.word	0x08018154

08010204 <__aeabi_uldivmod>:
 8010204:	b953      	cbnz	r3, 801021c <__aeabi_uldivmod+0x18>
 8010206:	b94a      	cbnz	r2, 801021c <__aeabi_uldivmod+0x18>
 8010208:	2900      	cmp	r1, #0
 801020a:	bf08      	it	eq
 801020c:	2800      	cmpeq	r0, #0
 801020e:	bf1c      	itt	ne
 8010210:	f04f 31ff 	movne.w	r1, #4294967295
 8010214:	f04f 30ff 	movne.w	r0, #4294967295
 8010218:	f000 b972 	b.w	8010500 <__aeabi_idiv0>
 801021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010224:	f000 f806 	bl	8010234 <__udivmoddi4>
 8010228:	f8dd e004 	ldr.w	lr, [sp, #4]
 801022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010230:	b004      	add	sp, #16
 8010232:	4770      	bx	lr

08010234 <__udivmoddi4>:
 8010234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010238:	9e08      	ldr	r6, [sp, #32]
 801023a:	4604      	mov	r4, r0
 801023c:	4688      	mov	r8, r1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d14b      	bne.n	80102da <__udivmoddi4+0xa6>
 8010242:	428a      	cmp	r2, r1
 8010244:	4615      	mov	r5, r2
 8010246:	d967      	bls.n	8010318 <__udivmoddi4+0xe4>
 8010248:	fab2 f282 	clz	r2, r2
 801024c:	b14a      	cbz	r2, 8010262 <__udivmoddi4+0x2e>
 801024e:	f1c2 0720 	rsb	r7, r2, #32
 8010252:	fa01 f302 	lsl.w	r3, r1, r2
 8010256:	fa20 f707 	lsr.w	r7, r0, r7
 801025a:	4095      	lsls	r5, r2
 801025c:	ea47 0803 	orr.w	r8, r7, r3
 8010260:	4094      	lsls	r4, r2
 8010262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010266:	0c23      	lsrs	r3, r4, #16
 8010268:	fbb8 f7fe 	udiv	r7, r8, lr
 801026c:	fa1f fc85 	uxth.w	ip, r5
 8010270:	fb0e 8817 	mls	r8, lr, r7, r8
 8010274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010278:	fb07 f10c 	mul.w	r1, r7, ip
 801027c:	4299      	cmp	r1, r3
 801027e:	d909      	bls.n	8010294 <__udivmoddi4+0x60>
 8010280:	18eb      	adds	r3, r5, r3
 8010282:	f107 30ff 	add.w	r0, r7, #4294967295
 8010286:	f080 811b 	bcs.w	80104c0 <__udivmoddi4+0x28c>
 801028a:	4299      	cmp	r1, r3
 801028c:	f240 8118 	bls.w	80104c0 <__udivmoddi4+0x28c>
 8010290:	3f02      	subs	r7, #2
 8010292:	442b      	add	r3, r5
 8010294:	1a5b      	subs	r3, r3, r1
 8010296:	b2a4      	uxth	r4, r4
 8010298:	fbb3 f0fe 	udiv	r0, r3, lr
 801029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80102a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80102a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80102a8:	45a4      	cmp	ip, r4
 80102aa:	d909      	bls.n	80102c0 <__udivmoddi4+0x8c>
 80102ac:	192c      	adds	r4, r5, r4
 80102ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80102b2:	f080 8107 	bcs.w	80104c4 <__udivmoddi4+0x290>
 80102b6:	45a4      	cmp	ip, r4
 80102b8:	f240 8104 	bls.w	80104c4 <__udivmoddi4+0x290>
 80102bc:	3802      	subs	r0, #2
 80102be:	442c      	add	r4, r5
 80102c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80102c4:	eba4 040c 	sub.w	r4, r4, ip
 80102c8:	2700      	movs	r7, #0
 80102ca:	b11e      	cbz	r6, 80102d4 <__udivmoddi4+0xa0>
 80102cc:	40d4      	lsrs	r4, r2
 80102ce:	2300      	movs	r3, #0
 80102d0:	e9c6 4300 	strd	r4, r3, [r6]
 80102d4:	4639      	mov	r1, r7
 80102d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102da:	428b      	cmp	r3, r1
 80102dc:	d909      	bls.n	80102f2 <__udivmoddi4+0xbe>
 80102de:	2e00      	cmp	r6, #0
 80102e0:	f000 80eb 	beq.w	80104ba <__udivmoddi4+0x286>
 80102e4:	2700      	movs	r7, #0
 80102e6:	e9c6 0100 	strd	r0, r1, [r6]
 80102ea:	4638      	mov	r0, r7
 80102ec:	4639      	mov	r1, r7
 80102ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f2:	fab3 f783 	clz	r7, r3
 80102f6:	2f00      	cmp	r7, #0
 80102f8:	d147      	bne.n	801038a <__udivmoddi4+0x156>
 80102fa:	428b      	cmp	r3, r1
 80102fc:	d302      	bcc.n	8010304 <__udivmoddi4+0xd0>
 80102fe:	4282      	cmp	r2, r0
 8010300:	f200 80fa 	bhi.w	80104f8 <__udivmoddi4+0x2c4>
 8010304:	1a84      	subs	r4, r0, r2
 8010306:	eb61 0303 	sbc.w	r3, r1, r3
 801030a:	2001      	movs	r0, #1
 801030c:	4698      	mov	r8, r3
 801030e:	2e00      	cmp	r6, #0
 8010310:	d0e0      	beq.n	80102d4 <__udivmoddi4+0xa0>
 8010312:	e9c6 4800 	strd	r4, r8, [r6]
 8010316:	e7dd      	b.n	80102d4 <__udivmoddi4+0xa0>
 8010318:	b902      	cbnz	r2, 801031c <__udivmoddi4+0xe8>
 801031a:	deff      	udf	#255	; 0xff
 801031c:	fab2 f282 	clz	r2, r2
 8010320:	2a00      	cmp	r2, #0
 8010322:	f040 808f 	bne.w	8010444 <__udivmoddi4+0x210>
 8010326:	1b49      	subs	r1, r1, r5
 8010328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801032c:	fa1f f885 	uxth.w	r8, r5
 8010330:	2701      	movs	r7, #1
 8010332:	fbb1 fcfe 	udiv	ip, r1, lr
 8010336:	0c23      	lsrs	r3, r4, #16
 8010338:	fb0e 111c 	mls	r1, lr, ip, r1
 801033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010340:	fb08 f10c 	mul.w	r1, r8, ip
 8010344:	4299      	cmp	r1, r3
 8010346:	d907      	bls.n	8010358 <__udivmoddi4+0x124>
 8010348:	18eb      	adds	r3, r5, r3
 801034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 801034e:	d202      	bcs.n	8010356 <__udivmoddi4+0x122>
 8010350:	4299      	cmp	r1, r3
 8010352:	f200 80cd 	bhi.w	80104f0 <__udivmoddi4+0x2bc>
 8010356:	4684      	mov	ip, r0
 8010358:	1a59      	subs	r1, r3, r1
 801035a:	b2a3      	uxth	r3, r4
 801035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8010360:	fb0e 1410 	mls	r4, lr, r0, r1
 8010364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010368:	fb08 f800 	mul.w	r8, r8, r0
 801036c:	45a0      	cmp	r8, r4
 801036e:	d907      	bls.n	8010380 <__udivmoddi4+0x14c>
 8010370:	192c      	adds	r4, r5, r4
 8010372:	f100 33ff 	add.w	r3, r0, #4294967295
 8010376:	d202      	bcs.n	801037e <__udivmoddi4+0x14a>
 8010378:	45a0      	cmp	r8, r4
 801037a:	f200 80b6 	bhi.w	80104ea <__udivmoddi4+0x2b6>
 801037e:	4618      	mov	r0, r3
 8010380:	eba4 0408 	sub.w	r4, r4, r8
 8010384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010388:	e79f      	b.n	80102ca <__udivmoddi4+0x96>
 801038a:	f1c7 0c20 	rsb	ip, r7, #32
 801038e:	40bb      	lsls	r3, r7
 8010390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8010394:	ea4e 0e03 	orr.w	lr, lr, r3
 8010398:	fa01 f407 	lsl.w	r4, r1, r7
 801039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80103a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80103a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80103a8:	4325      	orrs	r5, r4
 80103aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80103ae:	0c2c      	lsrs	r4, r5, #16
 80103b0:	fb08 3319 	mls	r3, r8, r9, r3
 80103b4:	fa1f fa8e 	uxth.w	sl, lr
 80103b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80103bc:	fb09 f40a 	mul.w	r4, r9, sl
 80103c0:	429c      	cmp	r4, r3
 80103c2:	fa02 f207 	lsl.w	r2, r2, r7
 80103c6:	fa00 f107 	lsl.w	r1, r0, r7
 80103ca:	d90b      	bls.n	80103e4 <__udivmoddi4+0x1b0>
 80103cc:	eb1e 0303 	adds.w	r3, lr, r3
 80103d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80103d4:	f080 8087 	bcs.w	80104e6 <__udivmoddi4+0x2b2>
 80103d8:	429c      	cmp	r4, r3
 80103da:	f240 8084 	bls.w	80104e6 <__udivmoddi4+0x2b2>
 80103de:	f1a9 0902 	sub.w	r9, r9, #2
 80103e2:	4473      	add	r3, lr
 80103e4:	1b1b      	subs	r3, r3, r4
 80103e6:	b2ad      	uxth	r5, r5
 80103e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80103ec:	fb08 3310 	mls	r3, r8, r0, r3
 80103f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80103f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80103f8:	45a2      	cmp	sl, r4
 80103fa:	d908      	bls.n	801040e <__udivmoddi4+0x1da>
 80103fc:	eb1e 0404 	adds.w	r4, lr, r4
 8010400:	f100 33ff 	add.w	r3, r0, #4294967295
 8010404:	d26b      	bcs.n	80104de <__udivmoddi4+0x2aa>
 8010406:	45a2      	cmp	sl, r4
 8010408:	d969      	bls.n	80104de <__udivmoddi4+0x2aa>
 801040a:	3802      	subs	r0, #2
 801040c:	4474      	add	r4, lr
 801040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010412:	fba0 8902 	umull	r8, r9, r0, r2
 8010416:	eba4 040a 	sub.w	r4, r4, sl
 801041a:	454c      	cmp	r4, r9
 801041c:	46c2      	mov	sl, r8
 801041e:	464b      	mov	r3, r9
 8010420:	d354      	bcc.n	80104cc <__udivmoddi4+0x298>
 8010422:	d051      	beq.n	80104c8 <__udivmoddi4+0x294>
 8010424:	2e00      	cmp	r6, #0
 8010426:	d069      	beq.n	80104fc <__udivmoddi4+0x2c8>
 8010428:	ebb1 050a 	subs.w	r5, r1, sl
 801042c:	eb64 0403 	sbc.w	r4, r4, r3
 8010430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010434:	40fd      	lsrs	r5, r7
 8010436:	40fc      	lsrs	r4, r7
 8010438:	ea4c 0505 	orr.w	r5, ip, r5
 801043c:	e9c6 5400 	strd	r5, r4, [r6]
 8010440:	2700      	movs	r7, #0
 8010442:	e747      	b.n	80102d4 <__udivmoddi4+0xa0>
 8010444:	f1c2 0320 	rsb	r3, r2, #32
 8010448:	fa20 f703 	lsr.w	r7, r0, r3
 801044c:	4095      	lsls	r5, r2
 801044e:	fa01 f002 	lsl.w	r0, r1, r2
 8010452:	fa21 f303 	lsr.w	r3, r1, r3
 8010456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801045a:	4338      	orrs	r0, r7
 801045c:	0c01      	lsrs	r1, r0, #16
 801045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8010462:	fa1f f885 	uxth.w	r8, r5
 8010466:	fb0e 3317 	mls	r3, lr, r7, r3
 801046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801046e:	fb07 f308 	mul.w	r3, r7, r8
 8010472:	428b      	cmp	r3, r1
 8010474:	fa04 f402 	lsl.w	r4, r4, r2
 8010478:	d907      	bls.n	801048a <__udivmoddi4+0x256>
 801047a:	1869      	adds	r1, r5, r1
 801047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8010480:	d22f      	bcs.n	80104e2 <__udivmoddi4+0x2ae>
 8010482:	428b      	cmp	r3, r1
 8010484:	d92d      	bls.n	80104e2 <__udivmoddi4+0x2ae>
 8010486:	3f02      	subs	r7, #2
 8010488:	4429      	add	r1, r5
 801048a:	1acb      	subs	r3, r1, r3
 801048c:	b281      	uxth	r1, r0
 801048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8010492:	fb0e 3310 	mls	r3, lr, r0, r3
 8010496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801049a:	fb00 f308 	mul.w	r3, r0, r8
 801049e:	428b      	cmp	r3, r1
 80104a0:	d907      	bls.n	80104b2 <__udivmoddi4+0x27e>
 80104a2:	1869      	adds	r1, r5, r1
 80104a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80104a8:	d217      	bcs.n	80104da <__udivmoddi4+0x2a6>
 80104aa:	428b      	cmp	r3, r1
 80104ac:	d915      	bls.n	80104da <__udivmoddi4+0x2a6>
 80104ae:	3802      	subs	r0, #2
 80104b0:	4429      	add	r1, r5
 80104b2:	1ac9      	subs	r1, r1, r3
 80104b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80104b8:	e73b      	b.n	8010332 <__udivmoddi4+0xfe>
 80104ba:	4637      	mov	r7, r6
 80104bc:	4630      	mov	r0, r6
 80104be:	e709      	b.n	80102d4 <__udivmoddi4+0xa0>
 80104c0:	4607      	mov	r7, r0
 80104c2:	e6e7      	b.n	8010294 <__udivmoddi4+0x60>
 80104c4:	4618      	mov	r0, r3
 80104c6:	e6fb      	b.n	80102c0 <__udivmoddi4+0x8c>
 80104c8:	4541      	cmp	r1, r8
 80104ca:	d2ab      	bcs.n	8010424 <__udivmoddi4+0x1f0>
 80104cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80104d0:	eb69 020e 	sbc.w	r2, r9, lr
 80104d4:	3801      	subs	r0, #1
 80104d6:	4613      	mov	r3, r2
 80104d8:	e7a4      	b.n	8010424 <__udivmoddi4+0x1f0>
 80104da:	4660      	mov	r0, ip
 80104dc:	e7e9      	b.n	80104b2 <__udivmoddi4+0x27e>
 80104de:	4618      	mov	r0, r3
 80104e0:	e795      	b.n	801040e <__udivmoddi4+0x1da>
 80104e2:	4667      	mov	r7, ip
 80104e4:	e7d1      	b.n	801048a <__udivmoddi4+0x256>
 80104e6:	4681      	mov	r9, r0
 80104e8:	e77c      	b.n	80103e4 <__udivmoddi4+0x1b0>
 80104ea:	3802      	subs	r0, #2
 80104ec:	442c      	add	r4, r5
 80104ee:	e747      	b.n	8010380 <__udivmoddi4+0x14c>
 80104f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80104f4:	442b      	add	r3, r5
 80104f6:	e72f      	b.n	8010358 <__udivmoddi4+0x124>
 80104f8:	4638      	mov	r0, r7
 80104fa:	e708      	b.n	801030e <__udivmoddi4+0xda>
 80104fc:	4637      	mov	r7, r6
 80104fe:	e6e9      	b.n	80102d4 <__udivmoddi4+0xa0>

08010500 <__aeabi_idiv0>:
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop

08010504 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08c      	sub	sp, #48	; 0x30
 8010508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801050a:	f107 031c 	add.w	r3, r7, #28
 801050e:	2200      	movs	r2, #0
 8010510:	601a      	str	r2, [r3, #0]
 8010512:	605a      	str	r2, [r3, #4]
 8010514:	609a      	str	r2, [r3, #8]
 8010516:	60da      	str	r2, [r3, #12]
 8010518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801051a:	2300      	movs	r3, #0
 801051c:	61bb      	str	r3, [r7, #24]
 801051e:	4b54      	ldr	r3, [pc, #336]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010522:	4a53      	ldr	r2, [pc, #332]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010524:	f043 0304 	orr.w	r3, r3, #4
 8010528:	6313      	str	r3, [r2, #48]	; 0x30
 801052a:	4b51      	ldr	r3, [pc, #324]	; (8010670 <MX_GPIO_Init+0x16c>)
 801052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801052e:	f003 0304 	and.w	r3, r3, #4
 8010532:	61bb      	str	r3, [r7, #24]
 8010534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010536:	2300      	movs	r3, #0
 8010538:	617b      	str	r3, [r7, #20]
 801053a:	4b4d      	ldr	r3, [pc, #308]	; (8010670 <MX_GPIO_Init+0x16c>)
 801053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053e:	4a4c      	ldr	r2, [pc, #304]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010544:	6313      	str	r3, [r2, #48]	; 0x30
 8010546:	4b4a      	ldr	r3, [pc, #296]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801054e:	617b      	str	r3, [r7, #20]
 8010550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010552:	2300      	movs	r3, #0
 8010554:	613b      	str	r3, [r7, #16]
 8010556:	4b46      	ldr	r3, [pc, #280]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055a:	4a45      	ldr	r2, [pc, #276]	; (8010670 <MX_GPIO_Init+0x16c>)
 801055c:	f043 0301 	orr.w	r3, r3, #1
 8010560:	6313      	str	r3, [r2, #48]	; 0x30
 8010562:	4b43      	ldr	r3, [pc, #268]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	613b      	str	r3, [r7, #16]
 801056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801056e:	2300      	movs	r3, #0
 8010570:	60fb      	str	r3, [r7, #12]
 8010572:	4b3f      	ldr	r3, [pc, #252]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010576:	4a3e      	ldr	r2, [pc, #248]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010578:	f043 0302 	orr.w	r3, r3, #2
 801057c:	6313      	str	r3, [r2, #48]	; 0x30
 801057e:	4b3c      	ldr	r3, [pc, #240]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	f003 0302 	and.w	r3, r3, #2
 8010586:	60fb      	str	r3, [r7, #12]
 8010588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801058a:	2300      	movs	r3, #0
 801058c:	60bb      	str	r3, [r7, #8]
 801058e:	4b38      	ldr	r3, [pc, #224]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010592:	4a37      	ldr	r2, [pc, #220]	; (8010670 <MX_GPIO_Init+0x16c>)
 8010594:	f043 0308 	orr.w	r3, r3, #8
 8010598:	6313      	str	r3, [r2, #48]	; 0x30
 801059a:	4b35      	ldr	r3, [pc, #212]	; (8010670 <MX_GPIO_Init+0x16c>)
 801059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059e:	f003 0308 	and.w	r3, r3, #8
 80105a2:	60bb      	str	r3, [r7, #8]
 80105a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80105a6:	2300      	movs	r3, #0
 80105a8:	607b      	str	r3, [r7, #4]
 80105aa:	4b31      	ldr	r3, [pc, #196]	; (8010670 <MX_GPIO_Init+0x16c>)
 80105ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ae:	4a30      	ldr	r2, [pc, #192]	; (8010670 <MX_GPIO_Init+0x16c>)
 80105b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105b4:	6313      	str	r3, [r2, #48]	; 0x30
 80105b6:	4b2e      	ldr	r3, [pc, #184]	; (8010670 <MX_GPIO_Init+0x16c>)
 80105b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105be:	607b      	str	r3, [r7, #4]
 80105c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80105c2:	2200      	movs	r2, #0
 80105c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80105c8:	482a      	ldr	r0, [pc, #168]	; (8010674 <MX_GPIO_Init+0x170>)
 80105ca:	f000 fdfd 	bl	80111c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80105ce:	2200      	movs	r2, #0
 80105d0:	2140      	movs	r1, #64	; 0x40
 80105d2:	4829      	ldr	r0, [pc, #164]	; (8010678 <MX_GPIO_Init+0x174>)
 80105d4:	f000 fdf8 	bl	80111c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80105d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80105dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80105de:	4b27      	ldr	r3, [pc, #156]	; (801067c <MX_GPIO_Init+0x178>)
 80105e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105e2:	2300      	movs	r3, #0
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80105e6:	f107 031c 	add.w	r3, r7, #28
 80105ea:	4619      	mov	r1, r3
 80105ec:	4824      	ldr	r0, [pc, #144]	; (8010680 <MX_GPIO_Init+0x17c>)
 80105ee:	f000 fc59 	bl	8010ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80105f2:	f244 0381 	movw	r3, #16513	; 0x4081
 80105f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105f8:	2301      	movs	r3, #1
 80105fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105fc:	2300      	movs	r3, #0
 80105fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010600:	2300      	movs	r3, #0
 8010602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010604:	f107 031c 	add.w	r3, r7, #28
 8010608:	4619      	mov	r1, r3
 801060a:	481a      	ldr	r0, [pc, #104]	; (8010674 <MX_GPIO_Init+0x170>)
 801060c:	f000 fc4a 	bl	8010ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8010610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010616:	2302      	movs	r3, #2
 8010618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801061a:	2300      	movs	r3, #0
 801061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801061e:	2303      	movs	r3, #3
 8010620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010622:	2307      	movs	r3, #7
 8010624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010626:	f107 031c 	add.w	r3, r7, #28
 801062a:	4619      	mov	r1, r3
 801062c:	4815      	ldr	r0, [pc, #84]	; (8010684 <MX_GPIO_Init+0x180>)
 801062e:	f000 fc39 	bl	8010ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010636:	2301      	movs	r3, #1
 8010638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801063a:	2300      	movs	r3, #0
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801063e:	2300      	movs	r3, #0
 8010640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010642:	f107 031c 	add.w	r3, r7, #28
 8010646:	4619      	mov	r1, r3
 8010648:	480b      	ldr	r0, [pc, #44]	; (8010678 <MX_GPIO_Init+0x174>)
 801064a:	f000 fc2b 	bl	8010ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 801064e:	2380      	movs	r3, #128	; 0x80
 8010650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010652:	2300      	movs	r3, #0
 8010654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010656:	2300      	movs	r3, #0
 8010658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801065a:	f107 031c 	add.w	r3, r7, #28
 801065e:	4619      	mov	r1, r3
 8010660:	4805      	ldr	r0, [pc, #20]	; (8010678 <MX_GPIO_Init+0x174>)
 8010662:	f000 fc1f 	bl	8010ea4 <HAL_GPIO_Init>

}
 8010666:	bf00      	nop
 8010668:	3730      	adds	r7, #48	; 0x30
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	40023800 	.word	0x40023800
 8010674:	40020400 	.word	0x40020400
 8010678:	40021800 	.word	0x40021800
 801067c:	10110000 	.word	0x10110000
 8010680:	40020800 	.word	0x40020800
 8010684:	40020c00 	.word	0x40020c00

08010688 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 8010690:	1d39      	adds	r1, r7, #4
 8010692:	2301      	movs	r3, #1
 8010694:	2201      	movs	r2, #1
 8010696:	4804      	ldr	r0, [pc, #16]	; (80106a8 <__io_putchar+0x20>)
 8010698:	f002 fda5 	bl	80131e6 <HAL_UART_Transmit>
	return ch;
 801069c:	687b      	ldr	r3, [r7, #4]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	20000278 	.word	0x20000278

080106ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  printf("application code init! \r\n");
 80106b0:	480a      	ldr	r0, [pc, #40]	; (80106dc <main+0x30>)
 80106b2:	f007 f9eb 	bl	8017a8c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80106b6:	f000 fa4f 	bl	8010b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80106ba:	f000 f813 	bl	80106e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80106be:	f7ff ff21 	bl	8010504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80106c2:	f000 f9ad 	bl	8010a20 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80106c6:	f006 fbc7 	bl	8016e58 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("App Running! \r\n");
 80106ca:	4805      	ldr	r0, [pc, #20]	; (80106e0 <main+0x34>)
 80106cc:	f007 f9de 	bl	8017a8c <puts>
	HAL_Delay(1000);
 80106d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80106d4:	f000 fab2 	bl	8010c3c <HAL_Delay>
	printf("App Running! \r\n");
 80106d8:	e7f7      	b.n	80106ca <main+0x1e>
 80106da:	bf00      	nop
 80106dc:	0801816c 	.word	0x0801816c
 80106e0:	08018188 	.word	0x08018188

080106e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b0a4      	sub	sp, #144	; 0x90
 80106e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80106ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80106ee:	2234      	movs	r2, #52	; 0x34
 80106f0:	2100      	movs	r1, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	f007 f8be 	bl	8017874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80106f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	605a      	str	r2, [r3, #4]
 8010702:	609a      	str	r2, [r3, #8]
 8010704:	60da      	str	r2, [r3, #12]
 8010706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010708:	f107 030c 	add.w	r3, r7, #12
 801070c:	223c      	movs	r2, #60	; 0x3c
 801070e:	2100      	movs	r1, #0
 8010710:	4618      	mov	r0, r3
 8010712:	f007 f8af 	bl	8017874 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010716:	2300      	movs	r3, #0
 8010718:	60bb      	str	r3, [r7, #8]
 801071a:	4b32      	ldr	r3, [pc, #200]	; (80107e4 <SystemClock_Config+0x100>)
 801071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071e:	4a31      	ldr	r2, [pc, #196]	; (80107e4 <SystemClock_Config+0x100>)
 8010720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010724:	6413      	str	r3, [r2, #64]	; 0x40
 8010726:	4b2f      	ldr	r3, [pc, #188]	; (80107e4 <SystemClock_Config+0x100>)
 8010728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801072e:	60bb      	str	r3, [r7, #8]
 8010730:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010732:	2300      	movs	r3, #0
 8010734:	607b      	str	r3, [r7, #4]
 8010736:	4b2c      	ldr	r3, [pc, #176]	; (80107e8 <SystemClock_Config+0x104>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a2b      	ldr	r2, [pc, #172]	; (80107e8 <SystemClock_Config+0x104>)
 801073c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010740:	6013      	str	r3, [r2, #0]
 8010742:	4b29      	ldr	r3, [pc, #164]	; (80107e8 <SystemClock_Config+0x104>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801074a:	607b      	str	r3, [r7, #4]
 801074c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801074e:	2301      	movs	r3, #1
 8010750:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8010752:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8010756:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010758:	2302      	movs	r3, #2
 801075a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801075c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010760:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8010762:	2308      	movs	r3, #8
 8010764:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8010766:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801076a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 801076e:	2304      	movs	r3, #4
 8010770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8010774:	2308      	movs	r3, #8
 8010776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 801077a:	2302      	movs	r3, #2
 801077c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010780:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010784:	4618      	mov	r0, r3
 8010786:	f002 fa9f 	bl	8012cc8 <HAL_RCC_OscConfig>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8010790:	f000 f82c 	bl	80107ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010794:	230f      	movs	r3, #15
 8010796:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010798:	2302      	movs	r3, #2
 801079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801079c:	2300      	movs	r3, #0
 801079e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80107a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80107a6:	2300      	movs	r3, #0
 80107a8:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80107aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80107ae:	2103      	movs	r1, #3
 80107b0:	4618      	mov	r0, r3
 80107b2:	f001 fec9 	bl	8012548 <HAL_RCC_ClockConfig>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80107bc:	f000 f816 	bl	80107ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80107c0:	2320      	movs	r3, #32
 80107c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80107c4:	2300      	movs	r3, #0
 80107c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80107c8:	f107 030c 	add.w	r3, r7, #12
 80107cc:	4618      	mov	r0, r3
 80107ce:	f002 f8ad 	bl	801292c <HAL_RCCEx_PeriphCLKConfig>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d001      	beq.n	80107dc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80107d8:	f000 f808 	bl	80107ec <Error_Handler>
  }
}
 80107dc:	bf00      	nop
 80107de:	3790      	adds	r7, #144	; 0x90
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	40023800 	.word	0x40023800
 80107e8:	40007000 	.word	0x40007000

080107ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80107f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80107f2:	e7fe      	b.n	80107f2 <Error_Handler+0x6>

080107f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80107fa:	2300      	movs	r3, #0
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	4b10      	ldr	r3, [pc, #64]	; (8010840 <HAL_MspInit+0x4c>)
 8010800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010802:	4a0f      	ldr	r2, [pc, #60]	; (8010840 <HAL_MspInit+0x4c>)
 8010804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010808:	6453      	str	r3, [r2, #68]	; 0x44
 801080a:	4b0d      	ldr	r3, [pc, #52]	; (8010840 <HAL_MspInit+0x4c>)
 801080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010812:	607b      	str	r3, [r7, #4]
 8010814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010816:	2300      	movs	r3, #0
 8010818:	603b      	str	r3, [r7, #0]
 801081a:	4b09      	ldr	r3, [pc, #36]	; (8010840 <HAL_MspInit+0x4c>)
 801081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801081e:	4a08      	ldr	r2, [pc, #32]	; (8010840 <HAL_MspInit+0x4c>)
 8010820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010824:	6413      	str	r3, [r2, #64]	; 0x40
 8010826:	4b06      	ldr	r3, [pc, #24]	; (8010840 <HAL_MspInit+0x4c>)
 8010828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801082e:	603b      	str	r3, [r7, #0]
 8010830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010832:	bf00      	nop
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	40023800 	.word	0x40023800

08010844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010844:	b480      	push	{r7}
 8010846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010848:	e7fe      	b.n	8010848 <NMI_Handler+0x4>

0801084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801084a:	b480      	push	{r7}
 801084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801084e:	e7fe      	b.n	801084e <HardFault_Handler+0x4>

08010850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010850:	b480      	push	{r7}
 8010852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010854:	e7fe      	b.n	8010854 <MemManage_Handler+0x4>

08010856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010856:	b480      	push	{r7}
 8010858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801085a:	e7fe      	b.n	801085a <BusFault_Handler+0x4>

0801085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801085c:	b480      	push	{r7}
 801085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010860:	e7fe      	b.n	8010860 <UsageFault_Handler+0x4>

08010862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010862:	b480      	push	{r7}
 8010864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010866:	bf00      	nop
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010870:	b480      	push	{r7}
 8010872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010874:	bf00      	nop
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr

0801087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801087e:	b480      	push	{r7}
 8010880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010882:	bf00      	nop
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010890:	f000 f9b4 	bl	8010bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010894:	bf00      	nop
 8010896:	bd80      	pop	{r7, pc}

08010898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801089c:	4802      	ldr	r0, [pc, #8]	; (80108a8 <OTG_FS_IRQHandler+0x10>)
 801089e:	f000 fe3c 	bl	801151a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80108a2:	bf00      	nop
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	2000078c 	.word	0x2000078c

080108ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b086      	sub	sp, #24
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80108b8:	2300      	movs	r3, #0
 80108ba:	617b      	str	r3, [r7, #20]
 80108bc:	e00a      	b.n	80108d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80108be:	f3af 8000 	nop.w
 80108c2:	4601      	mov	r1, r0
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	60ba      	str	r2, [r7, #8]
 80108ca:	b2ca      	uxtb	r2, r1
 80108cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	3301      	adds	r3, #1
 80108d2:	617b      	str	r3, [r7, #20]
 80108d4:	697a      	ldr	r2, [r7, #20]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	429a      	cmp	r2, r3
 80108da:	dbf0      	blt.n	80108be <_read+0x12>
	}

return len;
 80108dc:	687b      	ldr	r3, [r7, #4]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b086      	sub	sp, #24
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	60f8      	str	r0, [r7, #12]
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80108f2:	2300      	movs	r3, #0
 80108f4:	617b      	str	r3, [r7, #20]
 80108f6:	e009      	b.n	801090c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	60ba      	str	r2, [r7, #8]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fec1 	bl	8010688 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	3301      	adds	r3, #1
 801090a:	617b      	str	r3, [r7, #20]
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	429a      	cmp	r2, r3
 8010912:	dbf1      	blt.n	80108f8 <_write+0x12>
	}
	return len;
 8010914:	687b      	ldr	r3, [r7, #4]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3718      	adds	r7, #24
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <_close>:

int _close(int file)
{
 801091e:	b480      	push	{r7}
 8010920:	b083      	sub	sp, #12
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
	return -1;
 8010926:	f04f 33ff 	mov.w	r3, #4294967295
}
 801092a:	4618      	mov	r0, r3
 801092c:	370c      	adds	r7, #12
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr

08010936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010936:	b480      	push	{r7}
 8010938:	b083      	sub	sp, #12
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
 801093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010946:	605a      	str	r2, [r3, #4]
	return 0;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	370c      	adds	r7, #12
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr

08010956 <_isatty>:

int _isatty(int file)
{
 8010956:	b480      	push	{r7}
 8010958:	b083      	sub	sp, #12
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
	return 1;
 801095e:	2301      	movs	r3, #1
}
 8010960:	4618      	mov	r0, r3
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
	return 0;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
	...

08010988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010990:	4a14      	ldr	r2, [pc, #80]	; (80109e4 <_sbrk+0x5c>)
 8010992:	4b15      	ldr	r3, [pc, #84]	; (80109e8 <_sbrk+0x60>)
 8010994:	1ad3      	subs	r3, r2, r3
 8010996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801099c:	4b13      	ldr	r3, [pc, #76]	; (80109ec <_sbrk+0x64>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d102      	bne.n	80109aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80109a4:	4b11      	ldr	r3, [pc, #68]	; (80109ec <_sbrk+0x64>)
 80109a6:	4a12      	ldr	r2, [pc, #72]	; (80109f0 <_sbrk+0x68>)
 80109a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80109aa:	4b10      	ldr	r3, [pc, #64]	; (80109ec <_sbrk+0x64>)
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4413      	add	r3, r2
 80109b2:	693a      	ldr	r2, [r7, #16]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d207      	bcs.n	80109c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80109b8:	f006 ff22 	bl	8017800 <__errno>
 80109bc:	4602      	mov	r2, r0
 80109be:	230c      	movs	r3, #12
 80109c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	e009      	b.n	80109dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80109c8:	4b08      	ldr	r3, [pc, #32]	; (80109ec <_sbrk+0x64>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80109ce:	4b07      	ldr	r3, [pc, #28]	; (80109ec <_sbrk+0x64>)
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4413      	add	r3, r2
 80109d6:	4a05      	ldr	r2, [pc, #20]	; (80109ec <_sbrk+0x64>)
 80109d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80109da:	68fb      	ldr	r3, [r7, #12]
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3718      	adds	r7, #24
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20040000 	.word	0x20040000
 80109e8:	00000400 	.word	0x00000400
 80109ec:	2000016c 	.word	0x2000016c
 80109f0:	20000b98 	.word	0x20000b98

080109f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80109f4:	b480      	push	{r7}
 80109f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80109f8:	4b07      	ldr	r3, [pc, #28]	; (8010a18 <SystemInit+0x24>)
 80109fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109fe:	4a06      	ldr	r2, [pc, #24]	; (8010a18 <SystemInit+0x24>)
 8010a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010a08:	4b03      	ldr	r3, [pc, #12]	; (8010a18 <SystemInit+0x24>)
 8010a0a:	4a04      	ldr	r2, [pc, #16]	; (8010a1c <SystemInit+0x28>)
 8010a0c:	609a      	str	r2, [r3, #8]
#endif
}
 8010a0e:	bf00      	nop
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	e000ed00 	.word	0xe000ed00
 8010a1c:	08010000 	.word	0x08010000

08010a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8010a24:	4b11      	ldr	r3, [pc, #68]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a26:	4a12      	ldr	r2, [pc, #72]	; (8010a70 <MX_USART2_UART_Init+0x50>)
 8010a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8010a2a:	4b10      	ldr	r3, [pc, #64]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010a32:	4b0e      	ldr	r3, [pc, #56]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010a38:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010a3e:	4b0b      	ldr	r3, [pc, #44]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010a44:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a46:	220c      	movs	r2, #12
 8010a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010a4a:	4b08      	ldr	r3, [pc, #32]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010a50:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010a56:	4805      	ldr	r0, [pc, #20]	; (8010a6c <MX_USART2_UART_Init+0x4c>)
 8010a58:	f002 fb78 	bl	801314c <HAL_UART_Init>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d001      	beq.n	8010a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010a62:	f7ff fec3 	bl	80107ec <Error_Handler>
  }

}
 8010a66:	bf00      	nop
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	20000278 	.word	0x20000278
 8010a70:	40004400 	.word	0x40004400

08010a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b08a      	sub	sp, #40	; 0x28
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a7c:	f107 0314 	add.w	r3, r7, #20
 8010a80:	2200      	movs	r2, #0
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	605a      	str	r2, [r3, #4]
 8010a86:	609a      	str	r2, [r3, #8]
 8010a88:	60da      	str	r2, [r3, #12]
 8010a8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4a19      	ldr	r2, [pc, #100]	; (8010af8 <HAL_UART_MspInit+0x84>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d12b      	bne.n	8010aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010a96:	2300      	movs	r3, #0
 8010a98:	613b      	str	r3, [r7, #16]
 8010a9a:	4b18      	ldr	r3, [pc, #96]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9e:	4a17      	ldr	r2, [pc, #92]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8010aa6:	4b15      	ldr	r3, [pc, #84]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010aae:	613b      	str	r3, [r7, #16]
 8010ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	60fb      	str	r3, [r7, #12]
 8010ab6:	4b11      	ldr	r3, [pc, #68]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aba:	4a10      	ldr	r2, [pc, #64]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010abc:	f043 0301 	orr.w	r3, r3, #1
 8010ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8010ac2:	4b0e      	ldr	r3, [pc, #56]	; (8010afc <HAL_UART_MspInit+0x88>)
 8010ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac6:	f003 0301 	and.w	r3, r3, #1
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010ace:	230c      	movs	r3, #12
 8010ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ad2:	2302      	movs	r3, #2
 8010ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ada:	2303      	movs	r3, #3
 8010adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010ade:	2307      	movs	r3, #7
 8010ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ae2:	f107 0314 	add.w	r3, r7, #20
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4805      	ldr	r0, [pc, #20]	; (8010b00 <HAL_UART_MspInit+0x8c>)
 8010aea:	f000 f9db 	bl	8010ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010aee:	bf00      	nop
 8010af0:	3728      	adds	r7, #40	; 0x28
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	40004400 	.word	0x40004400
 8010afc:	40023800 	.word	0x40023800
 8010b00:	40020000 	.word	0x40020000

08010b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8010b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8010b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010b0a:	e003      	b.n	8010b14 <LoopCopyDataInit>

08010b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010b0c:	4b0c      	ldr	r3, [pc, #48]	; (8010b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010b12:	3104      	adds	r1, #4

08010b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8010b14:	480b      	ldr	r0, [pc, #44]	; (8010b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010b16:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010b1c:	d3f6      	bcc.n	8010b0c <CopyDataInit>
  ldr  r2, =_sbss
 8010b1e:	4a0b      	ldr	r2, [pc, #44]	; (8010b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010b20:	e002      	b.n	8010b28 <LoopFillZerobss>

08010b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8010b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010b24:	f842 3b04 	str.w	r3, [r2], #4

08010b28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8010b28:	4b09      	ldr	r3, [pc, #36]	; (8010b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010b2c:	d3f9      	bcc.n	8010b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8010b2e:	f7ff ff61 	bl	80109f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010b32:	f006 fe6b 	bl	801780c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010b36:	f7ff fdb9 	bl	80106ac <main>
  bx  lr
 8010b3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8010b3c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8010b40:	080182b0 	.word	0x080182b0
  ldr  r0, =_sdata
 8010b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010b48:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8010b4c:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8010b50:	20000b98 	.word	0x20000b98

08010b54 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010b54:	e7fe      	b.n	8010b54 <ADC_IRQHandler>
	...

08010b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010b5c:	4b0e      	ldr	r3, [pc, #56]	; (8010b98 <HAL_Init+0x40>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a0d      	ldr	r2, [pc, #52]	; (8010b98 <HAL_Init+0x40>)
 8010b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010b68:	4b0b      	ldr	r3, [pc, #44]	; (8010b98 <HAL_Init+0x40>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a0a      	ldr	r2, [pc, #40]	; (8010b98 <HAL_Init+0x40>)
 8010b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b74:	4b08      	ldr	r3, [pc, #32]	; (8010b98 <HAL_Init+0x40>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4a07      	ldr	r2, [pc, #28]	; (8010b98 <HAL_Init+0x40>)
 8010b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b80:	2003      	movs	r0, #3
 8010b82:	f000 f94d 	bl	8010e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b86:	2000      	movs	r0, #0
 8010b88:	f000 f808 	bl	8010b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010b8c:	f7ff fe32 	bl	80107f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	40023c00 	.word	0x40023c00

08010b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ba4:	4b12      	ldr	r3, [pc, #72]	; (8010bf0 <HAL_InitTick+0x54>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	4b12      	ldr	r3, [pc, #72]	; (8010bf4 <HAL_InitTick+0x58>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	4619      	mov	r1, r3
 8010bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 f965 	bl	8010e8a <HAL_SYSTICK_Config>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d001      	beq.n	8010bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e00e      	b.n	8010be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b0f      	cmp	r3, #15
 8010bce:	d80a      	bhi.n	8010be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	6879      	ldr	r1, [r7, #4]
 8010bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd8:	f000 f92d 	bl	8010e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010bdc:	4a06      	ldr	r2, [pc, #24]	; (8010bf8 <HAL_InitTick+0x5c>)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e000      	b.n	8010be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010be6:	2301      	movs	r3, #1
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	20000000 	.word	0x20000000
 8010bf4:	20000008 	.word	0x20000008
 8010bf8:	20000004 	.word	0x20000004

08010bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010c00:	4b06      	ldr	r3, [pc, #24]	; (8010c1c <HAL_IncTick+0x20>)
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	461a      	mov	r2, r3
 8010c06:	4b06      	ldr	r3, [pc, #24]	; (8010c20 <HAL_IncTick+0x24>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	4a04      	ldr	r2, [pc, #16]	; (8010c20 <HAL_IncTick+0x24>)
 8010c0e:	6013      	str	r3, [r2, #0]
}
 8010c10:	bf00      	nop
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	20000008 	.word	0x20000008
 8010c20:	200002b8 	.word	0x200002b8

08010c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010c24:	b480      	push	{r7}
 8010c26:	af00      	add	r7, sp, #0
  return uwTick;
 8010c28:	4b03      	ldr	r3, [pc, #12]	; (8010c38 <HAL_GetTick+0x14>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	200002b8 	.word	0x200002b8

08010c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010c44:	f7ff ffee 	bl	8010c24 <HAL_GetTick>
 8010c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c54:	d005      	beq.n	8010c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <HAL_Delay+0x40>)
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	4413      	add	r3, r2
 8010c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010c62:	bf00      	nop
 8010c64:	f7ff ffde 	bl	8010c24 <HAL_GetTick>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d8f7      	bhi.n	8010c64 <HAL_Delay+0x28>
  {
  }
}
 8010c74:	bf00      	nop
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	20000008 	.word	0x20000008

08010c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b085      	sub	sp, #20
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f003 0307 	and.w	r3, r3, #7
 8010c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010c90:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010cb2:	4a04      	ldr	r2, [pc, #16]	; (8010cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	60d3      	str	r3, [r2, #12]
}
 8010cb8:	bf00      	nop
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	e000ed00 	.word	0xe000ed00

08010cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010ccc:	4b04      	ldr	r3, [pc, #16]	; (8010ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	0a1b      	lsrs	r3, r3, #8
 8010cd2:	f003 0307 	and.w	r3, r3, #7
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr
 8010ce0:	e000ed00 	.word	0xe000ed00

08010ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	db0b      	blt.n	8010d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010cf6:	79fb      	ldrb	r3, [r7, #7]
 8010cf8:	f003 021f 	and.w	r2, r3, #31
 8010cfc:	4907      	ldr	r1, [pc, #28]	; (8010d1c <__NVIC_EnableIRQ+0x38>)
 8010cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d02:	095b      	lsrs	r3, r3, #5
 8010d04:	2001      	movs	r0, #1
 8010d06:	fa00 f202 	lsl.w	r2, r0, r2
 8010d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010d0e:	bf00      	nop
 8010d10:	370c      	adds	r7, #12
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	e000e100 	.word	0xe000e100

08010d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	4603      	mov	r3, r0
 8010d28:	6039      	str	r1, [r7, #0]
 8010d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	db0a      	blt.n	8010d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	490c      	ldr	r1, [pc, #48]	; (8010d6c <__NVIC_SetPriority+0x4c>)
 8010d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d3e:	0112      	lsls	r2, r2, #4
 8010d40:	b2d2      	uxtb	r2, r2
 8010d42:	440b      	add	r3, r1
 8010d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010d48:	e00a      	b.n	8010d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	4908      	ldr	r1, [pc, #32]	; (8010d70 <__NVIC_SetPriority+0x50>)
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	f003 030f 	and.w	r3, r3, #15
 8010d56:	3b04      	subs	r3, #4
 8010d58:	0112      	lsls	r2, r2, #4
 8010d5a:	b2d2      	uxtb	r2, r2
 8010d5c:	440b      	add	r3, r1
 8010d5e:	761a      	strb	r2, [r3, #24]
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	e000e100 	.word	0xe000e100
 8010d70:	e000ed00 	.word	0xe000ed00

08010d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b089      	sub	sp, #36	; 0x24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f003 0307 	and.w	r3, r3, #7
 8010d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	f1c3 0307 	rsb	r3, r3, #7
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	bf28      	it	cs
 8010d92:	2304      	movcs	r3, #4
 8010d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	3304      	adds	r3, #4
 8010d9a:	2b06      	cmp	r3, #6
 8010d9c:	d902      	bls.n	8010da4 <NVIC_EncodePriority+0x30>
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	3b03      	subs	r3, #3
 8010da2:	e000      	b.n	8010da6 <NVIC_EncodePriority+0x32>
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010da8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	fa02 f303 	lsl.w	r3, r2, r3
 8010db2:	43da      	mvns	r2, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	401a      	ands	r2, r3
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc6:	43d9      	mvns	r1, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010dcc:	4313      	orrs	r3, r2
         );
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3724      	adds	r7, #36	; 0x24
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
	...

08010ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010dec:	d301      	bcc.n	8010df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010dee:	2301      	movs	r3, #1
 8010df0:	e00f      	b.n	8010e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010df2:	4a0a      	ldr	r2, [pc, #40]	; (8010e1c <SysTick_Config+0x40>)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010dfa:	210f      	movs	r1, #15
 8010dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010e00:	f7ff ff8e 	bl	8010d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010e04:	4b05      	ldr	r3, [pc, #20]	; (8010e1c <SysTick_Config+0x40>)
 8010e06:	2200      	movs	r2, #0
 8010e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010e0a:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <SysTick_Config+0x40>)
 8010e0c:	2207      	movs	r2, #7
 8010e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	e000e010 	.word	0xe000e010

08010e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff ff29 	bl	8010c80 <__NVIC_SetPriorityGrouping>
}
 8010e2e:	bf00      	nop
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b086      	sub	sp, #24
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	60b9      	str	r1, [r7, #8]
 8010e40:	607a      	str	r2, [r7, #4]
 8010e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010e44:	2300      	movs	r3, #0
 8010e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010e48:	f7ff ff3e 	bl	8010cc8 <__NVIC_GetPriorityGrouping>
 8010e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	68b9      	ldr	r1, [r7, #8]
 8010e52:	6978      	ldr	r0, [r7, #20]
 8010e54:	f7ff ff8e 	bl	8010d74 <NVIC_EncodePriority>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff ff5d 	bl	8010d20 <__NVIC_SetPriority>
}
 8010e66:	bf00      	nop
 8010e68:	3718      	adds	r7, #24
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b082      	sub	sp, #8
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	4603      	mov	r3, r0
 8010e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff ff31 	bl	8010ce4 <__NVIC_EnableIRQ>
}
 8010e82:	bf00      	nop
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff ffa2 	bl	8010ddc <SysTick_Config>
 8010e98:	4603      	mov	r3, r0
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
	...

08010ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b089      	sub	sp, #36	; 0x24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010eba:	2300      	movs	r3, #0
 8010ebc:	61fb      	str	r3, [r7, #28]
 8010ebe:	e165      	b.n	801118c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	f040 8154 	bne.w	8011186 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d00b      	beq.n	8010efe <HAL_GPIO_Init+0x5a>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d007      	beq.n	8010efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010ef2:	2b11      	cmp	r3, #17
 8010ef4:	d003      	beq.n	8010efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	2b12      	cmp	r3, #18
 8010efc:	d130      	bne.n	8010f60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	2203      	movs	r2, #3
 8010f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f0e:	43db      	mvns	r3, r3
 8010f10:	69ba      	ldr	r2, [r7, #24]
 8010f12:	4013      	ands	r3, r2
 8010f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	68da      	ldr	r2, [r3, #12]
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	4313      	orrs	r3, r2
 8010f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	69ba      	ldr	r2, [r7, #24]
 8010f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010f34:	2201      	movs	r2, #1
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	fa02 f303 	lsl.w	r3, r2, r3
 8010f3c:	43db      	mvns	r3, r3
 8010f3e:	69ba      	ldr	r2, [r7, #24]
 8010f40:	4013      	ands	r3, r2
 8010f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	091b      	lsrs	r3, r3, #4
 8010f4a:	f003 0201 	and.w	r2, r3, #1
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	fa02 f303 	lsl.w	r3, r2, r3
 8010f54:	69ba      	ldr	r2, [r7, #24]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	69ba      	ldr	r2, [r7, #24]
 8010f5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	2203      	movs	r2, #3
 8010f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f70:	43db      	mvns	r3, r3
 8010f72:	69ba      	ldr	r2, [r7, #24]
 8010f74:	4013      	ands	r3, r2
 8010f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	689a      	ldr	r2, [r3, #8]
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	fa02 f303 	lsl.w	r3, r2, r3
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	4313      	orrs	r3, r2
 8010f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	69ba      	ldr	r2, [r7, #24]
 8010f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d003      	beq.n	8010fa0 <HAL_GPIO_Init+0xfc>
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	2b12      	cmp	r3, #18
 8010f9e:	d123      	bne.n	8010fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	08da      	lsrs	r2, r3, #3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	3208      	adds	r2, #8
 8010fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	f003 0307 	and.w	r3, r3, #7
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	220f      	movs	r2, #15
 8010fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fbc:	43db      	mvns	r3, r3
 8010fbe:	69ba      	ldr	r2, [r7, #24]
 8010fc0:	4013      	ands	r3, r2
 8010fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	691a      	ldr	r2, [r3, #16]
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	f003 0307 	and.w	r3, r3, #7
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd4:	69ba      	ldr	r2, [r7, #24]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	08da      	lsrs	r2, r3, #3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	3208      	adds	r2, #8
 8010fe2:	69b9      	ldr	r1, [r7, #24]
 8010fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	2203      	movs	r2, #3
 8010ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ff8:	43db      	mvns	r3, r3
 8010ffa:	69ba      	ldr	r2, [r7, #24]
 8010ffc:	4013      	ands	r3, r2
 8010ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	f003 0203 	and.w	r2, r3, #3
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	fa02 f303 	lsl.w	r3, r2, r3
 8011010:	69ba      	ldr	r2, [r7, #24]
 8011012:	4313      	orrs	r3, r2
 8011014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	69ba      	ldr	r2, [r7, #24]
 801101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 80ae 	beq.w	8011186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801102a:	2300      	movs	r3, #0
 801102c:	60fb      	str	r3, [r7, #12]
 801102e:	4b5c      	ldr	r3, [pc, #368]	; (80111a0 <HAL_GPIO_Init+0x2fc>)
 8011030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011032:	4a5b      	ldr	r2, [pc, #364]	; (80111a0 <HAL_GPIO_Init+0x2fc>)
 8011034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011038:	6453      	str	r3, [r2, #68]	; 0x44
 801103a:	4b59      	ldr	r3, [pc, #356]	; (80111a0 <HAL_GPIO_Init+0x2fc>)
 801103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011046:	4a57      	ldr	r2, [pc, #348]	; (80111a4 <HAL_GPIO_Init+0x300>)
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	089b      	lsrs	r3, r3, #2
 801104c:	3302      	adds	r3, #2
 801104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	f003 0303 	and.w	r3, r3, #3
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	220f      	movs	r2, #15
 801105e:	fa02 f303 	lsl.w	r3, r2, r3
 8011062:	43db      	mvns	r3, r3
 8011064:	69ba      	ldr	r2, [r7, #24]
 8011066:	4013      	ands	r3, r2
 8011068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4a4e      	ldr	r2, [pc, #312]	; (80111a8 <HAL_GPIO_Init+0x304>)
 801106e:	4293      	cmp	r3, r2
 8011070:	d025      	beq.n	80110be <HAL_GPIO_Init+0x21a>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	4a4d      	ldr	r2, [pc, #308]	; (80111ac <HAL_GPIO_Init+0x308>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d01f      	beq.n	80110ba <HAL_GPIO_Init+0x216>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4a4c      	ldr	r2, [pc, #304]	; (80111b0 <HAL_GPIO_Init+0x30c>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d019      	beq.n	80110b6 <HAL_GPIO_Init+0x212>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4a4b      	ldr	r2, [pc, #300]	; (80111b4 <HAL_GPIO_Init+0x310>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d013      	beq.n	80110b2 <HAL_GPIO_Init+0x20e>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a4a      	ldr	r2, [pc, #296]	; (80111b8 <HAL_GPIO_Init+0x314>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d00d      	beq.n	80110ae <HAL_GPIO_Init+0x20a>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4a49      	ldr	r2, [pc, #292]	; (80111bc <HAL_GPIO_Init+0x318>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d007      	beq.n	80110aa <HAL_GPIO_Init+0x206>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4a48      	ldr	r2, [pc, #288]	; (80111c0 <HAL_GPIO_Init+0x31c>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d101      	bne.n	80110a6 <HAL_GPIO_Init+0x202>
 80110a2:	2306      	movs	r3, #6
 80110a4:	e00c      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110a6:	2307      	movs	r3, #7
 80110a8:	e00a      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110aa:	2305      	movs	r3, #5
 80110ac:	e008      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110ae:	2304      	movs	r3, #4
 80110b0:	e006      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110b2:	2303      	movs	r3, #3
 80110b4:	e004      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110b6:	2302      	movs	r3, #2
 80110b8:	e002      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110ba:	2301      	movs	r3, #1
 80110bc:	e000      	b.n	80110c0 <HAL_GPIO_Init+0x21c>
 80110be:	2300      	movs	r3, #0
 80110c0:	69fa      	ldr	r2, [r7, #28]
 80110c2:	f002 0203 	and.w	r2, r2, #3
 80110c6:	0092      	lsls	r2, r2, #2
 80110c8:	4093      	lsls	r3, r2
 80110ca:	69ba      	ldr	r2, [r7, #24]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80110d0:	4934      	ldr	r1, [pc, #208]	; (80111a4 <HAL_GPIO_Init+0x300>)
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	089b      	lsrs	r3, r3, #2
 80110d6:	3302      	adds	r3, #2
 80110d8:	69ba      	ldr	r2, [r7, #24]
 80110da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80110de:	4b39      	ldr	r3, [pc, #228]	; (80111c4 <HAL_GPIO_Init+0x320>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	43db      	mvns	r3, r3
 80110e8:	69ba      	ldr	r2, [r7, #24]
 80110ea:	4013      	ands	r3, r2
 80110ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d003      	beq.n	8011102 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80110fa:	69ba      	ldr	r2, [r7, #24]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	4313      	orrs	r3, r2
 8011100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011102:	4a30      	ldr	r2, [pc, #192]	; (80111c4 <HAL_GPIO_Init+0x320>)
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011108:	4b2e      	ldr	r3, [pc, #184]	; (80111c4 <HAL_GPIO_Init+0x320>)
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	43db      	mvns	r3, r3
 8011112:	69ba      	ldr	r2, [r7, #24]
 8011114:	4013      	ands	r3, r2
 8011116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011120:	2b00      	cmp	r3, #0
 8011122:	d003      	beq.n	801112c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8011124:	69ba      	ldr	r2, [r7, #24]
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	4313      	orrs	r3, r2
 801112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801112c:	4a25      	ldr	r2, [pc, #148]	; (80111c4 <HAL_GPIO_Init+0x320>)
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011132:	4b24      	ldr	r3, [pc, #144]	; (80111c4 <HAL_GPIO_Init+0x320>)
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	43db      	mvns	r3, r3
 801113c:	69ba      	ldr	r2, [r7, #24]
 801113e:	4013      	ands	r3, r2
 8011140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801114a:	2b00      	cmp	r3, #0
 801114c:	d003      	beq.n	8011156 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 801114e:	69ba      	ldr	r2, [r7, #24]
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	4313      	orrs	r3, r2
 8011154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011156:	4a1b      	ldr	r2, [pc, #108]	; (80111c4 <HAL_GPIO_Init+0x320>)
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801115c:	4b19      	ldr	r3, [pc, #100]	; (80111c4 <HAL_GPIO_Init+0x320>)
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	43db      	mvns	r3, r3
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	4013      	ands	r3, r2
 801116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011174:	2b00      	cmp	r3, #0
 8011176:	d003      	beq.n	8011180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8011178:	69ba      	ldr	r2, [r7, #24]
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	4313      	orrs	r3, r2
 801117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011180:	4a10      	ldr	r2, [pc, #64]	; (80111c4 <HAL_GPIO_Init+0x320>)
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	3301      	adds	r3, #1
 801118a:	61fb      	str	r3, [r7, #28]
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	2b0f      	cmp	r3, #15
 8011190:	f67f ae96 	bls.w	8010ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011194:	bf00      	nop
 8011196:	3724      	adds	r7, #36	; 0x24
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	40023800 	.word	0x40023800
 80111a4:	40013800 	.word	0x40013800
 80111a8:	40020000 	.word	0x40020000
 80111ac:	40020400 	.word	0x40020400
 80111b0:	40020800 	.word	0x40020800
 80111b4:	40020c00 	.word	0x40020c00
 80111b8:	40021000 	.word	0x40021000
 80111bc:	40021400 	.word	0x40021400
 80111c0:	40021800 	.word	0x40021800
 80111c4:	40013c00 	.word	0x40013c00

080111c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	807b      	strh	r3, [r7, #2]
 80111d4:	4613      	mov	r3, r2
 80111d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80111d8:	787b      	ldrb	r3, [r7, #1]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d003      	beq.n	80111e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80111de:	887a      	ldrh	r2, [r7, #2]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80111e4:	e003      	b.n	80111ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80111e6:	887b      	ldrh	r3, [r7, #2]
 80111e8:	041a      	lsls	r2, r3, #16
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	619a      	str	r2, [r3, #24]
}
 80111ee:	bf00      	nop
 80111f0:	370c      	adds	r7, #12
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80111fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111fc:	b08f      	sub	sp, #60	; 0x3c
 80111fe:	af0a      	add	r7, sp, #40	; 0x28
 8011200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011208:	2301      	movs	r3, #1
 801120a:	e116      	b.n	801143a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d106      	bne.n	801122c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f005 ffae 	bl	8017188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2203      	movs	r2, #3
 8011230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801123c:	2b00      	cmp	r3, #0
 801123e:	d102      	bne.n	8011246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2200      	movs	r2, #0
 8011244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4618      	mov	r0, r3
 801124c:	f002 fd3f 	bl	8013cce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	603b      	str	r3, [r7, #0]
 8011256:	687e      	ldr	r6, [r7, #4]
 8011258:	466d      	mov	r5, sp
 801125a:	f106 0410 	add.w	r4, r6, #16
 801125e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011266:	e894 0003 	ldmia.w	r4, {r0, r1}
 801126a:	e885 0003 	stmia.w	r5, {r0, r1}
 801126e:	1d33      	adds	r3, r6, #4
 8011270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011272:	6838      	ldr	r0, [r7, #0]
 8011274:	f002 fc16 	bl	8013aa4 <USB_CoreInit>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d005      	beq.n	801128a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2202      	movs	r2, #2
 8011282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	e0d7      	b.n	801143a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2100      	movs	r1, #0
 8011290:	4618      	mov	r0, r3
 8011292:	f002 fd2d 	bl	8013cf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011296:	2300      	movs	r3, #0
 8011298:	73fb      	strb	r3, [r7, #15]
 801129a:	e04a      	b.n	8011332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801129c:	7bfa      	ldrb	r2, [r7, #15]
 801129e:	6879      	ldr	r1, [r7, #4]
 80112a0:	4613      	mov	r3, r2
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	1a9b      	subs	r3, r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	440b      	add	r3, r1
 80112aa:	333d      	adds	r3, #61	; 0x3d
 80112ac:	2201      	movs	r2, #1
 80112ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80112b0:	7bfa      	ldrb	r2, [r7, #15]
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	4613      	mov	r3, r2
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	1a9b      	subs	r3, r3, r2
 80112ba:	009b      	lsls	r3, r3, #2
 80112bc:	440b      	add	r3, r1
 80112be:	333c      	adds	r3, #60	; 0x3c
 80112c0:	7bfa      	ldrb	r2, [r7, #15]
 80112c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80112c4:	7bfa      	ldrb	r2, [r7, #15]
 80112c6:	7bfb      	ldrb	r3, [r7, #15]
 80112c8:	b298      	uxth	r0, r3
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	4613      	mov	r3, r2
 80112ce:	00db      	lsls	r3, r3, #3
 80112d0:	1a9b      	subs	r3, r3, r2
 80112d2:	009b      	lsls	r3, r3, #2
 80112d4:	440b      	add	r3, r1
 80112d6:	3342      	adds	r3, #66	; 0x42
 80112d8:	4602      	mov	r2, r0
 80112da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80112dc:	7bfa      	ldrb	r2, [r7, #15]
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	4613      	mov	r3, r2
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	1a9b      	subs	r3, r3, r2
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	440b      	add	r3, r1
 80112ea:	333f      	adds	r3, #63	; 0x3f
 80112ec:	2200      	movs	r2, #0
 80112ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80112f0:	7bfa      	ldrb	r2, [r7, #15]
 80112f2:	6879      	ldr	r1, [r7, #4]
 80112f4:	4613      	mov	r3, r2
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	1a9b      	subs	r3, r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	440b      	add	r3, r1
 80112fe:	3344      	adds	r3, #68	; 0x44
 8011300:	2200      	movs	r2, #0
 8011302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011304:	7bfa      	ldrb	r2, [r7, #15]
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	4613      	mov	r3, r2
 801130a:	00db      	lsls	r3, r3, #3
 801130c:	1a9b      	subs	r3, r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	440b      	add	r3, r1
 8011312:	3348      	adds	r3, #72	; 0x48
 8011314:	2200      	movs	r2, #0
 8011316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011318:	7bfa      	ldrb	r2, [r7, #15]
 801131a:	6879      	ldr	r1, [r7, #4]
 801131c:	4613      	mov	r3, r2
 801131e:	00db      	lsls	r3, r3, #3
 8011320:	1a9b      	subs	r3, r3, r2
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	440b      	add	r3, r1
 8011326:	3350      	adds	r3, #80	; 0x50
 8011328:	2200      	movs	r2, #0
 801132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801132c:	7bfb      	ldrb	r3, [r7, #15]
 801132e:	3301      	adds	r3, #1
 8011330:	73fb      	strb	r3, [r7, #15]
 8011332:	7bfa      	ldrb	r2, [r7, #15]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	429a      	cmp	r2, r3
 801133a:	d3af      	bcc.n	801129c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801133c:	2300      	movs	r3, #0
 801133e:	73fb      	strb	r3, [r7, #15]
 8011340:	e044      	b.n	80113cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011342:	7bfa      	ldrb	r2, [r7, #15]
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	4613      	mov	r3, r2
 8011348:	00db      	lsls	r3, r3, #3
 801134a:	1a9b      	subs	r3, r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	440b      	add	r3, r1
 8011350:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8011354:	2200      	movs	r2, #0
 8011356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011358:	7bfa      	ldrb	r2, [r7, #15]
 801135a:	6879      	ldr	r1, [r7, #4]
 801135c:	4613      	mov	r3, r2
 801135e:	00db      	lsls	r3, r3, #3
 8011360:	1a9b      	subs	r3, r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	440b      	add	r3, r1
 8011366:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801136a:	7bfa      	ldrb	r2, [r7, #15]
 801136c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801136e:	7bfa      	ldrb	r2, [r7, #15]
 8011370:	6879      	ldr	r1, [r7, #4]
 8011372:	4613      	mov	r3, r2
 8011374:	00db      	lsls	r3, r3, #3
 8011376:	1a9b      	subs	r3, r3, r2
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	440b      	add	r3, r1
 801137c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011384:	7bfa      	ldrb	r2, [r7, #15]
 8011386:	6879      	ldr	r1, [r7, #4]
 8011388:	4613      	mov	r3, r2
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	1a9b      	subs	r3, r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	440b      	add	r3, r1
 8011392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8011396:	2200      	movs	r2, #0
 8011398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801139a:	7bfa      	ldrb	r2, [r7, #15]
 801139c:	6879      	ldr	r1, [r7, #4]
 801139e:	4613      	mov	r3, r2
 80113a0:	00db      	lsls	r3, r3, #3
 80113a2:	1a9b      	subs	r3, r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	440b      	add	r3, r1
 80113a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80113b0:	7bfa      	ldrb	r2, [r7, #15]
 80113b2:	6879      	ldr	r1, [r7, #4]
 80113b4:	4613      	mov	r3, r2
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	1a9b      	subs	r3, r3, r2
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	440b      	add	r3, r1
 80113be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80113c2:	2200      	movs	r2, #0
 80113c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	3301      	adds	r3, #1
 80113ca:	73fb      	strb	r3, [r7, #15]
 80113cc:	7bfa      	ldrb	r2, [r7, #15]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d3b5      	bcc.n	8011342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	603b      	str	r3, [r7, #0]
 80113dc:	687e      	ldr	r6, [r7, #4]
 80113de:	466d      	mov	r5, sp
 80113e0:	f106 0410 	add.w	r4, r6, #16
 80113e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80113f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80113f4:	1d33      	adds	r3, r6, #4
 80113f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80113f8:	6838      	ldr	r0, [r7, #0]
 80113fa:	f002 fca3 	bl	8013d44 <USB_DevInit>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d005      	beq.n	8011410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2202      	movs	r2, #2
 8011408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801140c:	2301      	movs	r3, #1
 801140e:	e014      	b.n	801143a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011424:	2b01      	cmp	r3, #1
 8011426:	d102      	bne.n	801142e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f001 f869 	bl	8012500 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4618      	mov	r0, r3
 8011434:	f003 fc02 	bl	8014c3c <USB_DevDisconnect>

  return HAL_OK;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011442 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011456:	2b01      	cmp	r3, #1
 8011458:	d101      	bne.n	801145e <HAL_PCD_Start+0x1c>
 801145a:	2302      	movs	r3, #2
 801145c:	e020      	b.n	80114a0 <HAL_PCD_Start+0x5e>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2201      	movs	r2, #1
 8011462:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801146a:	2b01      	cmp	r3, #1
 801146c:	d109      	bne.n	8011482 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011472:	2b01      	cmp	r3, #1
 8011474:	d005      	beq.n	8011482 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801147a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	4618      	mov	r0, r3
 8011488:	f002 fc10 	bl	8013cac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4618      	mov	r0, r3
 8011492:	f003 fbb2 	bl	8014bfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d101      	bne.n	80114c4 <HAL_PCD_Stop+0x1c>
 80114c0:	2302      	movs	r3, #2
 80114c2:	e026      	b.n	8011512 <HAL_PCD_Stop+0x6a>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2201      	movs	r2, #1
 80114c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f002 fbfc 	bl	8013cce <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4618      	mov	r0, r3
 80114dc:	f003 fbae 	bl	8014c3c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	2110      	movs	r1, #16
 80114e6:	4618      	mov	r0, r3
 80114e8:	f002 fd8a 	bl	8014000 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d109      	bne.n	8011508 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d005      	beq.n	8011508 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801151a:	b590      	push	{r4, r7, lr}
 801151c:	b08d      	sub	sp, #52	; 0x34
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011528:	6a3b      	ldr	r3, [r7, #32]
 801152a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4618      	mov	r0, r3
 8011532:	f003 fc37 	bl	8014da4 <USB_GetMode>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	f040 83ca 	bne.w	8011cd2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4618      	mov	r0, r3
 8011544:	f003 fb9b 	bl	8014c7e <USB_ReadInterrupts>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 83c0 	beq.w	8011cd0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4618      	mov	r0, r3
 8011556:	f003 fb92 	bl	8014c7e <USB_ReadInterrupts>
 801155a:	4603      	mov	r3, r0
 801155c:	f003 0302 	and.w	r3, r3, #2
 8011560:	2b02      	cmp	r3, #2
 8011562:	d107      	bne.n	8011574 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	695a      	ldr	r2, [r3, #20]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f002 0202 	and.w	r2, r2, #2
 8011572:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	f003 fb80 	bl	8014c7e <USB_ReadInterrupts>
 801157e:	4603      	mov	r3, r0
 8011580:	f003 0310 	and.w	r3, r3, #16
 8011584:	2b10      	cmp	r3, #16
 8011586:	d161      	bne.n	801164c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	699a      	ldr	r2, [r3, #24]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f022 0210 	bic.w	r2, r2, #16
 8011596:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	6a1b      	ldr	r3, [r3, #32]
 801159c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	f003 020f 	and.w	r2, r3, #15
 80115a4:	4613      	mov	r3, r2
 80115a6:	00db      	lsls	r3, r3, #3
 80115a8:	1a9b      	subs	r3, r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	3304      	adds	r3, #4
 80115b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	0c5b      	lsrs	r3, r3, #17
 80115bc:	f003 030f 	and.w	r3, r3, #15
 80115c0:	2b02      	cmp	r3, #2
 80115c2:	d124      	bne.n	801160e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80115c4:	69ba      	ldr	r2, [r7, #24]
 80115c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80115ca:	4013      	ands	r3, r2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d035      	beq.n	801163c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80115d4:	69bb      	ldr	r3, [r7, #24]
 80115d6:	091b      	lsrs	r3, r3, #4
 80115d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80115da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80115de:	b29b      	uxth	r3, r3
 80115e0:	461a      	mov	r2, r3
 80115e2:	6a38      	ldr	r0, [r7, #32]
 80115e4:	f003 f9e6 	bl	80149b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	68da      	ldr	r2, [r3, #12]
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	091b      	lsrs	r3, r3, #4
 80115f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80115f4:	441a      	add	r2, r3
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	699a      	ldr	r2, [r3, #24]
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	091b      	lsrs	r3, r3, #4
 8011602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011606:	441a      	add	r2, r3
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	619a      	str	r2, [r3, #24]
 801160c:	e016      	b.n	801163c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	0c5b      	lsrs	r3, r3, #17
 8011612:	f003 030f 	and.w	r3, r3, #15
 8011616:	2b06      	cmp	r3, #6
 8011618:	d110      	bne.n	801163c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011620:	2208      	movs	r2, #8
 8011622:	4619      	mov	r1, r3
 8011624:	6a38      	ldr	r0, [r7, #32]
 8011626:	f003 f9c5 	bl	80149b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	699a      	ldr	r2, [r3, #24]
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	091b      	lsrs	r3, r3, #4
 8011632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011636:	441a      	add	r2, r3
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	699a      	ldr	r2, [r3, #24]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f042 0210 	orr.w	r2, r2, #16
 801164a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4618      	mov	r0, r3
 8011652:	f003 fb14 	bl	8014c7e <USB_ReadInterrupts>
 8011656:	4603      	mov	r3, r0
 8011658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801165c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011660:	d16e      	bne.n	8011740 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8011662:	2300      	movs	r3, #0
 8011664:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4618      	mov	r0, r3
 801166c:	f003 fb1a 	bl	8014ca4 <USB_ReadDevAllOutEpInterrupt>
 8011670:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8011672:	e062      	b.n	801173a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d057      	beq.n	801172e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011684:	b2d2      	uxtb	r2, r2
 8011686:	4611      	mov	r1, r2
 8011688:	4618      	mov	r0, r3
 801168a:	f003 fb3f 	bl	8014d0c <USB_ReadDevOutEPInterrupt>
 801168e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	f003 0301 	and.w	r3, r3, #1
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00c      	beq.n	80116b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	015a      	lsls	r2, r3, #5
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	4413      	add	r3, r2
 80116a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116a6:	461a      	mov	r2, r3
 80116a8:	2301      	movs	r3, #1
 80116aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80116ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fd7c 	bl	80121ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	f003 0308 	and.w	r3, r3, #8
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00c      	beq.n	80116d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80116be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ca:	461a      	mov	r2, r3
 80116cc:	2308      	movs	r3, #8
 80116ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80116d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 fe76 	bl	80123c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	f003 0310 	and.w	r3, r3, #16
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d008      	beq.n	80116f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	015a      	lsls	r2, r3, #5
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	4413      	add	r3, r2
 80116ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ee:	461a      	mov	r2, r3
 80116f0:	2310      	movs	r3, #16
 80116f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	f003 0320 	and.w	r3, r3, #32
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d008      	beq.n	8011710 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80116fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011700:	015a      	lsls	r2, r3, #5
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	4413      	add	r3, r2
 8011706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801170a:	461a      	mov	r2, r3
 801170c:	2320      	movs	r3, #32
 801170e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011716:	2b00      	cmp	r3, #0
 8011718:	d009      	beq.n	801172e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171c:	015a      	lsls	r2, r3, #5
 801171e:	69fb      	ldr	r3, [r7, #28]
 8011720:	4413      	add	r3, r2
 8011722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011726:	461a      	mov	r2, r3
 8011728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801172c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011730:	3301      	adds	r3, #1
 8011732:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8011734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011736:	085b      	lsrs	r3, r3, #1
 8011738:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173c:	2b00      	cmp	r3, #0
 801173e:	d199      	bne.n	8011674 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	f003 fa9a 	bl	8014c7e <USB_ReadInterrupts>
 801174a:	4603      	mov	r3, r0
 801174c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011754:	f040 80c0 	bne.w	80118d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4618      	mov	r0, r3
 801175e:	f003 fabb 	bl	8014cd8 <USB_ReadDevAllInEpInterrupt>
 8011762:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8011764:	2300      	movs	r3, #0
 8011766:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8011768:	e0b2      	b.n	80118d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176c:	f003 0301 	and.w	r3, r3, #1
 8011770:	2b00      	cmp	r3, #0
 8011772:	f000 80a7 	beq.w	80118c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801177c:	b2d2      	uxtb	r2, r2
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f003 fae1 	bl	8014d48 <USB_ReadDevInEPInterrupt>
 8011786:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d057      	beq.n	8011842 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011794:	f003 030f 	and.w	r3, r3, #15
 8011798:	2201      	movs	r2, #1
 801179a:	fa02 f303 	lsl.w	r3, r2, r3
 801179e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	43db      	mvns	r3, r3
 80117ac:	69f9      	ldr	r1, [r7, #28]
 80117ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80117b2:	4013      	ands	r3, r2
 80117b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80117b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b8:	015a      	lsls	r2, r3, #5
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	4413      	add	r3, r2
 80117be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117c2:	461a      	mov	r2, r3
 80117c4:	2301      	movs	r3, #1
 80117c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d132      	bne.n	8011836 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d4:	4613      	mov	r3, r2
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	1a9b      	subs	r3, r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	440b      	add	r3, r1
 80117de:	3348      	adds	r3, #72	; 0x48
 80117e0:	6819      	ldr	r1, [r3, #0]
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117e6:	4613      	mov	r3, r2
 80117e8:	00db      	lsls	r3, r3, #3
 80117ea:	1a9b      	subs	r3, r3, r2
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	4403      	add	r3, r0
 80117f0:	3344      	adds	r3, #68	; 0x44
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4419      	add	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117fa:	4613      	mov	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	1a9b      	subs	r3, r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4403      	add	r3, r0
 8011804:	3348      	adds	r3, #72	; 0x48
 8011806:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8011808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180a:	2b00      	cmp	r3, #0
 801180c:	d113      	bne.n	8011836 <HAL_PCD_IRQHandler+0x31c>
 801180e:	6879      	ldr	r1, [r7, #4]
 8011810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011812:	4613      	mov	r3, r2
 8011814:	00db      	lsls	r3, r3, #3
 8011816:	1a9b      	subs	r3, r3, r2
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	440b      	add	r3, r1
 801181c:	3350      	adds	r3, #80	; 0x50
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d108      	bne.n	8011836 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6818      	ldr	r0, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801182e:	461a      	mov	r2, r3
 8011830:	2101      	movs	r1, #1
 8011832:	f003 fae9 	bl	8014e08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	b2db      	uxtb	r3, r3
 801183a:	4619      	mov	r1, r3
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f005 fd32 	bl	80172a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	f003 0308 	and.w	r3, r3, #8
 8011848:	2b00      	cmp	r3, #0
 801184a:	d008      	beq.n	801185e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011858:	461a      	mov	r2, r3
 801185a:	2308      	movs	r3, #8
 801185c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	f003 0310 	and.w	r3, r3, #16
 8011864:	2b00      	cmp	r3, #0
 8011866:	d008      	beq.n	801187a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	015a      	lsls	r2, r3, #5
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	4413      	add	r3, r2
 8011870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011874:	461a      	mov	r2, r3
 8011876:	2310      	movs	r3, #16
 8011878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011880:	2b00      	cmp	r3, #0
 8011882:	d008      	beq.n	8011896 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	015a      	lsls	r2, r3, #5
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	4413      	add	r3, r2
 801188c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011890:	461a      	mov	r2, r3
 8011892:	2340      	movs	r3, #64	; 0x40
 8011894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	f003 0302 	and.w	r3, r3, #2
 801189c:	2b00      	cmp	r3, #0
 801189e:	d008      	beq.n	80118b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	015a      	lsls	r2, r3, #5
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	4413      	add	r3, r2
 80118a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ac:	461a      	mov	r2, r3
 80118ae:	2302      	movs	r3, #2
 80118b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d003      	beq.n	80118c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80118bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fbe6 	bl	8012090 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80118c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c6:	3301      	adds	r3, #1
 80118c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80118ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118cc:	085b      	lsrs	r3, r3, #1
 80118ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80118d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f47f af49 	bne.w	801176a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4618      	mov	r0, r3
 80118de:	f003 f9ce 	bl	8014c7e <USB_ReadInterrupts>
 80118e2:	4603      	mov	r3, r0
 80118e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80118e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118ec:	d122      	bne.n	8011934 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	69fa      	ldr	r2, [r7, #28]
 80118f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80118fc:	f023 0301 	bic.w	r3, r3, #1
 8011900:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8011908:	2b01      	cmp	r3, #1
 801190a:	d108      	bne.n	801191e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011914:	2100      	movs	r1, #0
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f005 fef8 	bl	801770c <HAL_PCDEx_LPM_Callback>
 801191c:	e002      	b.n	8011924 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f005 fd2e 	bl	8017380 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	695a      	ldr	r2, [r3, #20]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8011932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4618      	mov	r0, r3
 801193a:	f003 f9a0 	bl	8014c7e <USB_ReadInterrupts>
 801193e:	4603      	mov	r3, r0
 8011940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011948:	d112      	bne.n	8011970 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b01      	cmp	r3, #1
 8011958:	d102      	bne.n	8011960 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f005 fcea 	bl	8017334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	695a      	ldr	r2, [r3, #20]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801196e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4618      	mov	r0, r3
 8011976:	f003 f982 	bl	8014c7e <USB_ReadInterrupts>
 801197a:	4603      	mov	r3, r0
 801197c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011984:	d121      	bne.n	80119ca <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	695a      	ldr	r2, [r3, #20]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8011994:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801199c:	2b00      	cmp	r3, #0
 801199e:	d111      	bne.n	80119c4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2201      	movs	r2, #1
 80119a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ae:	089b      	lsrs	r3, r3, #2
 80119b0:	f003 020f 	and.w	r2, r3, #15
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80119ba:	2101      	movs	r1, #1
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f005 fea5 	bl	801770c <HAL_PCDEx_LPM_Callback>
 80119c2:	e002      	b.n	80119ca <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f005 fcb5 	bl	8017334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f003 f955 	bl	8014c7e <USB_ReadInterrupts>
 80119d4:	4603      	mov	r3, r0
 80119d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80119da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119de:	f040 80c7 	bne.w	8011b70 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	69fa      	ldr	r2, [r7, #28]
 80119ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80119f0:	f023 0301 	bic.w	r3, r3, #1
 80119f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2110      	movs	r1, #16
 80119fc:	4618      	mov	r0, r3
 80119fe:	f002 faff 	bl	8014000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a02:	2300      	movs	r3, #0
 8011a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a06:	e056      	b.n	8011ab6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8011a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0a:	015a      	lsls	r2, r3, #5
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	4413      	add	r3, r2
 8011a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a14:	461a      	mov	r2, r3
 8011a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	015a      	lsls	r2, r3, #5
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	4413      	add	r3, r2
 8011a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a2c:	0151      	lsls	r1, r2, #5
 8011a2e:	69fa      	ldr	r2, [r7, #28]
 8011a30:	440a      	add	r2, r1
 8011a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a3a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	015a      	lsls	r2, r3, #5
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	4413      	add	r3, r2
 8011a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a4c:	0151      	lsls	r1, r2, #5
 8011a4e:	69fa      	ldr	r2, [r7, #28]
 8011a50:	440a      	add	r2, r1
 8011a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011a5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	015a      	lsls	r2, r3, #5
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	4413      	add	r3, r2
 8011a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a68:	461a      	mov	r2, r3
 8011a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a6e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a72:	015a      	lsls	r2, r3, #5
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	4413      	add	r3, r2
 8011a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a80:	0151      	lsls	r1, r2, #5
 8011a82:	69fa      	ldr	r2, [r7, #28]
 8011a84:	440a      	add	r2, r1
 8011a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	015a      	lsls	r2, r3, #5
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aa0:	0151      	lsls	r1, r2, #5
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	440a      	add	r2, r1
 8011aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011aae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d3a3      	bcc.n	8011a08 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ac6:	69db      	ldr	r3, [r3, #28]
 8011ac8:	69fa      	ldr	r2, [r7, #28]
 8011aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ace:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011ad2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d016      	beq.n	8011b0a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ae6:	69fa      	ldr	r2, [r7, #28]
 8011ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011aec:	f043 030b 	orr.w	r3, r3, #11
 8011af0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011afc:	69fa      	ldr	r2, [r7, #28]
 8011afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b02:	f043 030b 	orr.w	r3, r3, #11
 8011b06:	6453      	str	r3, [r2, #68]	; 0x44
 8011b08:	e015      	b.n	8011b36 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	69fa      	ldr	r2, [r7, #28]
 8011b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8011b20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b28:	691b      	ldr	r3, [r3, #16]
 8011b2a:	69fa      	ldr	r2, [r7, #28]
 8011b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b30:	f043 030b 	orr.w	r3, r3, #11
 8011b34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	69fa      	ldr	r2, [r7, #28]
 8011b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011b48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6818      	ldr	r0, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	f003 f954 	bl	8014e08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	695a      	ldr	r2, [r3, #20]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f003 f882 	bl	8014c7e <USB_ReadInterrupts>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b84:	d124      	bne.n	8011bd0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f003 f918 	bl	8014dc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f002 fa94 	bl	80140c2 <USB_GetDevSpeed>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681c      	ldr	r4, [r3, #0]
 8011ba6:	f000 fe8d 	bl	80128c4 <HAL_RCC_GetHCLKFreq>
 8011baa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f001 ffd7 	bl	8013b68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f005 fb9b 	bl	80172f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	695a      	ldr	r2, [r3, #20]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f003 f852 	bl	8014c7e <USB_ReadInterrupts>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	f003 0308 	and.w	r3, r3, #8
 8011be0:	2b08      	cmp	r3, #8
 8011be2:	d10a      	bne.n	8011bfa <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f005 fb78 	bl	80172da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	695a      	ldr	r2, [r3, #20]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f002 0208 	and.w	r2, r2, #8
 8011bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f003 f83d 	bl	8014c7e <USB_ReadInterrupts>
 8011c04:	4603      	mov	r3, r0
 8011c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c0e:	d10f      	bne.n	8011c30 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011c10:	2300      	movs	r3, #0
 8011c12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f005 fbd0 	bl	80173c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	695a      	ldr	r2, [r3, #20]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f003 f822 	bl	8014c7e <USB_ReadInterrupts>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c44:	d10f      	bne.n	8011c66 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011c46:	2300      	movs	r3, #0
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	4619      	mov	r1, r3
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f005 fba3 	bl	801739c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	695a      	ldr	r2, [r3, #20]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8011c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f003 f807 	bl	8014c7e <USB_ReadInterrupts>
 8011c70:	4603      	mov	r3, r0
 8011c72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c7a:	d10a      	bne.n	8011c92 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f005 fbb1 	bl	80173e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	695a      	ldr	r2, [r3, #20]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f002 fff1 	bl	8014c7e <USB_ReadInterrupts>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	f003 0304 	and.w	r3, r3, #4
 8011ca2:	2b04      	cmp	r3, #4
 8011ca4:	d115      	bne.n	8011cd2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	f003 0304 	and.w	r3, r3, #4
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d002      	beq.n	8011cbe <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f005 fba1 	bl	8017400 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	6859      	ldr	r1, [r3, #4]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	69ba      	ldr	r2, [r7, #24]
 8011cca:	430a      	orrs	r2, r1
 8011ccc:	605a      	str	r2, [r3, #4]
 8011cce:	e000      	b.n	8011cd2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8011cd0:	bf00      	nop
    }
  }
}
 8011cd2:	3734      	adds	r7, #52	; 0x34
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd90      	pop	{r4, r7, pc}

08011cd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d101      	bne.n	8011cf2 <HAL_PCD_SetAddress+0x1a>
 8011cee:	2302      	movs	r3, #2
 8011cf0:	e013      	b.n	8011d1a <HAL_PCD_SetAddress+0x42>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	78fa      	ldrb	r2, [r7, #3]
 8011cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	78fa      	ldrb	r2, [r7, #3]
 8011d08:	4611      	mov	r1, r2
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f002 ff4f 	bl	8014bae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011d18:	2300      	movs	r3, #0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b084      	sub	sp, #16
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	461a      	mov	r2, r3
 8011d30:	4603      	mov	r3, r0
 8011d32:	70fb      	strb	r3, [r7, #3]
 8011d34:	460b      	mov	r3, r1
 8011d36:	803b      	strh	r3, [r7, #0]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	da0f      	bge.n	8011d68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011d48:	78fb      	ldrb	r3, [r7, #3]
 8011d4a:	f003 020f 	and.w	r2, r3, #15
 8011d4e:	4613      	mov	r3, r2
 8011d50:	00db      	lsls	r3, r3, #3
 8011d52:	1a9b      	subs	r3, r3, r2
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	3338      	adds	r3, #56	; 0x38
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2201      	movs	r2, #1
 8011d64:	705a      	strb	r2, [r3, #1]
 8011d66:	e00f      	b.n	8011d88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011d68:	78fb      	ldrb	r3, [r7, #3]
 8011d6a:	f003 020f 	and.w	r2, r3, #15
 8011d6e:	4613      	mov	r3, r2
 8011d70:	00db      	lsls	r3, r3, #3
 8011d72:	1a9b      	subs	r3, r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	3304      	adds	r3, #4
 8011d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2200      	movs	r2, #0
 8011d86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011d88:	78fb      	ldrb	r3, [r7, #3]
 8011d8a:	f003 030f 	and.w	r3, r3, #15
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011d94:	883a      	ldrh	r2, [r7, #0]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	78ba      	ldrb	r2, [r7, #2]
 8011d9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	785b      	ldrb	r3, [r3, #1]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d004      	beq.n	8011db2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011db2:	78bb      	ldrb	r3, [r7, #2]
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d102      	bne.n	8011dbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d101      	bne.n	8011dcc <HAL_PCD_EP_Open+0xaa>
 8011dc8:	2302      	movs	r3, #2
 8011dca:	e00e      	b.n	8011dea <HAL_PCD_EP_Open+0xc8>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	68f9      	ldr	r1, [r7, #12]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f002 f996 	bl	801410c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8011de8:	7afb      	ldrb	r3, [r7, #11]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b086      	sub	sp, #24
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	60f8      	str	r0, [r7, #12]
 8011dfa:	607a      	str	r2, [r7, #4]
 8011dfc:	603b      	str	r3, [r7, #0]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011e02:	7afb      	ldrb	r3, [r7, #11]
 8011e04:	f003 020f 	and.w	r2, r3, #15
 8011e08:	4613      	mov	r3, r2
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	1a9b      	subs	r3, r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011e14:	68fa      	ldr	r2, [r7, #12]
 8011e16:	4413      	add	r3, r2
 8011e18:	3304      	adds	r3, #4
 8011e1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	683a      	ldr	r2, [r7, #0]
 8011e26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2200      	movs	r2, #0
 8011e32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011e34:	7afb      	ldrb	r3, [r7, #11]
 8011e36:	f003 030f 	and.w	r3, r3, #15
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d102      	bne.n	8011e4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011e4e:	7afb      	ldrb	r3, [r7, #11]
 8011e50:	f003 030f 	and.w	r3, r3, #15
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d109      	bne.n	8011e6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	6818      	ldr	r0, [r3, #0]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	461a      	mov	r2, r3
 8011e64:	6979      	ldr	r1, [r7, #20]
 8011e66:	f002 fc1d 	bl	80146a4 <USB_EP0StartXfer>
 8011e6a:	e008      	b.n	8011e7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	6818      	ldr	r0, [r3, #0]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	691b      	ldr	r3, [r3, #16]
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	461a      	mov	r2, r3
 8011e78:	6979      	ldr	r1, [r7, #20]
 8011e7a:	f002 f9cf 	bl	801421c <USB_EPStartXfer>
  }

  return HAL_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	607a      	str	r2, [r7, #4]
 8011e92:	603b      	str	r3, [r7, #0]
 8011e94:	460b      	mov	r3, r1
 8011e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011e98:	7afb      	ldrb	r3, [r7, #11]
 8011e9a:	f003 020f 	and.w	r2, r3, #15
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	00db      	lsls	r3, r3, #3
 8011ea2:	1a9b      	subs	r3, r3, r2
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	3338      	adds	r3, #56	; 0x38
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	4413      	add	r3, r2
 8011eac:	3304      	adds	r3, #4
 8011eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011ec8:	7afb      	ldrb	r3, [r7, #11]
 8011eca:	f003 030f 	and.w	r3, r3, #15
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	691b      	ldr	r3, [r3, #16]
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d102      	bne.n	8011ee2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011ee2:	7afb      	ldrb	r3, [r7, #11]
 8011ee4:	f003 030f 	and.w	r3, r3, #15
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d109      	bne.n	8011f00 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6818      	ldr	r0, [r3, #0]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	6979      	ldr	r1, [r7, #20]
 8011efa:	f002 fbd3 	bl	80146a4 <USB_EP0StartXfer>
 8011efe:	e008      	b.n	8011f12 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	6818      	ldr	r0, [r3, #0]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	691b      	ldr	r3, [r3, #16]
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	6979      	ldr	r1, [r7, #20]
 8011f0e:	f002 f985 	bl	801421c <USB_EPStartXfer>
  }

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3718      	adds	r7, #24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	460b      	mov	r3, r1
 8011f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8011f28:	78fb      	ldrb	r3, [r7, #3]
 8011f2a:	f003 020f 	and.w	r2, r3, #15
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d901      	bls.n	8011f3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8011f36:	2301      	movs	r3, #1
 8011f38:	e050      	b.n	8011fdc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	da0f      	bge.n	8011f62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f42:	78fb      	ldrb	r3, [r7, #3]
 8011f44:	f003 020f 	and.w	r2, r3, #15
 8011f48:	4613      	mov	r3, r2
 8011f4a:	00db      	lsls	r3, r3, #3
 8011f4c:	1a9b      	subs	r3, r3, r2
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	3338      	adds	r3, #56	; 0x38
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	4413      	add	r3, r2
 8011f56:	3304      	adds	r3, #4
 8011f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	705a      	strb	r2, [r3, #1]
 8011f60:	e00d      	b.n	8011f7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011f62:	78fa      	ldrb	r2, [r7, #3]
 8011f64:	4613      	mov	r3, r2
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	1a9b      	subs	r3, r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	4413      	add	r3, r2
 8011f74:	3304      	adds	r3, #4
 8011f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2201      	movs	r2, #1
 8011f82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011f84:	78fb      	ldrb	r3, [r7, #3]
 8011f86:	f003 030f 	and.w	r3, r3, #15
 8011f8a:	b2da      	uxtb	r2, r3
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d101      	bne.n	8011f9e <HAL_PCD_EP_SetStall+0x82>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e01e      	b.n	8011fdc <HAL_PCD_EP_SetStall+0xc0>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	68f9      	ldr	r1, [r7, #12]
 8011fac:	4618      	mov	r0, r3
 8011fae:	f002 fd2a 	bl	8014a06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011fb2:	78fb      	ldrb	r3, [r7, #3]
 8011fb4:	f003 030f 	and.w	r3, r3, #15
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10a      	bne.n	8011fd2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6818      	ldr	r0, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	b2d9      	uxtb	r1, r3
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f002 ff1b 	bl	8014e08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	460b      	mov	r3, r1
 8011fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011ff0:	78fb      	ldrb	r3, [r7, #3]
 8011ff2:	f003 020f 	and.w	r2, r3, #15
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d901      	bls.n	8012002 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011ffe:	2301      	movs	r3, #1
 8012000:	e042      	b.n	8012088 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012006:	2b00      	cmp	r3, #0
 8012008:	da0f      	bge.n	801202a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	f003 020f 	and.w	r2, r3, #15
 8012010:	4613      	mov	r3, r2
 8012012:	00db      	lsls	r3, r3, #3
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	3338      	adds	r3, #56	; 0x38
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	4413      	add	r3, r2
 801201e:	3304      	adds	r3, #4
 8012020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2201      	movs	r2, #1
 8012026:	705a      	strb	r2, [r3, #1]
 8012028:	e00f      	b.n	801204a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801202a:	78fb      	ldrb	r3, [r7, #3]
 801202c:	f003 020f 	and.w	r2, r3, #15
 8012030:	4613      	mov	r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	4413      	add	r3, r2
 8012040:	3304      	adds	r3, #4
 8012042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2200      	movs	r2, #0
 8012048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2200      	movs	r2, #0
 801204e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012050:	78fb      	ldrb	r3, [r7, #3]
 8012052:	f003 030f 	and.w	r3, r3, #15
 8012056:	b2da      	uxtb	r2, r3
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8012062:	2b01      	cmp	r3, #1
 8012064:	d101      	bne.n	801206a <HAL_PCD_EP_ClrStall+0x86>
 8012066:	2302      	movs	r3, #2
 8012068:	e00e      	b.n	8012088 <HAL_PCD_EP_ClrStall+0xa4>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2201      	movs	r2, #1
 801206e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68f9      	ldr	r1, [r7, #12]
 8012078:	4618      	mov	r0, r3
 801207a:	f002 fd32 	bl	8014ae2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8012086:	2300      	movs	r3, #0
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08a      	sub	sp, #40	; 0x28
 8012094:	af02      	add	r7, sp, #8
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	4613      	mov	r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	3338      	adds	r3, #56	; 0x38
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	4413      	add	r3, r2
 80120b4:	3304      	adds	r3, #4
 80120b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	699a      	ldr	r2, [r3, #24]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	695b      	ldr	r3, [r3, #20]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d901      	bls.n	80120c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80120c4:	2301      	movs	r3, #1
 80120c6:	e06c      	b.n	80121a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	695a      	ldr	r2, [r3, #20]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	699b      	ldr	r3, [r3, #24]
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	69fa      	ldr	r2, [r7, #28]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d902      	bls.n	80120e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	3303      	adds	r3, #3
 80120e8:	089b      	lsrs	r3, r3, #2
 80120ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80120ec:	e02b      	b.n	8012146 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	695a      	ldr	r2, [r3, #20]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	69fa      	ldr	r2, [r7, #28]
 8012100:	429a      	cmp	r2, r3
 8012102:	d902      	bls.n	801210a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	3303      	adds	r3, #3
 801210e:	089b      	lsrs	r3, r3, #2
 8012110:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	68d9      	ldr	r1, [r3, #12]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	b2da      	uxtb	r2, r3
 801211a:	69fb      	ldr	r3, [r7, #28]
 801211c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012122:	b2db      	uxtb	r3, r3
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	4603      	mov	r3, r0
 8012128:	6978      	ldr	r0, [r7, #20]
 801212a:	f002 fc0e 	bl	801494a <USB_WritePacket>

    ep->xfer_buff  += len;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	68da      	ldr	r2, [r3, #12]
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	441a      	add	r2, r3
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	699a      	ldr	r2, [r3, #24]
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	441a      	add	r2, r3
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	015a      	lsls	r2, r3, #5
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	4413      	add	r3, r2
 801214e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012152:	699b      	ldr	r3, [r3, #24]
 8012154:	b29b      	uxth	r3, r3
 8012156:	69ba      	ldr	r2, [r7, #24]
 8012158:	429a      	cmp	r2, r3
 801215a:	d809      	bhi.n	8012170 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	699a      	ldr	r2, [r3, #24]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012164:	429a      	cmp	r2, r3
 8012166:	d203      	bcs.n	8012170 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	695b      	ldr	r3, [r3, #20]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d1be      	bne.n	80120ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	695a      	ldr	r2, [r3, #20]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	699b      	ldr	r3, [r3, #24]
 8012178:	429a      	cmp	r2, r3
 801217a:	d811      	bhi.n	80121a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	f003 030f 	and.w	r3, r3, #15
 8012182:	2201      	movs	r2, #1
 8012184:	fa02 f303 	lsl.w	r3, r2, r3
 8012188:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	43db      	mvns	r3, r3
 8012196:	6939      	ldr	r1, [r7, #16]
 8012198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801219c:	4013      	ands	r3, r2
 801219e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3720      	adds	r7, #32
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b086      	sub	sp, #24
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	333c      	adds	r3, #60	; 0x3c
 80121c4:	3304      	adds	r3, #4
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	015a      	lsls	r2, r3, #5
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	4413      	add	r3, r2
 80121d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	f040 80a0 	bne.w	8012324 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	f003 0308 	and.w	r3, r3, #8
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d015      	beq.n	801221a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	4a72      	ldr	r2, [pc, #456]	; (80123bc <PCD_EP_OutXfrComplete_int+0x210>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	f240 80dd 	bls.w	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80121fe:	2b00      	cmp	r3, #0
 8012200:	f000 80d7 	beq.w	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	015a      	lsls	r2, r3, #5
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	4413      	add	r3, r2
 801220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012210:	461a      	mov	r2, r3
 8012212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012216:	6093      	str	r3, [r2, #8]
 8012218:	e0cb      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	f003 0320 	and.w	r3, r3, #32
 8012220:	2b00      	cmp	r3, #0
 8012222:	d009      	beq.n	8012238 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	015a      	lsls	r2, r3, #5
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	4413      	add	r3, r2
 801222c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012230:	461a      	mov	r2, r3
 8012232:	2320      	movs	r3, #32
 8012234:	6093      	str	r3, [r2, #8]
 8012236:	e0bc      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801223e:	2b00      	cmp	r3, #0
 8012240:	f040 80b7 	bne.w	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	4a5d      	ldr	r2, [pc, #372]	; (80123bc <PCD_EP_OutXfrComplete_int+0x210>)
 8012248:	4293      	cmp	r3, r2
 801224a:	d90f      	bls.n	801226c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012252:	2b00      	cmp	r3, #0
 8012254:	d00a      	beq.n	801226c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	015a      	lsls	r2, r3, #5
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	4413      	add	r3, r2
 801225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012262:	461a      	mov	r2, r3
 8012264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012268:	6093      	str	r3, [r2, #8]
 801226a:	e0a2      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801226c:	6879      	ldr	r1, [r7, #4]
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	4613      	mov	r3, r2
 8012272:	00db      	lsls	r3, r3, #3
 8012274:	1a9b      	subs	r3, r3, r2
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	440b      	add	r3, r1
 801227a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801227e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	0159      	lsls	r1, r3, #5
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	440b      	add	r3, r1
 8012288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801228c:	691b      	ldr	r3, [r3, #16]
 801228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8012292:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	683a      	ldr	r2, [r7, #0]
 8012298:	4613      	mov	r3, r2
 801229a:	00db      	lsls	r3, r3, #3
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	4403      	add	r3, r0
 80122a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80122a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80122a8:	6879      	ldr	r1, [r7, #4]
 80122aa:	683a      	ldr	r2, [r7, #0]
 80122ac:	4613      	mov	r3, r2
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	1a9b      	subs	r3, r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	440b      	add	r3, r1
 80122b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80122ba:	6819      	ldr	r1, [r3, #0]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	4613      	mov	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	1a9b      	subs	r3, r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	4403      	add	r3, r0
 80122ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4419      	add	r1, r3
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	683a      	ldr	r2, [r7, #0]
 80122d6:	4613      	mov	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	1a9b      	subs	r3, r3, r2
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4403      	add	r3, r0
 80122e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80122e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d114      	bne.n	8012316 <PCD_EP_OutXfrComplete_int+0x16a>
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	683a      	ldr	r2, [r7, #0]
 80122f0:	4613      	mov	r3, r2
 80122f2:	00db      	lsls	r3, r3, #3
 80122f4:	1a9b      	subs	r3, r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	440b      	add	r3, r1
 80122fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d108      	bne.n	8012316 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6818      	ldr	r0, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801230e:	461a      	mov	r2, r3
 8012310:	2101      	movs	r1, #1
 8012312:	f002 fd79 	bl	8014e08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	b2db      	uxtb	r3, r3
 801231a:	4619      	mov	r1, r3
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f004 ffa7 	bl	8017270 <HAL_PCD_DataOutStageCallback>
 8012322:	e046      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4a26      	ldr	r2, [pc, #152]	; (80123c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d124      	bne.n	8012376 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012332:	2b00      	cmp	r3, #0
 8012334:	d00a      	beq.n	801234c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	015a      	lsls	r2, r3, #5
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	4413      	add	r3, r2
 801233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012342:	461a      	mov	r2, r3
 8012344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012348:	6093      	str	r3, [r2, #8]
 801234a:	e032      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	f003 0320 	and.w	r3, r3, #32
 8012352:	2b00      	cmp	r3, #0
 8012354:	d008      	beq.n	8012368 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	015a      	lsls	r2, r3, #5
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	4413      	add	r3, r2
 801235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012362:	461a      	mov	r2, r3
 8012364:	2320      	movs	r3, #32
 8012366:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	4619      	mov	r1, r3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f004 ff7e 	bl	8017270 <HAL_PCD_DataOutStageCallback>
 8012374:	e01d      	b.n	80123b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d114      	bne.n	80123a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 801237c:	6879      	ldr	r1, [r7, #4]
 801237e:	683a      	ldr	r2, [r7, #0]
 8012380:	4613      	mov	r3, r2
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	440b      	add	r3, r1
 801238a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d108      	bne.n	80123a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6818      	ldr	r0, [r3, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801239e:	461a      	mov	r2, r3
 80123a0:	2100      	movs	r1, #0
 80123a2:	f002 fd31 	bl	8014e08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	4619      	mov	r1, r3
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f004 ff5f 	bl	8017270 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80123b2:	2300      	movs	r3, #0
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3718      	adds	r7, #24
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	4f54300a 	.word	0x4f54300a
 80123c0:	4f54310a 	.word	0x4f54310a

080123c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b086      	sub	sp, #24
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	333c      	adds	r3, #60	; 0x3c
 80123dc:	3304      	adds	r3, #4
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	015a      	lsls	r2, r3, #5
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	4413      	add	r3, r2
 80123ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	4a15      	ldr	r2, [pc, #84]	; (801244c <PCD_EP_OutSetupPacket_int+0x88>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d90e      	bls.n	8012418 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012400:	2b00      	cmp	r3, #0
 8012402:	d009      	beq.n	8012418 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	015a      	lsls	r2, r3, #5
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	4413      	add	r3, r2
 801240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012410:	461a      	mov	r2, r3
 8012412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012416:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f004 ff17 	bl	801724c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	4a0a      	ldr	r2, [pc, #40]	; (801244c <PCD_EP_OutSetupPacket_int+0x88>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d90c      	bls.n	8012440 <PCD_EP_OutSetupPacket_int+0x7c>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	2b01      	cmp	r3, #1
 801242c:	d108      	bne.n	8012440 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6818      	ldr	r0, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012438:	461a      	mov	r2, r3
 801243a:	2101      	movs	r1, #1
 801243c:	f002 fce4 	bl	8014e08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012440:	2300      	movs	r3, #0
}
 8012442:	4618      	mov	r0, r3
 8012444:	3718      	adds	r7, #24
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	4f54300a 	.word	0x4f54300a

08012450 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	460b      	mov	r3, r1
 801245a:	70fb      	strb	r3, [r7, #3]
 801245c:	4613      	mov	r3, r2
 801245e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012466:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8012468:	78fb      	ldrb	r3, [r7, #3]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d107      	bne.n	801247e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801246e:	883b      	ldrh	r3, [r7, #0]
 8012470:	0419      	lsls	r1, r3, #16
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	430a      	orrs	r2, r1
 801247a:	629a      	str	r2, [r3, #40]	; 0x28
 801247c:	e028      	b.n	80124d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012484:	0c1b      	lsrs	r3, r3, #16
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	4413      	add	r3, r2
 801248a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801248c:	2300      	movs	r3, #0
 801248e:	73fb      	strb	r3, [r7, #15]
 8012490:	e00d      	b.n	80124ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	7bfb      	ldrb	r3, [r7, #15]
 8012498:	3340      	adds	r3, #64	; 0x40
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	4413      	add	r3, r2
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	0c1b      	lsrs	r3, r3, #16
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	4413      	add	r3, r2
 80124a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80124a8:	7bfb      	ldrb	r3, [r7, #15]
 80124aa:	3301      	adds	r3, #1
 80124ac:	73fb      	strb	r3, [r7, #15]
 80124ae:	7bfa      	ldrb	r2, [r7, #15]
 80124b0:	78fb      	ldrb	r3, [r7, #3]
 80124b2:	3b01      	subs	r3, #1
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d3ec      	bcc.n	8012492 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80124b8:	883b      	ldrh	r3, [r7, #0]
 80124ba:	0418      	lsls	r0, r3, #16
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6819      	ldr	r1, [r3, #0]
 80124c0:	78fb      	ldrb	r3, [r7, #3]
 80124c2:	3b01      	subs	r3, #1
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	4302      	orrs	r2, r0
 80124c8:	3340      	adds	r3, #64	; 0x40
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	440b      	add	r3, r1
 80124ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3714      	adds	r7, #20
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr

080124de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80124de:	b480      	push	{r7}
 80124e0:	b083      	sub	sp, #12
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	460b      	mov	r3, r1
 80124e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	887a      	ldrh	r2, [r7, #2]
 80124f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2201      	movs	r2, #1
 8012512:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2200      	movs	r2, #0
 801251a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	699b      	ldr	r3, [r3, #24]
 8012522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801252e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012532:	f043 0303 	orr.w	r3, r3, #3
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801253a:	2300      	movs	r3, #0
}
 801253c:	4618      	mov	r0, r3
 801253e:	3714      	adds	r7, #20
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr

08012548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d101      	bne.n	801255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012558:	2301      	movs	r3, #1
 801255a:	e0cc      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801255c:	4b68      	ldr	r3, [pc, #416]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f003 030f 	and.w	r3, r3, #15
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	d90c      	bls.n	8012584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801256a:	4b65      	ldr	r3, [pc, #404]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	b2d2      	uxtb	r2, r2
 8012570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012572:	4b63      	ldr	r3, [pc, #396]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f003 030f 	and.w	r3, r3, #15
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	429a      	cmp	r2, r3
 801257e:	d001      	beq.n	8012584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012580:	2301      	movs	r3, #1
 8012582:	e0b8      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	f003 0302 	and.w	r3, r3, #2
 801258c:	2b00      	cmp	r3, #0
 801258e:	d020      	beq.n	80125d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f003 0304 	and.w	r3, r3, #4
 8012598:	2b00      	cmp	r3, #0
 801259a:	d005      	beq.n	80125a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801259c:	4b59      	ldr	r3, [pc, #356]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 801259e:	689b      	ldr	r3, [r3, #8]
 80125a0:	4a58      	ldr	r2, [pc, #352]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80125a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f003 0308 	and.w	r3, r3, #8
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d005      	beq.n	80125c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80125b4:	4b53      	ldr	r3, [pc, #332]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125b6:	689b      	ldr	r3, [r3, #8]
 80125b8:	4a52      	ldr	r2, [pc, #328]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80125be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125c0:	4b50      	ldr	r3, [pc, #320]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125c2:	689b      	ldr	r3, [r3, #8]
 80125c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	689b      	ldr	r3, [r3, #8]
 80125cc:	494d      	ldr	r1, [pc, #308]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125ce:	4313      	orrs	r3, r2
 80125d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f003 0301 	and.w	r3, r3, #1
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d044      	beq.n	8012668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d107      	bne.n	80125f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80125e6:	4b47      	ldr	r3, [pc, #284]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d119      	bne.n	8012626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80125f2:	2301      	movs	r3, #1
 80125f4:	e07f      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d003      	beq.n	8012606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012602:	2b03      	cmp	r3, #3
 8012604:	d107      	bne.n	8012616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012606:	4b3f      	ldr	r3, [pc, #252]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d109      	bne.n	8012626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012612:	2301      	movs	r3, #1
 8012614:	e06f      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012616:	4b3b      	ldr	r3, [pc, #236]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f003 0302 	and.w	r3, r3, #2
 801261e:	2b00      	cmp	r3, #0
 8012620:	d101      	bne.n	8012626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	e067      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012626:	4b37      	ldr	r3, [pc, #220]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 8012628:	689b      	ldr	r3, [r3, #8]
 801262a:	f023 0203 	bic.w	r2, r3, #3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	4934      	ldr	r1, [pc, #208]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 8012634:	4313      	orrs	r3, r2
 8012636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012638:	f7fe faf4 	bl	8010c24 <HAL_GetTick>
 801263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801263e:	e00a      	b.n	8012656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012640:	f7fe faf0 	bl	8010c24 <HAL_GetTick>
 8012644:	4602      	mov	r2, r0
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	f241 3288 	movw	r2, #5000	; 0x1388
 801264e:	4293      	cmp	r3, r2
 8012650:	d901      	bls.n	8012656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012652:	2303      	movs	r3, #3
 8012654:	e04f      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012656:	4b2b      	ldr	r3, [pc, #172]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 8012658:	689b      	ldr	r3, [r3, #8]
 801265a:	f003 020c 	and.w	r2, r3, #12
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	009b      	lsls	r3, r3, #2
 8012664:	429a      	cmp	r2, r3
 8012666:	d1eb      	bne.n	8012640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012668:	4b25      	ldr	r3, [pc, #148]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	f003 030f 	and.w	r3, r3, #15
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	429a      	cmp	r2, r3
 8012674:	d20c      	bcs.n	8012690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012676:	4b22      	ldr	r3, [pc, #136]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 8012678:	683a      	ldr	r2, [r7, #0]
 801267a:	b2d2      	uxtb	r2, r2
 801267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801267e:	4b20      	ldr	r3, [pc, #128]	; (8012700 <HAL_RCC_ClockConfig+0x1b8>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f003 030f 	and.w	r3, r3, #15
 8012686:	683a      	ldr	r2, [r7, #0]
 8012688:	429a      	cmp	r2, r3
 801268a:	d001      	beq.n	8012690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801268c:	2301      	movs	r3, #1
 801268e:	e032      	b.n	80126f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f003 0304 	and.w	r3, r3, #4
 8012698:	2b00      	cmp	r3, #0
 801269a:	d008      	beq.n	80126ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801269c:	4b19      	ldr	r3, [pc, #100]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	4916      	ldr	r1, [pc, #88]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80126aa:	4313      	orrs	r3, r2
 80126ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f003 0308 	and.w	r3, r3, #8
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d009      	beq.n	80126ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80126ba:	4b12      	ldr	r3, [pc, #72]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	00db      	lsls	r3, r3, #3
 80126c8:	490e      	ldr	r1, [pc, #56]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80126ca:	4313      	orrs	r3, r2
 80126cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80126ce:	f000 f821 	bl	8012714 <HAL_RCC_GetSysClockFreq>
 80126d2:	4601      	mov	r1, r0
 80126d4:	4b0b      	ldr	r3, [pc, #44]	; (8012704 <HAL_RCC_ClockConfig+0x1bc>)
 80126d6:	689b      	ldr	r3, [r3, #8]
 80126d8:	091b      	lsrs	r3, r3, #4
 80126da:	f003 030f 	and.w	r3, r3, #15
 80126de:	4a0a      	ldr	r2, [pc, #40]	; (8012708 <HAL_RCC_ClockConfig+0x1c0>)
 80126e0:	5cd3      	ldrb	r3, [r2, r3]
 80126e2:	fa21 f303 	lsr.w	r3, r1, r3
 80126e6:	4a09      	ldr	r2, [pc, #36]	; (801270c <HAL_RCC_ClockConfig+0x1c4>)
 80126e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80126ea:	4b09      	ldr	r3, [pc, #36]	; (8012710 <HAL_RCC_ClockConfig+0x1c8>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7fe fa54 	bl	8010b9c <HAL_InitTick>

  return HAL_OK;
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	40023c00 	.word	0x40023c00
 8012704:	40023800 	.word	0x40023800
 8012708:	08018224 	.word	0x08018224
 801270c:	20000000 	.word	0x20000000
 8012710:	20000004 	.word	0x20000004

08012714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801271a:	2300      	movs	r3, #0
 801271c:	607b      	str	r3, [r7, #4]
 801271e:	2300      	movs	r3, #0
 8012720:	60fb      	str	r3, [r7, #12]
 8012722:	2300      	movs	r3, #0
 8012724:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012726:	2300      	movs	r3, #0
 8012728:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801272a:	4b63      	ldr	r3, [pc, #396]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801272c:	689b      	ldr	r3, [r3, #8]
 801272e:	f003 030c 	and.w	r3, r3, #12
 8012732:	2b04      	cmp	r3, #4
 8012734:	d007      	beq.n	8012746 <HAL_RCC_GetSysClockFreq+0x32>
 8012736:	2b08      	cmp	r3, #8
 8012738:	d008      	beq.n	801274c <HAL_RCC_GetSysClockFreq+0x38>
 801273a:	2b00      	cmp	r3, #0
 801273c:	f040 80b4 	bne.w	80128a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012740:	4b5e      	ldr	r3, [pc, #376]	; (80128bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012742:	60bb      	str	r3, [r7, #8]
       break;
 8012744:	e0b3      	b.n	80128ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012746:	4b5e      	ldr	r3, [pc, #376]	; (80128c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8012748:	60bb      	str	r3, [r7, #8]
      break;
 801274a:	e0b0      	b.n	80128ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801274c:	4b5a      	ldr	r3, [pc, #360]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012754:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012756:	4b58      	ldr	r3, [pc, #352]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801275e:	2b00      	cmp	r3, #0
 8012760:	d04a      	beq.n	80127f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012762:	4b55      	ldr	r3, [pc, #340]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	099b      	lsrs	r3, r3, #6
 8012768:	f04f 0400 	mov.w	r4, #0
 801276c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012770:	f04f 0200 	mov.w	r2, #0
 8012774:	ea03 0501 	and.w	r5, r3, r1
 8012778:	ea04 0602 	and.w	r6, r4, r2
 801277c:	4629      	mov	r1, r5
 801277e:	4632      	mov	r2, r6
 8012780:	f04f 0300 	mov.w	r3, #0
 8012784:	f04f 0400 	mov.w	r4, #0
 8012788:	0154      	lsls	r4, r2, #5
 801278a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801278e:	014b      	lsls	r3, r1, #5
 8012790:	4619      	mov	r1, r3
 8012792:	4622      	mov	r2, r4
 8012794:	1b49      	subs	r1, r1, r5
 8012796:	eb62 0206 	sbc.w	r2, r2, r6
 801279a:	f04f 0300 	mov.w	r3, #0
 801279e:	f04f 0400 	mov.w	r4, #0
 80127a2:	0194      	lsls	r4, r2, #6
 80127a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80127a8:	018b      	lsls	r3, r1, #6
 80127aa:	1a5b      	subs	r3, r3, r1
 80127ac:	eb64 0402 	sbc.w	r4, r4, r2
 80127b0:	f04f 0100 	mov.w	r1, #0
 80127b4:	f04f 0200 	mov.w	r2, #0
 80127b8:	00e2      	lsls	r2, r4, #3
 80127ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80127be:	00d9      	lsls	r1, r3, #3
 80127c0:	460b      	mov	r3, r1
 80127c2:	4614      	mov	r4, r2
 80127c4:	195b      	adds	r3, r3, r5
 80127c6:	eb44 0406 	adc.w	r4, r4, r6
 80127ca:	f04f 0100 	mov.w	r1, #0
 80127ce:	f04f 0200 	mov.w	r2, #0
 80127d2:	0262      	lsls	r2, r4, #9
 80127d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80127d8:	0259      	lsls	r1, r3, #9
 80127da:	460b      	mov	r3, r1
 80127dc:	4614      	mov	r4, r2
 80127de:	4618      	mov	r0, r3
 80127e0:	4621      	mov	r1, r4
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f04f 0400 	mov.w	r4, #0
 80127e8:	461a      	mov	r2, r3
 80127ea:	4623      	mov	r3, r4
 80127ec:	f7fd fd0a 	bl	8010204 <__aeabi_uldivmod>
 80127f0:	4603      	mov	r3, r0
 80127f2:	460c      	mov	r4, r1
 80127f4:	60fb      	str	r3, [r7, #12]
 80127f6:	e049      	b.n	801288c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80127f8:	4b2f      	ldr	r3, [pc, #188]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	099b      	lsrs	r3, r3, #6
 80127fe:	f04f 0400 	mov.w	r4, #0
 8012802:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012806:	f04f 0200 	mov.w	r2, #0
 801280a:	ea03 0501 	and.w	r5, r3, r1
 801280e:	ea04 0602 	and.w	r6, r4, r2
 8012812:	4629      	mov	r1, r5
 8012814:	4632      	mov	r2, r6
 8012816:	f04f 0300 	mov.w	r3, #0
 801281a:	f04f 0400 	mov.w	r4, #0
 801281e:	0154      	lsls	r4, r2, #5
 8012820:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012824:	014b      	lsls	r3, r1, #5
 8012826:	4619      	mov	r1, r3
 8012828:	4622      	mov	r2, r4
 801282a:	1b49      	subs	r1, r1, r5
 801282c:	eb62 0206 	sbc.w	r2, r2, r6
 8012830:	f04f 0300 	mov.w	r3, #0
 8012834:	f04f 0400 	mov.w	r4, #0
 8012838:	0194      	lsls	r4, r2, #6
 801283a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801283e:	018b      	lsls	r3, r1, #6
 8012840:	1a5b      	subs	r3, r3, r1
 8012842:	eb64 0402 	sbc.w	r4, r4, r2
 8012846:	f04f 0100 	mov.w	r1, #0
 801284a:	f04f 0200 	mov.w	r2, #0
 801284e:	00e2      	lsls	r2, r4, #3
 8012850:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012854:	00d9      	lsls	r1, r3, #3
 8012856:	460b      	mov	r3, r1
 8012858:	4614      	mov	r4, r2
 801285a:	195b      	adds	r3, r3, r5
 801285c:	eb44 0406 	adc.w	r4, r4, r6
 8012860:	f04f 0100 	mov.w	r1, #0
 8012864:	f04f 0200 	mov.w	r2, #0
 8012868:	02a2      	lsls	r2, r4, #10
 801286a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801286e:	0299      	lsls	r1, r3, #10
 8012870:	460b      	mov	r3, r1
 8012872:	4614      	mov	r4, r2
 8012874:	4618      	mov	r0, r3
 8012876:	4621      	mov	r1, r4
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f04f 0400 	mov.w	r4, #0
 801287e:	461a      	mov	r2, r3
 8012880:	4623      	mov	r3, r4
 8012882:	f7fd fcbf 	bl	8010204 <__aeabi_uldivmod>
 8012886:	4603      	mov	r3, r0
 8012888:	460c      	mov	r4, r1
 801288a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801288c:	4b0a      	ldr	r3, [pc, #40]	; (80128b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	0c1b      	lsrs	r3, r3, #16
 8012892:	f003 0303 	and.w	r3, r3, #3
 8012896:	3301      	adds	r3, #1
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80128a4:	60bb      	str	r3, [r7, #8]
      break;
 80128a6:	e002      	b.n	80128ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80128a8:	4b04      	ldr	r3, [pc, #16]	; (80128bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80128aa:	60bb      	str	r3, [r7, #8]
      break;
 80128ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80128ae:	68bb      	ldr	r3, [r7, #8]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3714      	adds	r7, #20
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b8:	40023800 	.word	0x40023800
 80128bc:	00f42400 	.word	0x00f42400
 80128c0:	007a1200 	.word	0x007a1200

080128c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80128c4:	b480      	push	{r7}
 80128c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80128c8:	4b03      	ldr	r3, [pc, #12]	; (80128d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80128ca:	681b      	ldr	r3, [r3, #0]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	20000000 	.word	0x20000000

080128dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80128e0:	f7ff fff0 	bl	80128c4 <HAL_RCC_GetHCLKFreq>
 80128e4:	4601      	mov	r1, r0
 80128e6:	4b05      	ldr	r3, [pc, #20]	; (80128fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80128e8:	689b      	ldr	r3, [r3, #8]
 80128ea:	0a9b      	lsrs	r3, r3, #10
 80128ec:	f003 0307 	and.w	r3, r3, #7
 80128f0:	4a03      	ldr	r2, [pc, #12]	; (8012900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80128f2:	5cd3      	ldrb	r3, [r2, r3]
 80128f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	40023800 	.word	0x40023800
 8012900:	08018234 	.word	0x08018234

08012904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012908:	f7ff ffdc 	bl	80128c4 <HAL_RCC_GetHCLKFreq>
 801290c:	4601      	mov	r1, r0
 801290e:	4b05      	ldr	r3, [pc, #20]	; (8012924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012910:	689b      	ldr	r3, [r3, #8]
 8012912:	0b5b      	lsrs	r3, r3, #13
 8012914:	f003 0307 	and.w	r3, r3, #7
 8012918:	4a03      	ldr	r2, [pc, #12]	; (8012928 <HAL_RCC_GetPCLK2Freq+0x24>)
 801291a:	5cd3      	ldrb	r3, [r2, r3]
 801291c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012920:	4618      	mov	r0, r3
 8012922:	bd80      	pop	{r7, pc}
 8012924:	40023800 	.word	0x40023800
 8012928:	08018234 	.word	0x08018234

0801292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012934:	2300      	movs	r3, #0
 8012936:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 801293c:	2300      	movs	r3, #0
 801293e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	f003 0301 	and.w	r3, r3, #1
 8012948:	2b00      	cmp	r3, #0
 801294a:	d010      	beq.n	801296e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801294c:	4b87      	ldr	r3, [pc, #540]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 801294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012952:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	4984      	ldr	r1, [pc, #528]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 801295c:	4313      	orrs	r3, r2
 801295e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	695b      	ldr	r3, [r3, #20]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 801296a:	2301      	movs	r3, #1
 801296c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f003 0302 	and.w	r3, r3, #2
 8012976:	2b00      	cmp	r3, #0
 8012978:	d010      	beq.n	801299c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801297a:	4b7c      	ldr	r3, [pc, #496]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 801297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012980:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	699b      	ldr	r3, [r3, #24]
 8012988:	4978      	ldr	r1, [pc, #480]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 801298a:	4313      	orrs	r3, r2
 801298c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	699b      	ldr	r3, [r3, #24]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d101      	bne.n	801299c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8012998:	2301      	movs	r3, #1
 801299a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f003 0308 	and.w	r3, r3, #8
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	f000 8083 	beq.w	8012ab0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80129aa:	2300      	movs	r3, #0
 80129ac:	60bb      	str	r3, [r7, #8]
 80129ae:	4b6f      	ldr	r3, [pc, #444]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80129b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129b2:	4a6e      	ldr	r2, [pc, #440]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80129b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129b8:	6413      	str	r3, [r2, #64]	; 0x40
 80129ba:	4b6c      	ldr	r3, [pc, #432]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80129bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129c2:	60bb      	str	r3, [r7, #8]
 80129c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80129c6:	4b6a      	ldr	r3, [pc, #424]	; (8012b70 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4a69      	ldr	r2, [pc, #420]	; (8012b70 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80129cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80129d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80129d2:	f7fe f927 	bl	8010c24 <HAL_GetTick>
 80129d6:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80129d8:	e008      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80129da:	f7fe f923 	bl	8010c24 <HAL_GetTick>
 80129de:	4602      	mov	r2, r0
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	1ad3      	subs	r3, r2, r3
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	d901      	bls.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80129e8:	2303      	movs	r3, #3
 80129ea:	e162      	b.n	8012cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80129ec:	4b60      	ldr	r3, [pc, #384]	; (8012b70 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d0f0      	beq.n	80129da <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80129f8:	4b5c      	ldr	r3, [pc, #368]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80129fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a00:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d02f      	beq.n	8012a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	69db      	ldr	r3, [r3, #28]
 8012a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a10:	68fa      	ldr	r2, [r7, #12]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d028      	beq.n	8012a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012a16:	4b55      	ldr	r3, [pc, #340]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a1e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012a20:	4b54      	ldr	r3, [pc, #336]	; (8012b74 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8012a22:	2201      	movs	r2, #1
 8012a24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012a26:	4b53      	ldr	r3, [pc, #332]	; (8012b74 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012a2c:	4a4f      	ldr	r2, [pc, #316]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012a32:	4b4e      	ldr	r3, [pc, #312]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d114      	bne.n	8012a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012a3e:	f7fe f8f1 	bl	8010c24 <HAL_GetTick>
 8012a42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a44:	e00a      	b.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012a46:	f7fe f8ed 	bl	8010c24 <HAL_GetTick>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d901      	bls.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8012a58:	2303      	movs	r3, #3
 8012a5a:	e12a      	b.n	8012cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a5c:	4b43      	ldr	r3, [pc, #268]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a60:	f003 0302 	and.w	r3, r3, #2
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d0ee      	beq.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	69db      	ldr	r3, [r3, #28]
 8012a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a74:	d10d      	bne.n	8012a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8012a76:	4b3d      	ldr	r3, [pc, #244]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	69db      	ldr	r3, [r3, #28]
 8012a82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a8a:	4938      	ldr	r1, [pc, #224]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	608b      	str	r3, [r1, #8]
 8012a90:	e005      	b.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8012a92:	4b36      	ldr	r3, [pc, #216]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	4a35      	ldr	r2, [pc, #212]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012a98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012a9c:	6093      	str	r3, [r2, #8]
 8012a9e:	4b33      	ldr	r3, [pc, #204]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	69db      	ldr	r3, [r3, #28]
 8012aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012aaa:	4930      	ldr	r1, [pc, #192]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012aac:	4313      	orrs	r3, r2
 8012aae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f003 0304 	and.w	r3, r3, #4
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d004      	beq.n	8012ac6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8012ac2:	4b2d      	ldr	r3, [pc, #180]	; (8012b78 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8012ac4:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f003 0310 	and.w	r3, r3, #16
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00a      	beq.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8012ad2:	4b26      	ldr	r3, [pc, #152]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae0:	4922      	ldr	r1, [pc, #136]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012ae2:	4313      	orrs	r3, r2
 8012ae4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f003 0320 	and.w	r3, r3, #32
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d011      	beq.n	8012b18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8012af4:	4b1d      	ldr	r3, [pc, #116]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012afa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b02:	491a      	ldr	r1, [pc, #104]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012b04:	4313      	orrs	r3, r2
 8012b06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012b12:	d101      	bne.n	8012b18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8012b14:	2301      	movs	r3, #1
 8012b16:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d00a      	beq.n	8012b3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8012b24:	4b11      	ldr	r3, [pc, #68]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012b2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6a1b      	ldr	r3, [r3, #32]
 8012b32:	490e      	ldr	r1, [pc, #56]	; (8012b6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8012b34:	4313      	orrs	r3, r2
 8012b36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d004      	beq.n	8012b4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b80      	cmp	r3, #128	; 0x80
 8012b46:	f040 8091 	bne.w	8012c6c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012b4a:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012b50:	f7fe f868 	bl	8010c24 <HAL_GetTick>
 8012b54:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012b56:	e013      	b.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012b58:	f7fe f864 	bl	8010c24 <HAL_GetTick>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	2b02      	cmp	r3, #2
 8012b64:	d90c      	bls.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012b66:	2303      	movs	r3, #3
 8012b68:	e0a3      	b.n	8012cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8012b6a:	bf00      	nop
 8012b6c:	40023800 	.word	0x40023800
 8012b70:	40007000 	.word	0x40007000
 8012b74:	42470e40 	.word	0x42470e40
 8012b78:	424711e0 	.word	0x424711e0
 8012b7c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012b80:	4b4e      	ldr	r3, [pc, #312]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1e5      	bne.n	8012b58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8012b8c:	4a4c      	ldr	r2, [pc, #304]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b92:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d003      	beq.n	8012ba8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	695b      	ldr	r3, [r3, #20]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d023      	beq.n	8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d003      	beq.n	8012bbc <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	699b      	ldr	r3, [r3, #24]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d019      	beq.n	8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d004      	beq.n	8012bd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012bd0:	d00e      	beq.n	8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d019      	beq.n	8012c12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6a1b      	ldr	r3, [r3, #32]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d115      	bne.n	8012c12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012bee:	d110      	bne.n	8012c12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	685a      	ldr	r2, [r3, #4]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	019b      	lsls	r3, r3, #6
 8012bfa:	431a      	orrs	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	061b      	lsls	r3, r3, #24
 8012c02:	431a      	orrs	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	691b      	ldr	r3, [r3, #16]
 8012c08:	071b      	lsls	r3, r3, #28
 8012c0a:	492c      	ldr	r1, [pc, #176]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c0c:	4313      	orrs	r3, r2
 8012c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d010      	beq.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	685a      	ldr	r2, [r3, #4]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	689b      	ldr	r3, [r3, #8]
 8012c26:	019b      	lsls	r3, r3, #6
 8012c28:	431a      	orrs	r2, r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	68db      	ldr	r3, [r3, #12]
 8012c2e:	061b      	lsls	r3, r3, #24
 8012c30:	431a      	orrs	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	691b      	ldr	r3, [r3, #16]
 8012c36:	071b      	lsls	r3, r3, #28
 8012c38:	4920      	ldr	r1, [pc, #128]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012c40:	4b20      	ldr	r3, [pc, #128]	; (8012cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8012c42:	2201      	movs	r2, #1
 8012c44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012c46:	f7fd ffed 	bl	8010c24 <HAL_GetTick>
 8012c4a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012c4c:	e008      	b.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012c4e:	f7fd ffe9 	bl	8010c24 <HAL_GetTick>
 8012c52:	4602      	mov	r2, r0
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	1ad3      	subs	r3, r2, r3
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d901      	bls.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012c5c:	2303      	movs	r3, #3
 8012c5e:	e028      	b.n	8012cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012c60:	4b16      	ldr	r3, [pc, #88]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d0f0      	beq.n	8012c4e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012c78:	4b10      	ldr	r3, [pc, #64]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c86:	490d      	ldr	r1, [pc, #52]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c88:	4313      	orrs	r3, r2
 8012c8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d00a      	beq.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8012c9a:	4b08      	ldr	r3, [pc, #32]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ca0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca8:	4904      	ldr	r1, [pc, #16]	; (8012cbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8012caa:	4313      	orrs	r3, r2
 8012cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3718      	adds	r7, #24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	40023800 	.word	0x40023800
 8012cc0:	424710d8 	.word	0x424710d8
 8012cc4:	42470068 	.word	0x42470068

08012cc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b086      	sub	sp, #24
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f003 0301 	and.w	r3, r3, #1
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d075      	beq.n	8012dcc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8012ce0:	4ba2      	ldr	r3, [pc, #648]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	f003 030c 	and.w	r3, r3, #12
 8012ce8:	2b04      	cmp	r3, #4
 8012cea:	d00c      	beq.n	8012d06 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012cec:	4b9f      	ldr	r3, [pc, #636]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8012cf4:	2b08      	cmp	r3, #8
 8012cf6:	d112      	bne.n	8012d1e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012cf8:	4b9c      	ldr	r3, [pc, #624]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012d04:	d10b      	bne.n	8012d1e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d06:	4b99      	ldr	r3, [pc, #612]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d05b      	beq.n	8012dca <HAL_RCC_OscConfig+0x102>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d157      	bne.n	8012dca <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e20b      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d26:	d106      	bne.n	8012d36 <HAL_RCC_OscConfig+0x6e>
 8012d28:	4b90      	ldr	r3, [pc, #576]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	4a8f      	ldr	r2, [pc, #572]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d32:	6013      	str	r3, [r2, #0]
 8012d34:	e01d      	b.n	8012d72 <HAL_RCC_OscConfig+0xaa>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012d3e:	d10c      	bne.n	8012d5a <HAL_RCC_OscConfig+0x92>
 8012d40:	4b8a      	ldr	r3, [pc, #552]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a89      	ldr	r2, [pc, #548]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012d4a:	6013      	str	r3, [r2, #0]
 8012d4c:	4b87      	ldr	r3, [pc, #540]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4a86      	ldr	r2, [pc, #536]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	e00b      	b.n	8012d72 <HAL_RCC_OscConfig+0xaa>
 8012d5a:	4b84      	ldr	r3, [pc, #528]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a83      	ldr	r2, [pc, #524]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d64:	6013      	str	r3, [r2, #0]
 8012d66:	4b81      	ldr	r3, [pc, #516]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4a80      	ldr	r2, [pc, #512]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012d70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d013      	beq.n	8012da2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d7a:	f7fd ff53 	bl	8010c24 <HAL_GetTick>
 8012d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d80:	e008      	b.n	8012d94 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012d82:	f7fd ff4f 	bl	8010c24 <HAL_GetTick>
 8012d86:	4602      	mov	r2, r0
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	2b64      	cmp	r3, #100	; 0x64
 8012d8e:	d901      	bls.n	8012d94 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8012d90:	2303      	movs	r3, #3
 8012d92:	e1d0      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d94:	4b75      	ldr	r3, [pc, #468]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d0f0      	beq.n	8012d82 <HAL_RCC_OscConfig+0xba>
 8012da0:	e014      	b.n	8012dcc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012da2:	f7fd ff3f 	bl	8010c24 <HAL_GetTick>
 8012da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012da8:	e008      	b.n	8012dbc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012daa:	f7fd ff3b 	bl	8010c24 <HAL_GetTick>
 8012dae:	4602      	mov	r2, r0
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	1ad3      	subs	r3, r2, r3
 8012db4:	2b64      	cmp	r3, #100	; 0x64
 8012db6:	d901      	bls.n	8012dbc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8012db8:	2303      	movs	r3, #3
 8012dba:	e1bc      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012dbc:	4b6b      	ldr	r3, [pc, #428]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d1f0      	bne.n	8012daa <HAL_RCC_OscConfig+0xe2>
 8012dc8:	e000      	b.n	8012dcc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012dca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f003 0302 	and.w	r3, r3, #2
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d063      	beq.n	8012ea0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8012dd8:	4b64      	ldr	r3, [pc, #400]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	f003 030c 	and.w	r3, r3, #12
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00b      	beq.n	8012dfc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012de4:	4b61      	ldr	r3, [pc, #388]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012de6:	689b      	ldr	r3, [r3, #8]
 8012de8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8012dec:	2b08      	cmp	r3, #8
 8012dee:	d11c      	bne.n	8012e2a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012df0:	4b5e      	ldr	r3, [pc, #376]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d116      	bne.n	8012e2a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012dfc:	4b5b      	ldr	r3, [pc, #364]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f003 0302 	and.w	r3, r3, #2
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d005      	beq.n	8012e14 <HAL_RCC_OscConfig+0x14c>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d001      	beq.n	8012e14 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e190      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e14:	4b55      	ldr	r3, [pc, #340]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	4952      	ldr	r1, [pc, #328]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e24:	4313      	orrs	r3, r2
 8012e26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012e28:	e03a      	b.n	8012ea0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d020      	beq.n	8012e74 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012e32:	4b4f      	ldr	r3, [pc, #316]	; (8012f70 <HAL_RCC_OscConfig+0x2a8>)
 8012e34:	2201      	movs	r2, #1
 8012e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e38:	f7fd fef4 	bl	8010c24 <HAL_GetTick>
 8012e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e3e:	e008      	b.n	8012e52 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012e40:	f7fd fef0 	bl	8010c24 <HAL_GetTick>
 8012e44:	4602      	mov	r2, r0
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	1ad3      	subs	r3, r2, r3
 8012e4a:	2b02      	cmp	r3, #2
 8012e4c:	d901      	bls.n	8012e52 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8012e4e:	2303      	movs	r3, #3
 8012e50:	e171      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e52:	4b46      	ldr	r3, [pc, #280]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f003 0302 	and.w	r3, r3, #2
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d0f0      	beq.n	8012e40 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e5e:	4b43      	ldr	r3, [pc, #268]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	691b      	ldr	r3, [r3, #16]
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	493f      	ldr	r1, [pc, #252]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	600b      	str	r3, [r1, #0]
 8012e72:	e015      	b.n	8012ea0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012e74:	4b3e      	ldr	r3, [pc, #248]	; (8012f70 <HAL_RCC_OscConfig+0x2a8>)
 8012e76:	2200      	movs	r2, #0
 8012e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e7a:	f7fd fed3 	bl	8010c24 <HAL_GetTick>
 8012e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e80:	e008      	b.n	8012e94 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012e82:	f7fd fecf 	bl	8010c24 <HAL_GetTick>
 8012e86:	4602      	mov	r2, r0
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	2b02      	cmp	r3, #2
 8012e8e:	d901      	bls.n	8012e94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8012e90:	2303      	movs	r3, #3
 8012e92:	e150      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012e94:	4b35      	ldr	r3, [pc, #212]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	f003 0302 	and.w	r3, r3, #2
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1f0      	bne.n	8012e82 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f003 0308 	and.w	r3, r3, #8
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d030      	beq.n	8012f0e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	695b      	ldr	r3, [r3, #20]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d016      	beq.n	8012ee2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012eb4:	4b2f      	ldr	r3, [pc, #188]	; (8012f74 <HAL_RCC_OscConfig+0x2ac>)
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012eba:	f7fd feb3 	bl	8010c24 <HAL_GetTick>
 8012ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012ec0:	e008      	b.n	8012ed4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012ec2:	f7fd feaf 	bl	8010c24 <HAL_GetTick>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	1ad3      	subs	r3, r2, r3
 8012ecc:	2b02      	cmp	r3, #2
 8012ece:	d901      	bls.n	8012ed4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	e130      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012ed4:	4b25      	ldr	r3, [pc, #148]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ed8:	f003 0302 	and.w	r3, r3, #2
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d0f0      	beq.n	8012ec2 <HAL_RCC_OscConfig+0x1fa>
 8012ee0:	e015      	b.n	8012f0e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012ee2:	4b24      	ldr	r3, [pc, #144]	; (8012f74 <HAL_RCC_OscConfig+0x2ac>)
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ee8:	f7fd fe9c 	bl	8010c24 <HAL_GetTick>
 8012eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012eee:	e008      	b.n	8012f02 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012ef0:	f7fd fe98 	bl	8010c24 <HAL_GetTick>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	2b02      	cmp	r3, #2
 8012efc:	d901      	bls.n	8012f02 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8012efe:	2303      	movs	r3, #3
 8012f00:	e119      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012f02:	4b1a      	ldr	r3, [pc, #104]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f06:	f003 0302 	and.w	r3, r3, #2
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1f0      	bne.n	8012ef0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f003 0304 	and.w	r3, r3, #4
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f000 809f 	beq.w	801305a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012f20:	4b12      	ldr	r3, [pc, #72]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10f      	bne.n	8012f4c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	60fb      	str	r3, [r7, #12]
 8012f30:	4b0e      	ldr	r3, [pc, #56]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f34:	4a0d      	ldr	r2, [pc, #52]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8012f3c:	4b0b      	ldr	r3, [pc, #44]	; (8012f6c <HAL_RCC_OscConfig+0x2a4>)
 8012f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f44:	60fb      	str	r3, [r7, #12]
 8012f46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f4c:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <HAL_RCC_OscConfig+0x2b0>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d120      	bne.n	8012f9a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012f58:	4b07      	ldr	r3, [pc, #28]	; (8012f78 <HAL_RCC_OscConfig+0x2b0>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	4a06      	ldr	r2, [pc, #24]	; (8012f78 <HAL_RCC_OscConfig+0x2b0>)
 8012f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012f64:	f7fd fe5e 	bl	8010c24 <HAL_GetTick>
 8012f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f6a:	e010      	b.n	8012f8e <HAL_RCC_OscConfig+0x2c6>
 8012f6c:	40023800 	.word	0x40023800
 8012f70:	42470000 	.word	0x42470000
 8012f74:	42470e80 	.word	0x42470e80
 8012f78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f7c:	f7fd fe52 	bl	8010c24 <HAL_GetTick>
 8012f80:	4602      	mov	r2, r0
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d901      	bls.n	8012f8e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8012f8a:	2303      	movs	r3, #3
 8012f8c:	e0d3      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f8e:	4b6c      	ldr	r3, [pc, #432]	; (8013140 <HAL_RCC_OscConfig+0x478>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d0f0      	beq.n	8012f7c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d106      	bne.n	8012fb0 <HAL_RCC_OscConfig+0x2e8>
 8012fa2:	4b68      	ldr	r3, [pc, #416]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa6:	4a67      	ldr	r2, [pc, #412]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fa8:	f043 0301 	orr.w	r3, r3, #1
 8012fac:	6713      	str	r3, [r2, #112]	; 0x70
 8012fae:	e01c      	b.n	8012fea <HAL_RCC_OscConfig+0x322>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	689b      	ldr	r3, [r3, #8]
 8012fb4:	2b05      	cmp	r3, #5
 8012fb6:	d10c      	bne.n	8012fd2 <HAL_RCC_OscConfig+0x30a>
 8012fb8:	4b62      	ldr	r3, [pc, #392]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fbc:	4a61      	ldr	r2, [pc, #388]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fbe:	f043 0304 	orr.w	r3, r3, #4
 8012fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8012fc4:	4b5f      	ldr	r3, [pc, #380]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fc8:	4a5e      	ldr	r2, [pc, #376]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fca:	f043 0301 	orr.w	r3, r3, #1
 8012fce:	6713      	str	r3, [r2, #112]	; 0x70
 8012fd0:	e00b      	b.n	8012fea <HAL_RCC_OscConfig+0x322>
 8012fd2:	4b5c      	ldr	r3, [pc, #368]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fd6:	4a5b      	ldr	r2, [pc, #364]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fd8:	f023 0301 	bic.w	r3, r3, #1
 8012fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8012fde:	4b59      	ldr	r3, [pc, #356]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fe2:	4a58      	ldr	r2, [pc, #352]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8012fe4:	f023 0304 	bic.w	r3, r3, #4
 8012fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d015      	beq.n	801301e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ff2:	f7fd fe17 	bl	8010c24 <HAL_GetTick>
 8012ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ff8:	e00a      	b.n	8013010 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012ffa:	f7fd fe13 	bl	8010c24 <HAL_GetTick>
 8012ffe:	4602      	mov	r2, r0
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	f241 3288 	movw	r2, #5000	; 0x1388
 8013008:	4293      	cmp	r3, r2
 801300a:	d901      	bls.n	8013010 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 801300c:	2303      	movs	r3, #3
 801300e:	e092      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013010:	4b4c      	ldr	r3, [pc, #304]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013014:	f003 0302 	and.w	r3, r3, #2
 8013018:	2b00      	cmp	r3, #0
 801301a:	d0ee      	beq.n	8012ffa <HAL_RCC_OscConfig+0x332>
 801301c:	e014      	b.n	8013048 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801301e:	f7fd fe01 	bl	8010c24 <HAL_GetTick>
 8013022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013024:	e00a      	b.n	801303c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013026:	f7fd fdfd 	bl	8010c24 <HAL_GetTick>
 801302a:	4602      	mov	r2, r0
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	1ad3      	subs	r3, r2, r3
 8013030:	f241 3288 	movw	r2, #5000	; 0x1388
 8013034:	4293      	cmp	r3, r2
 8013036:	d901      	bls.n	801303c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8013038:	2303      	movs	r3, #3
 801303a:	e07c      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801303c:	4b41      	ldr	r3, [pc, #260]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 801303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013040:	f003 0302 	and.w	r3, r3, #2
 8013044:	2b00      	cmp	r3, #0
 8013046:	d1ee      	bne.n	8013026 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013048:	7dfb      	ldrb	r3, [r7, #23]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d105      	bne.n	801305a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801304e:	4b3d      	ldr	r3, [pc, #244]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013052:	4a3c      	ldr	r2, [pc, #240]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	699b      	ldr	r3, [r3, #24]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d068      	beq.n	8013134 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013062:	4b38      	ldr	r3, [pc, #224]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	f003 030c 	and.w	r3, r3, #12
 801306a:	2b08      	cmp	r3, #8
 801306c:	d060      	beq.n	8013130 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	2b02      	cmp	r3, #2
 8013074:	d145      	bne.n	8013102 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013076:	4b34      	ldr	r3, [pc, #208]	; (8013148 <HAL_RCC_OscConfig+0x480>)
 8013078:	2200      	movs	r2, #0
 801307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801307c:	f7fd fdd2 	bl	8010c24 <HAL_GetTick>
 8013080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013082:	e008      	b.n	8013096 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013084:	f7fd fdce 	bl	8010c24 <HAL_GetTick>
 8013088:	4602      	mov	r2, r0
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	2b02      	cmp	r3, #2
 8013090:	d901      	bls.n	8013096 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8013092:	2303      	movs	r3, #3
 8013094:	e04f      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013096:	4b2b      	ldr	r3, [pc, #172]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1f0      	bne.n	8013084 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	69da      	ldr	r2, [r3, #28]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a1b      	ldr	r3, [r3, #32]
 80130aa:	431a      	orrs	r2, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b0:	019b      	lsls	r3, r3, #6
 80130b2:	431a      	orrs	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b8:	085b      	lsrs	r3, r3, #1
 80130ba:	3b01      	subs	r3, #1
 80130bc:	041b      	lsls	r3, r3, #16
 80130be:	431a      	orrs	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c4:	061b      	lsls	r3, r3, #24
 80130c6:	431a      	orrs	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130cc:	071b      	lsls	r3, r3, #28
 80130ce:	491d      	ldr	r1, [pc, #116]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 80130d0:	4313      	orrs	r3, r2
 80130d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80130d4:	4b1c      	ldr	r3, [pc, #112]	; (8013148 <HAL_RCC_OscConfig+0x480>)
 80130d6:	2201      	movs	r2, #1
 80130d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130da:	f7fd fda3 	bl	8010c24 <HAL_GetTick>
 80130de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130e0:	e008      	b.n	80130f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80130e2:	f7fd fd9f 	bl	8010c24 <HAL_GetTick>
 80130e6:	4602      	mov	r2, r0
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d901      	bls.n	80130f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80130f0:	2303      	movs	r3, #3
 80130f2:	e020      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130f4:	4b13      	ldr	r3, [pc, #76]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d0f0      	beq.n	80130e2 <HAL_RCC_OscConfig+0x41a>
 8013100:	e018      	b.n	8013134 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013102:	4b11      	ldr	r3, [pc, #68]	; (8013148 <HAL_RCC_OscConfig+0x480>)
 8013104:	2200      	movs	r2, #0
 8013106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013108:	f7fd fd8c 	bl	8010c24 <HAL_GetTick>
 801310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801310e:	e008      	b.n	8013122 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013110:	f7fd fd88 	bl	8010c24 <HAL_GetTick>
 8013114:	4602      	mov	r2, r0
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	1ad3      	subs	r3, r2, r3
 801311a:	2b02      	cmp	r3, #2
 801311c:	d901      	bls.n	8013122 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 801311e:	2303      	movs	r3, #3
 8013120:	e009      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013122:	4b08      	ldr	r3, [pc, #32]	; (8013144 <HAL_RCC_OscConfig+0x47c>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1f0      	bne.n	8013110 <HAL_RCC_OscConfig+0x448>
 801312e:	e001      	b.n	8013134 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8013130:	2301      	movs	r3, #1
 8013132:	e000      	b.n	8013136 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8013134:	2300      	movs	r3, #0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3718      	adds	r7, #24
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	40007000 	.word	0x40007000
 8013144:	40023800 	.word	0x40023800
 8013148:	42470060 	.word	0x42470060

0801314c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d101      	bne.n	801315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e03f      	b.n	80131de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013164:	b2db      	uxtb	r3, r3
 8013166:	2b00      	cmp	r3, #0
 8013168:	d106      	bne.n	8013178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7fd fc7e 	bl	8010a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2224      	movs	r2, #36	; 0x24
 801317c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	68da      	ldr	r2, [r3, #12]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801318e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 f90b 	bl	80133ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	691a      	ldr	r2, [r3, #16]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80131a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	695a      	ldr	r2, [r3, #20]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80131b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	68da      	ldr	r2, [r3, #12]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80131c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2200      	movs	r2, #0
 80131ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2220      	movs	r2, #32
 80131d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2220      	movs	r2, #32
 80131d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3708      	adds	r7, #8
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b088      	sub	sp, #32
 80131ea:	af02      	add	r7, sp, #8
 80131ec:	60f8      	str	r0, [r7, #12]
 80131ee:	60b9      	str	r1, [r7, #8]
 80131f0:	603b      	str	r3, [r7, #0]
 80131f2:	4613      	mov	r3, r2
 80131f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80131f6:	2300      	movs	r3, #0
 80131f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013200:	b2db      	uxtb	r3, r3
 8013202:	2b20      	cmp	r3, #32
 8013204:	f040 8083 	bne.w	801330e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <HAL_UART_Transmit+0x2e>
 801320e:	88fb      	ldrh	r3, [r7, #6]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d101      	bne.n	8013218 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8013214:	2301      	movs	r3, #1
 8013216:	e07b      	b.n	8013310 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801321e:	2b01      	cmp	r3, #1
 8013220:	d101      	bne.n	8013226 <HAL_UART_Transmit+0x40>
 8013222:	2302      	movs	r3, #2
 8013224:	e074      	b.n	8013310 <HAL_UART_Transmit+0x12a>
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2201      	movs	r2, #1
 801322a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2200      	movs	r2, #0
 8013232:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2221      	movs	r2, #33	; 0x21
 8013238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801323c:	f7fd fcf2 	bl	8010c24 <HAL_GetTick>
 8013240:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	88fa      	ldrh	r2, [r7, #6]
 8013246:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	88fa      	ldrh	r2, [r7, #6]
 801324c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2200      	movs	r2, #0
 8013252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8013256:	e042      	b.n	80132de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801325c:	b29b      	uxth	r3, r3
 801325e:	3b01      	subs	r3, #1
 8013260:	b29a      	uxth	r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	689b      	ldr	r3, [r3, #8]
 801326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801326e:	d122      	bne.n	80132b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	9300      	str	r3, [sp, #0]
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	2200      	movs	r2, #0
 8013278:	2180      	movs	r1, #128	; 0x80
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f000 f84c 	bl	8013318 <UART_WaitOnFlagUntilTimeout>
 8013280:	4603      	mov	r3, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8013286:	2303      	movs	r3, #3
 8013288:	e042      	b.n	8013310 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	881b      	ldrh	r3, [r3, #0]
 8013292:	461a      	mov	r2, r3
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801329c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	691b      	ldr	r3, [r3, #16]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d103      	bne.n	80132ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	3302      	adds	r3, #2
 80132aa:	60bb      	str	r3, [r7, #8]
 80132ac:	e017      	b.n	80132de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	3301      	adds	r3, #1
 80132b2:	60bb      	str	r3, [r7, #8]
 80132b4:	e013      	b.n	80132de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	2200      	movs	r2, #0
 80132be:	2180      	movs	r1, #128	; 0x80
 80132c0:	68f8      	ldr	r0, [r7, #12]
 80132c2:	f000 f829 	bl	8013318 <UART_WaitOnFlagUntilTimeout>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80132cc:	2303      	movs	r3, #3
 80132ce:	e01f      	b.n	8013310 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	1c5a      	adds	r2, r3, #1
 80132d4:	60ba      	str	r2, [r7, #8]
 80132d6:	781a      	ldrb	r2, [r3, #0]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1b7      	bne.n	8013258 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	2200      	movs	r2, #0
 80132f0:	2140      	movs	r1, #64	; 0x40
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f000 f810 	bl	8013318 <UART_WaitOnFlagUntilTimeout>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d001      	beq.n	8013302 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80132fe:	2303      	movs	r3, #3
 8013300:	e006      	b.n	8013310 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2220      	movs	r2, #32
 8013306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	e000      	b.n	8013310 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801330e:	2302      	movs	r3, #2
  }
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	603b      	str	r3, [r7, #0]
 8013324:	4613      	mov	r3, r2
 8013326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013328:	e02c      	b.n	8013384 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013330:	d028      	beq.n	8013384 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d007      	beq.n	8013348 <UART_WaitOnFlagUntilTimeout+0x30>
 8013338:	f7fd fc74 	bl	8010c24 <HAL_GetTick>
 801333c:	4602      	mov	r2, r0
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	1ad3      	subs	r3, r2, r3
 8013342:	69ba      	ldr	r2, [r7, #24]
 8013344:	429a      	cmp	r2, r3
 8013346:	d21d      	bcs.n	8013384 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	68da      	ldr	r2, [r3, #12]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013356:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	695a      	ldr	r2, [r3, #20]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f022 0201 	bic.w	r2, r2, #1
 8013366:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2220      	movs	r2, #32
 801336c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2220      	movs	r2, #32
 8013374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8013380:	2303      	movs	r3, #3
 8013382:	e00f      	b.n	80133a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	4013      	ands	r3, r2
 801338e:	68ba      	ldr	r2, [r7, #8]
 8013390:	429a      	cmp	r2, r3
 8013392:	bf0c      	ite	eq
 8013394:	2301      	moveq	r3, #1
 8013396:	2300      	movne	r3, #0
 8013398:	b2db      	uxtb	r3, r3
 801339a:	461a      	mov	r2, r3
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d0c3      	beq.n	801332a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80133a2:	2300      	movs	r3, #0
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}

080133ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80133ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b0:	b085      	sub	sp, #20
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	691b      	ldr	r3, [r3, #16]
 80133bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68da      	ldr	r2, [r3, #12]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	430a      	orrs	r2, r1
 80133ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	689a      	ldr	r2, [r3, #8]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	691b      	ldr	r3, [r3, #16]
 80133d4:	431a      	orrs	r2, r3
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	695b      	ldr	r3, [r3, #20]
 80133da:	431a      	orrs	r2, r3
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	69db      	ldr	r3, [r3, #28]
 80133e0:	4313      	orrs	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80133ee:	f023 030c 	bic.w	r3, r3, #12
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	6812      	ldr	r2, [r2, #0]
 80133f6:	68f9      	ldr	r1, [r7, #12]
 80133f8:	430b      	orrs	r3, r1
 80133fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	699a      	ldr	r2, [r3, #24]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	430a      	orrs	r2, r1
 8013410:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	69db      	ldr	r3, [r3, #28]
 8013416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801341a:	f040 818b 	bne.w	8013734 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4ac1      	ldr	r2, [pc, #772]	; (8013728 <UART_SetConfig+0x37c>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d005      	beq.n	8013434 <UART_SetConfig+0x88>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4abf      	ldr	r2, [pc, #764]	; (801372c <UART_SetConfig+0x380>)
 801342e:	4293      	cmp	r3, r2
 8013430:	f040 80bd 	bne.w	80135ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013434:	f7ff fa66 	bl	8012904 <HAL_RCC_GetPCLK2Freq>
 8013438:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	461d      	mov	r5, r3
 801343e:	f04f 0600 	mov.w	r6, #0
 8013442:	46a8      	mov	r8, r5
 8013444:	46b1      	mov	r9, r6
 8013446:	eb18 0308 	adds.w	r3, r8, r8
 801344a:	eb49 0409 	adc.w	r4, r9, r9
 801344e:	4698      	mov	r8, r3
 8013450:	46a1      	mov	r9, r4
 8013452:	eb18 0805 	adds.w	r8, r8, r5
 8013456:	eb49 0906 	adc.w	r9, r9, r6
 801345a:	f04f 0100 	mov.w	r1, #0
 801345e:	f04f 0200 	mov.w	r2, #0
 8013462:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013466:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801346a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801346e:	4688      	mov	r8, r1
 8013470:	4691      	mov	r9, r2
 8013472:	eb18 0005 	adds.w	r0, r8, r5
 8013476:	eb49 0106 	adc.w	r1, r9, r6
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	461d      	mov	r5, r3
 8013480:	f04f 0600 	mov.w	r6, #0
 8013484:	196b      	adds	r3, r5, r5
 8013486:	eb46 0406 	adc.w	r4, r6, r6
 801348a:	461a      	mov	r2, r3
 801348c:	4623      	mov	r3, r4
 801348e:	f7fc feb9 	bl	8010204 <__aeabi_uldivmod>
 8013492:	4603      	mov	r3, r0
 8013494:	460c      	mov	r4, r1
 8013496:	461a      	mov	r2, r3
 8013498:	4ba5      	ldr	r3, [pc, #660]	; (8013730 <UART_SetConfig+0x384>)
 801349a:	fba3 2302 	umull	r2, r3, r3, r2
 801349e:	095b      	lsrs	r3, r3, #5
 80134a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	461d      	mov	r5, r3
 80134a8:	f04f 0600 	mov.w	r6, #0
 80134ac:	46a9      	mov	r9, r5
 80134ae:	46b2      	mov	sl, r6
 80134b0:	eb19 0309 	adds.w	r3, r9, r9
 80134b4:	eb4a 040a 	adc.w	r4, sl, sl
 80134b8:	4699      	mov	r9, r3
 80134ba:	46a2      	mov	sl, r4
 80134bc:	eb19 0905 	adds.w	r9, r9, r5
 80134c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80134c4:	f04f 0100 	mov.w	r1, #0
 80134c8:	f04f 0200 	mov.w	r2, #0
 80134cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80134d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80134d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80134d8:	4689      	mov	r9, r1
 80134da:	4692      	mov	sl, r2
 80134dc:	eb19 0005 	adds.w	r0, r9, r5
 80134e0:	eb4a 0106 	adc.w	r1, sl, r6
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	461d      	mov	r5, r3
 80134ea:	f04f 0600 	mov.w	r6, #0
 80134ee:	196b      	adds	r3, r5, r5
 80134f0:	eb46 0406 	adc.w	r4, r6, r6
 80134f4:	461a      	mov	r2, r3
 80134f6:	4623      	mov	r3, r4
 80134f8:	f7fc fe84 	bl	8010204 <__aeabi_uldivmod>
 80134fc:	4603      	mov	r3, r0
 80134fe:	460c      	mov	r4, r1
 8013500:	461a      	mov	r2, r3
 8013502:	4b8b      	ldr	r3, [pc, #556]	; (8013730 <UART_SetConfig+0x384>)
 8013504:	fba3 1302 	umull	r1, r3, r3, r2
 8013508:	095b      	lsrs	r3, r3, #5
 801350a:	2164      	movs	r1, #100	; 0x64
 801350c:	fb01 f303 	mul.w	r3, r1, r3
 8013510:	1ad3      	subs	r3, r2, r3
 8013512:	00db      	lsls	r3, r3, #3
 8013514:	3332      	adds	r3, #50	; 0x32
 8013516:	4a86      	ldr	r2, [pc, #536]	; (8013730 <UART_SetConfig+0x384>)
 8013518:	fba2 2303 	umull	r2, r3, r2, r3
 801351c:	095b      	lsrs	r3, r3, #5
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013524:	4498      	add	r8, r3
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	461d      	mov	r5, r3
 801352a:	f04f 0600 	mov.w	r6, #0
 801352e:	46a9      	mov	r9, r5
 8013530:	46b2      	mov	sl, r6
 8013532:	eb19 0309 	adds.w	r3, r9, r9
 8013536:	eb4a 040a 	adc.w	r4, sl, sl
 801353a:	4699      	mov	r9, r3
 801353c:	46a2      	mov	sl, r4
 801353e:	eb19 0905 	adds.w	r9, r9, r5
 8013542:	eb4a 0a06 	adc.w	sl, sl, r6
 8013546:	f04f 0100 	mov.w	r1, #0
 801354a:	f04f 0200 	mov.w	r2, #0
 801354e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801355a:	4689      	mov	r9, r1
 801355c:	4692      	mov	sl, r2
 801355e:	eb19 0005 	adds.w	r0, r9, r5
 8013562:	eb4a 0106 	adc.w	r1, sl, r6
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	461d      	mov	r5, r3
 801356c:	f04f 0600 	mov.w	r6, #0
 8013570:	196b      	adds	r3, r5, r5
 8013572:	eb46 0406 	adc.w	r4, r6, r6
 8013576:	461a      	mov	r2, r3
 8013578:	4623      	mov	r3, r4
 801357a:	f7fc fe43 	bl	8010204 <__aeabi_uldivmod>
 801357e:	4603      	mov	r3, r0
 8013580:	460c      	mov	r4, r1
 8013582:	461a      	mov	r2, r3
 8013584:	4b6a      	ldr	r3, [pc, #424]	; (8013730 <UART_SetConfig+0x384>)
 8013586:	fba3 1302 	umull	r1, r3, r3, r2
 801358a:	095b      	lsrs	r3, r3, #5
 801358c:	2164      	movs	r1, #100	; 0x64
 801358e:	fb01 f303 	mul.w	r3, r1, r3
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	00db      	lsls	r3, r3, #3
 8013596:	3332      	adds	r3, #50	; 0x32
 8013598:	4a65      	ldr	r2, [pc, #404]	; (8013730 <UART_SetConfig+0x384>)
 801359a:	fba2 2303 	umull	r2, r3, r2, r3
 801359e:	095b      	lsrs	r3, r3, #5
 80135a0:	f003 0207 	and.w	r2, r3, #7
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4442      	add	r2, r8
 80135aa:	609a      	str	r2, [r3, #8]
 80135ac:	e26f      	b.n	8013a8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80135ae:	f7ff f995 	bl	80128dc <HAL_RCC_GetPCLK1Freq>
 80135b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	461d      	mov	r5, r3
 80135b8:	f04f 0600 	mov.w	r6, #0
 80135bc:	46a8      	mov	r8, r5
 80135be:	46b1      	mov	r9, r6
 80135c0:	eb18 0308 	adds.w	r3, r8, r8
 80135c4:	eb49 0409 	adc.w	r4, r9, r9
 80135c8:	4698      	mov	r8, r3
 80135ca:	46a1      	mov	r9, r4
 80135cc:	eb18 0805 	adds.w	r8, r8, r5
 80135d0:	eb49 0906 	adc.w	r9, r9, r6
 80135d4:	f04f 0100 	mov.w	r1, #0
 80135d8:	f04f 0200 	mov.w	r2, #0
 80135dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80135e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80135e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80135e8:	4688      	mov	r8, r1
 80135ea:	4691      	mov	r9, r2
 80135ec:	eb18 0005 	adds.w	r0, r8, r5
 80135f0:	eb49 0106 	adc.w	r1, r9, r6
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	461d      	mov	r5, r3
 80135fa:	f04f 0600 	mov.w	r6, #0
 80135fe:	196b      	adds	r3, r5, r5
 8013600:	eb46 0406 	adc.w	r4, r6, r6
 8013604:	461a      	mov	r2, r3
 8013606:	4623      	mov	r3, r4
 8013608:	f7fc fdfc 	bl	8010204 <__aeabi_uldivmod>
 801360c:	4603      	mov	r3, r0
 801360e:	460c      	mov	r4, r1
 8013610:	461a      	mov	r2, r3
 8013612:	4b47      	ldr	r3, [pc, #284]	; (8013730 <UART_SetConfig+0x384>)
 8013614:	fba3 2302 	umull	r2, r3, r3, r2
 8013618:	095b      	lsrs	r3, r3, #5
 801361a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	461d      	mov	r5, r3
 8013622:	f04f 0600 	mov.w	r6, #0
 8013626:	46a9      	mov	r9, r5
 8013628:	46b2      	mov	sl, r6
 801362a:	eb19 0309 	adds.w	r3, r9, r9
 801362e:	eb4a 040a 	adc.w	r4, sl, sl
 8013632:	4699      	mov	r9, r3
 8013634:	46a2      	mov	sl, r4
 8013636:	eb19 0905 	adds.w	r9, r9, r5
 801363a:	eb4a 0a06 	adc.w	sl, sl, r6
 801363e:	f04f 0100 	mov.w	r1, #0
 8013642:	f04f 0200 	mov.w	r2, #0
 8013646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801364a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801364e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013652:	4689      	mov	r9, r1
 8013654:	4692      	mov	sl, r2
 8013656:	eb19 0005 	adds.w	r0, r9, r5
 801365a:	eb4a 0106 	adc.w	r1, sl, r6
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	461d      	mov	r5, r3
 8013664:	f04f 0600 	mov.w	r6, #0
 8013668:	196b      	adds	r3, r5, r5
 801366a:	eb46 0406 	adc.w	r4, r6, r6
 801366e:	461a      	mov	r2, r3
 8013670:	4623      	mov	r3, r4
 8013672:	f7fc fdc7 	bl	8010204 <__aeabi_uldivmod>
 8013676:	4603      	mov	r3, r0
 8013678:	460c      	mov	r4, r1
 801367a:	461a      	mov	r2, r3
 801367c:	4b2c      	ldr	r3, [pc, #176]	; (8013730 <UART_SetConfig+0x384>)
 801367e:	fba3 1302 	umull	r1, r3, r3, r2
 8013682:	095b      	lsrs	r3, r3, #5
 8013684:	2164      	movs	r1, #100	; 0x64
 8013686:	fb01 f303 	mul.w	r3, r1, r3
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	3332      	adds	r3, #50	; 0x32
 8013690:	4a27      	ldr	r2, [pc, #156]	; (8013730 <UART_SetConfig+0x384>)
 8013692:	fba2 2303 	umull	r2, r3, r2, r3
 8013696:	095b      	lsrs	r3, r3, #5
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801369e:	4498      	add	r8, r3
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	461d      	mov	r5, r3
 80136a4:	f04f 0600 	mov.w	r6, #0
 80136a8:	46a9      	mov	r9, r5
 80136aa:	46b2      	mov	sl, r6
 80136ac:	eb19 0309 	adds.w	r3, r9, r9
 80136b0:	eb4a 040a 	adc.w	r4, sl, sl
 80136b4:	4699      	mov	r9, r3
 80136b6:	46a2      	mov	sl, r4
 80136b8:	eb19 0905 	adds.w	r9, r9, r5
 80136bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80136c0:	f04f 0100 	mov.w	r1, #0
 80136c4:	f04f 0200 	mov.w	r2, #0
 80136c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80136cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80136d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80136d4:	4689      	mov	r9, r1
 80136d6:	4692      	mov	sl, r2
 80136d8:	eb19 0005 	adds.w	r0, r9, r5
 80136dc:	eb4a 0106 	adc.w	r1, sl, r6
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	461d      	mov	r5, r3
 80136e6:	f04f 0600 	mov.w	r6, #0
 80136ea:	196b      	adds	r3, r5, r5
 80136ec:	eb46 0406 	adc.w	r4, r6, r6
 80136f0:	461a      	mov	r2, r3
 80136f2:	4623      	mov	r3, r4
 80136f4:	f7fc fd86 	bl	8010204 <__aeabi_uldivmod>
 80136f8:	4603      	mov	r3, r0
 80136fa:	460c      	mov	r4, r1
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b0c      	ldr	r3, [pc, #48]	; (8013730 <UART_SetConfig+0x384>)
 8013700:	fba3 1302 	umull	r1, r3, r3, r2
 8013704:	095b      	lsrs	r3, r3, #5
 8013706:	2164      	movs	r1, #100	; 0x64
 8013708:	fb01 f303 	mul.w	r3, r1, r3
 801370c:	1ad3      	subs	r3, r2, r3
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	3332      	adds	r3, #50	; 0x32
 8013712:	4a07      	ldr	r2, [pc, #28]	; (8013730 <UART_SetConfig+0x384>)
 8013714:	fba2 2303 	umull	r2, r3, r2, r3
 8013718:	095b      	lsrs	r3, r3, #5
 801371a:	f003 0207 	and.w	r2, r3, #7
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	4442      	add	r2, r8
 8013724:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8013726:	e1b2      	b.n	8013a8e <UART_SetConfig+0x6e2>
 8013728:	40011000 	.word	0x40011000
 801372c:	40011400 	.word	0x40011400
 8013730:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4ad7      	ldr	r2, [pc, #860]	; (8013a98 <UART_SetConfig+0x6ec>)
 801373a:	4293      	cmp	r3, r2
 801373c:	d005      	beq.n	801374a <UART_SetConfig+0x39e>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	4ad6      	ldr	r2, [pc, #856]	; (8013a9c <UART_SetConfig+0x6f0>)
 8013744:	4293      	cmp	r3, r2
 8013746:	f040 80d1 	bne.w	80138ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801374a:	f7ff f8db 	bl	8012904 <HAL_RCC_GetPCLK2Freq>
 801374e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	469a      	mov	sl, r3
 8013754:	f04f 0b00 	mov.w	fp, #0
 8013758:	46d0      	mov	r8, sl
 801375a:	46d9      	mov	r9, fp
 801375c:	eb18 0308 	adds.w	r3, r8, r8
 8013760:	eb49 0409 	adc.w	r4, r9, r9
 8013764:	4698      	mov	r8, r3
 8013766:	46a1      	mov	r9, r4
 8013768:	eb18 080a 	adds.w	r8, r8, sl
 801376c:	eb49 090b 	adc.w	r9, r9, fp
 8013770:	f04f 0100 	mov.w	r1, #0
 8013774:	f04f 0200 	mov.w	r2, #0
 8013778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801377c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013784:	4688      	mov	r8, r1
 8013786:	4691      	mov	r9, r2
 8013788:	eb1a 0508 	adds.w	r5, sl, r8
 801378c:	eb4b 0609 	adc.w	r6, fp, r9
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	4619      	mov	r1, r3
 8013796:	f04f 0200 	mov.w	r2, #0
 801379a:	f04f 0300 	mov.w	r3, #0
 801379e:	f04f 0400 	mov.w	r4, #0
 80137a2:	0094      	lsls	r4, r2, #2
 80137a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80137a8:	008b      	lsls	r3, r1, #2
 80137aa:	461a      	mov	r2, r3
 80137ac:	4623      	mov	r3, r4
 80137ae:	4628      	mov	r0, r5
 80137b0:	4631      	mov	r1, r6
 80137b2:	f7fc fd27 	bl	8010204 <__aeabi_uldivmod>
 80137b6:	4603      	mov	r3, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	461a      	mov	r2, r3
 80137bc:	4bb8      	ldr	r3, [pc, #736]	; (8013aa0 <UART_SetConfig+0x6f4>)
 80137be:	fba3 2302 	umull	r2, r3, r3, r2
 80137c2:	095b      	lsrs	r3, r3, #5
 80137c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	469b      	mov	fp, r3
 80137cc:	f04f 0c00 	mov.w	ip, #0
 80137d0:	46d9      	mov	r9, fp
 80137d2:	46e2      	mov	sl, ip
 80137d4:	eb19 0309 	adds.w	r3, r9, r9
 80137d8:	eb4a 040a 	adc.w	r4, sl, sl
 80137dc:	4699      	mov	r9, r3
 80137de:	46a2      	mov	sl, r4
 80137e0:	eb19 090b 	adds.w	r9, r9, fp
 80137e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80137e8:	f04f 0100 	mov.w	r1, #0
 80137ec:	f04f 0200 	mov.w	r2, #0
 80137f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80137f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80137f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80137fc:	4689      	mov	r9, r1
 80137fe:	4692      	mov	sl, r2
 8013800:	eb1b 0509 	adds.w	r5, fp, r9
 8013804:	eb4c 060a 	adc.w	r6, ip, sl
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	4619      	mov	r1, r3
 801380e:	f04f 0200 	mov.w	r2, #0
 8013812:	f04f 0300 	mov.w	r3, #0
 8013816:	f04f 0400 	mov.w	r4, #0
 801381a:	0094      	lsls	r4, r2, #2
 801381c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013820:	008b      	lsls	r3, r1, #2
 8013822:	461a      	mov	r2, r3
 8013824:	4623      	mov	r3, r4
 8013826:	4628      	mov	r0, r5
 8013828:	4631      	mov	r1, r6
 801382a:	f7fc fceb 	bl	8010204 <__aeabi_uldivmod>
 801382e:	4603      	mov	r3, r0
 8013830:	460c      	mov	r4, r1
 8013832:	461a      	mov	r2, r3
 8013834:	4b9a      	ldr	r3, [pc, #616]	; (8013aa0 <UART_SetConfig+0x6f4>)
 8013836:	fba3 1302 	umull	r1, r3, r3, r2
 801383a:	095b      	lsrs	r3, r3, #5
 801383c:	2164      	movs	r1, #100	; 0x64
 801383e:	fb01 f303 	mul.w	r3, r1, r3
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	011b      	lsls	r3, r3, #4
 8013846:	3332      	adds	r3, #50	; 0x32
 8013848:	4a95      	ldr	r2, [pc, #596]	; (8013aa0 <UART_SetConfig+0x6f4>)
 801384a:	fba2 2303 	umull	r2, r3, r2, r3
 801384e:	095b      	lsrs	r3, r3, #5
 8013850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013854:	4498      	add	r8, r3
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	469b      	mov	fp, r3
 801385a:	f04f 0c00 	mov.w	ip, #0
 801385e:	46d9      	mov	r9, fp
 8013860:	46e2      	mov	sl, ip
 8013862:	eb19 0309 	adds.w	r3, r9, r9
 8013866:	eb4a 040a 	adc.w	r4, sl, sl
 801386a:	4699      	mov	r9, r3
 801386c:	46a2      	mov	sl, r4
 801386e:	eb19 090b 	adds.w	r9, r9, fp
 8013872:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013876:	f04f 0100 	mov.w	r1, #0
 801387a:	f04f 0200 	mov.w	r2, #0
 801387e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013882:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013886:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801388a:	4689      	mov	r9, r1
 801388c:	4692      	mov	sl, r2
 801388e:	eb1b 0509 	adds.w	r5, fp, r9
 8013892:	eb4c 060a 	adc.w	r6, ip, sl
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	4619      	mov	r1, r3
 801389c:	f04f 0200 	mov.w	r2, #0
 80138a0:	f04f 0300 	mov.w	r3, #0
 80138a4:	f04f 0400 	mov.w	r4, #0
 80138a8:	0094      	lsls	r4, r2, #2
 80138aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80138ae:	008b      	lsls	r3, r1, #2
 80138b0:	461a      	mov	r2, r3
 80138b2:	4623      	mov	r3, r4
 80138b4:	4628      	mov	r0, r5
 80138b6:	4631      	mov	r1, r6
 80138b8:	f7fc fca4 	bl	8010204 <__aeabi_uldivmod>
 80138bc:	4603      	mov	r3, r0
 80138be:	460c      	mov	r4, r1
 80138c0:	461a      	mov	r2, r3
 80138c2:	4b77      	ldr	r3, [pc, #476]	; (8013aa0 <UART_SetConfig+0x6f4>)
 80138c4:	fba3 1302 	umull	r1, r3, r3, r2
 80138c8:	095b      	lsrs	r3, r3, #5
 80138ca:	2164      	movs	r1, #100	; 0x64
 80138cc:	fb01 f303 	mul.w	r3, r1, r3
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	011b      	lsls	r3, r3, #4
 80138d4:	3332      	adds	r3, #50	; 0x32
 80138d6:	4a72      	ldr	r2, [pc, #456]	; (8013aa0 <UART_SetConfig+0x6f4>)
 80138d8:	fba2 2303 	umull	r2, r3, r2, r3
 80138dc:	095b      	lsrs	r3, r3, #5
 80138de:	f003 020f 	and.w	r2, r3, #15
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	4442      	add	r2, r8
 80138e8:	609a      	str	r2, [r3, #8]
 80138ea:	e0d0      	b.n	8013a8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80138ec:	f7fe fff6 	bl	80128dc <HAL_RCC_GetPCLK1Freq>
 80138f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	469a      	mov	sl, r3
 80138f6:	f04f 0b00 	mov.w	fp, #0
 80138fa:	46d0      	mov	r8, sl
 80138fc:	46d9      	mov	r9, fp
 80138fe:	eb18 0308 	adds.w	r3, r8, r8
 8013902:	eb49 0409 	adc.w	r4, r9, r9
 8013906:	4698      	mov	r8, r3
 8013908:	46a1      	mov	r9, r4
 801390a:	eb18 080a 	adds.w	r8, r8, sl
 801390e:	eb49 090b 	adc.w	r9, r9, fp
 8013912:	f04f 0100 	mov.w	r1, #0
 8013916:	f04f 0200 	mov.w	r2, #0
 801391a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801391e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013922:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013926:	4688      	mov	r8, r1
 8013928:	4691      	mov	r9, r2
 801392a:	eb1a 0508 	adds.w	r5, sl, r8
 801392e:	eb4b 0609 	adc.w	r6, fp, r9
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	4619      	mov	r1, r3
 8013938:	f04f 0200 	mov.w	r2, #0
 801393c:	f04f 0300 	mov.w	r3, #0
 8013940:	f04f 0400 	mov.w	r4, #0
 8013944:	0094      	lsls	r4, r2, #2
 8013946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801394a:	008b      	lsls	r3, r1, #2
 801394c:	461a      	mov	r2, r3
 801394e:	4623      	mov	r3, r4
 8013950:	4628      	mov	r0, r5
 8013952:	4631      	mov	r1, r6
 8013954:	f7fc fc56 	bl	8010204 <__aeabi_uldivmod>
 8013958:	4603      	mov	r3, r0
 801395a:	460c      	mov	r4, r1
 801395c:	461a      	mov	r2, r3
 801395e:	4b50      	ldr	r3, [pc, #320]	; (8013aa0 <UART_SetConfig+0x6f4>)
 8013960:	fba3 2302 	umull	r2, r3, r3, r2
 8013964:	095b      	lsrs	r3, r3, #5
 8013966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	469b      	mov	fp, r3
 801396e:	f04f 0c00 	mov.w	ip, #0
 8013972:	46d9      	mov	r9, fp
 8013974:	46e2      	mov	sl, ip
 8013976:	eb19 0309 	adds.w	r3, r9, r9
 801397a:	eb4a 040a 	adc.w	r4, sl, sl
 801397e:	4699      	mov	r9, r3
 8013980:	46a2      	mov	sl, r4
 8013982:	eb19 090b 	adds.w	r9, r9, fp
 8013986:	eb4a 0a0c 	adc.w	sl, sl, ip
 801398a:	f04f 0100 	mov.w	r1, #0
 801398e:	f04f 0200 	mov.w	r2, #0
 8013992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801399a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801399e:	4689      	mov	r9, r1
 80139a0:	4692      	mov	sl, r2
 80139a2:	eb1b 0509 	adds.w	r5, fp, r9
 80139a6:	eb4c 060a 	adc.w	r6, ip, sl
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	4619      	mov	r1, r3
 80139b0:	f04f 0200 	mov.w	r2, #0
 80139b4:	f04f 0300 	mov.w	r3, #0
 80139b8:	f04f 0400 	mov.w	r4, #0
 80139bc:	0094      	lsls	r4, r2, #2
 80139be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80139c2:	008b      	lsls	r3, r1, #2
 80139c4:	461a      	mov	r2, r3
 80139c6:	4623      	mov	r3, r4
 80139c8:	4628      	mov	r0, r5
 80139ca:	4631      	mov	r1, r6
 80139cc:	f7fc fc1a 	bl	8010204 <__aeabi_uldivmod>
 80139d0:	4603      	mov	r3, r0
 80139d2:	460c      	mov	r4, r1
 80139d4:	461a      	mov	r2, r3
 80139d6:	4b32      	ldr	r3, [pc, #200]	; (8013aa0 <UART_SetConfig+0x6f4>)
 80139d8:	fba3 1302 	umull	r1, r3, r3, r2
 80139dc:	095b      	lsrs	r3, r3, #5
 80139de:	2164      	movs	r1, #100	; 0x64
 80139e0:	fb01 f303 	mul.w	r3, r1, r3
 80139e4:	1ad3      	subs	r3, r2, r3
 80139e6:	011b      	lsls	r3, r3, #4
 80139e8:	3332      	adds	r3, #50	; 0x32
 80139ea:	4a2d      	ldr	r2, [pc, #180]	; (8013aa0 <UART_SetConfig+0x6f4>)
 80139ec:	fba2 2303 	umull	r2, r3, r2, r3
 80139f0:	095b      	lsrs	r3, r3, #5
 80139f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139f6:	4498      	add	r8, r3
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	469b      	mov	fp, r3
 80139fc:	f04f 0c00 	mov.w	ip, #0
 8013a00:	46d9      	mov	r9, fp
 8013a02:	46e2      	mov	sl, ip
 8013a04:	eb19 0309 	adds.w	r3, r9, r9
 8013a08:	eb4a 040a 	adc.w	r4, sl, sl
 8013a0c:	4699      	mov	r9, r3
 8013a0e:	46a2      	mov	sl, r4
 8013a10:	eb19 090b 	adds.w	r9, r9, fp
 8013a14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013a18:	f04f 0100 	mov.w	r1, #0
 8013a1c:	f04f 0200 	mov.w	r2, #0
 8013a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013a24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013a28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013a2c:	4689      	mov	r9, r1
 8013a2e:	4692      	mov	sl, r2
 8013a30:	eb1b 0509 	adds.w	r5, fp, r9
 8013a34:	eb4c 060a 	adc.w	r6, ip, sl
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	f04f 0200 	mov.w	r2, #0
 8013a42:	f04f 0300 	mov.w	r3, #0
 8013a46:	f04f 0400 	mov.w	r4, #0
 8013a4a:	0094      	lsls	r4, r2, #2
 8013a4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013a50:	008b      	lsls	r3, r1, #2
 8013a52:	461a      	mov	r2, r3
 8013a54:	4623      	mov	r3, r4
 8013a56:	4628      	mov	r0, r5
 8013a58:	4631      	mov	r1, r6
 8013a5a:	f7fc fbd3 	bl	8010204 <__aeabi_uldivmod>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	460c      	mov	r4, r1
 8013a62:	461a      	mov	r2, r3
 8013a64:	4b0e      	ldr	r3, [pc, #56]	; (8013aa0 <UART_SetConfig+0x6f4>)
 8013a66:	fba3 1302 	umull	r1, r3, r3, r2
 8013a6a:	095b      	lsrs	r3, r3, #5
 8013a6c:	2164      	movs	r1, #100	; 0x64
 8013a6e:	fb01 f303 	mul.w	r3, r1, r3
 8013a72:	1ad3      	subs	r3, r2, r3
 8013a74:	011b      	lsls	r3, r3, #4
 8013a76:	3332      	adds	r3, #50	; 0x32
 8013a78:	4a09      	ldr	r2, [pc, #36]	; (8013aa0 <UART_SetConfig+0x6f4>)
 8013a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8013a7e:	095b      	lsrs	r3, r3, #5
 8013a80:	f003 020f 	and.w	r2, r3, #15
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4442      	add	r2, r8
 8013a8a:	609a      	str	r2, [r3, #8]
}
 8013a8c:	e7ff      	b.n	8013a8e <UART_SetConfig+0x6e2>
 8013a8e:	bf00      	nop
 8013a90:	3714      	adds	r7, #20
 8013a92:	46bd      	mov	sp, r7
 8013a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a98:	40011000 	.word	0x40011000
 8013a9c:	40011400 	.word	0x40011400
 8013aa0:	51eb851f 	.word	0x51eb851f

08013aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013aa4:	b084      	sub	sp, #16
 8013aa6:	b580      	push	{r7, lr}
 8013aa8:	b084      	sub	sp, #16
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	f107 001c 	add.w	r0, r7, #28
 8013ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d122      	bne.n	8013b02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d105      	bne.n	8013af6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f001 f9e4 	bl	8014ec4 <USB_CoreReset>
 8013afc:	4603      	mov	r3, r0
 8013afe:	73fb      	strb	r3, [r7, #15]
 8013b00:	e01a      	b.n	8013b38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f001 f9d8 	bl	8014ec4 <USB_CoreReset>
 8013b14:	4603      	mov	r3, r0
 8013b16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d106      	bne.n	8013b2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	639a      	str	r2, [r3, #56]	; 0x38
 8013b2a:	e005      	b.n	8013b38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d10b      	bne.n	8013b56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	f043 0206 	orr.w	r2, r3, #6
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	f043 0220 	orr.w	r2, r3, #32
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b62:	b004      	add	sp, #16
 8013b64:	4770      	bx	lr
	...

08013b68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b087      	sub	sp, #28
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	60b9      	str	r1, [r7, #8]
 8013b72:	4613      	mov	r3, r2
 8013b74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b02      	cmp	r3, #2
 8013b7a:	d165      	bne.n	8013c48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	4a41      	ldr	r2, [pc, #260]	; (8013c84 <USB_SetTurnaroundTime+0x11c>)
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d906      	bls.n	8013b92 <USB_SetTurnaroundTime+0x2a>
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	4a40      	ldr	r2, [pc, #256]	; (8013c88 <USB_SetTurnaroundTime+0x120>)
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d802      	bhi.n	8013b92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013b8c:	230f      	movs	r3, #15
 8013b8e:	617b      	str	r3, [r7, #20]
 8013b90:	e062      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	4a3c      	ldr	r2, [pc, #240]	; (8013c88 <USB_SetTurnaroundTime+0x120>)
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d906      	bls.n	8013ba8 <USB_SetTurnaroundTime+0x40>
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	4a3b      	ldr	r2, [pc, #236]	; (8013c8c <USB_SetTurnaroundTime+0x124>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d802      	bhi.n	8013ba8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013ba2:	230e      	movs	r3, #14
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	e057      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	4a38      	ldr	r2, [pc, #224]	; (8013c8c <USB_SetTurnaroundTime+0x124>)
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d906      	bls.n	8013bbe <USB_SetTurnaroundTime+0x56>
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	4a37      	ldr	r2, [pc, #220]	; (8013c90 <USB_SetTurnaroundTime+0x128>)
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d802      	bhi.n	8013bbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013bb8:	230d      	movs	r3, #13
 8013bba:	617b      	str	r3, [r7, #20]
 8013bbc:	e04c      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	4a33      	ldr	r2, [pc, #204]	; (8013c90 <USB_SetTurnaroundTime+0x128>)
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d906      	bls.n	8013bd4 <USB_SetTurnaroundTime+0x6c>
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	4a32      	ldr	r2, [pc, #200]	; (8013c94 <USB_SetTurnaroundTime+0x12c>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d802      	bhi.n	8013bd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013bce:	230c      	movs	r3, #12
 8013bd0:	617b      	str	r3, [r7, #20]
 8013bd2:	e041      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	4a2f      	ldr	r2, [pc, #188]	; (8013c94 <USB_SetTurnaroundTime+0x12c>)
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d906      	bls.n	8013bea <USB_SetTurnaroundTime+0x82>
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	4a2e      	ldr	r2, [pc, #184]	; (8013c98 <USB_SetTurnaroundTime+0x130>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d802      	bhi.n	8013bea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013be4:	230b      	movs	r3, #11
 8013be6:	617b      	str	r3, [r7, #20]
 8013be8:	e036      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	4a2a      	ldr	r2, [pc, #168]	; (8013c98 <USB_SetTurnaroundTime+0x130>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d906      	bls.n	8013c00 <USB_SetTurnaroundTime+0x98>
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	4a29      	ldr	r2, [pc, #164]	; (8013c9c <USB_SetTurnaroundTime+0x134>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d802      	bhi.n	8013c00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013bfa:	230a      	movs	r3, #10
 8013bfc:	617b      	str	r3, [r7, #20]
 8013bfe:	e02b      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	4a26      	ldr	r2, [pc, #152]	; (8013c9c <USB_SetTurnaroundTime+0x134>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d906      	bls.n	8013c16 <USB_SetTurnaroundTime+0xae>
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	4a25      	ldr	r2, [pc, #148]	; (8013ca0 <USB_SetTurnaroundTime+0x138>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d802      	bhi.n	8013c16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013c10:	2309      	movs	r3, #9
 8013c12:	617b      	str	r3, [r7, #20]
 8013c14:	e020      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	4a21      	ldr	r2, [pc, #132]	; (8013ca0 <USB_SetTurnaroundTime+0x138>)
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d906      	bls.n	8013c2c <USB_SetTurnaroundTime+0xc4>
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	4a20      	ldr	r2, [pc, #128]	; (8013ca4 <USB_SetTurnaroundTime+0x13c>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d802      	bhi.n	8013c2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013c26:	2308      	movs	r3, #8
 8013c28:	617b      	str	r3, [r7, #20]
 8013c2a:	e015      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	4a1d      	ldr	r2, [pc, #116]	; (8013ca4 <USB_SetTurnaroundTime+0x13c>)
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d906      	bls.n	8013c42 <USB_SetTurnaroundTime+0xda>
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	4a1c      	ldr	r2, [pc, #112]	; (8013ca8 <USB_SetTurnaroundTime+0x140>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d802      	bhi.n	8013c42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013c3c:	2307      	movs	r3, #7
 8013c3e:	617b      	str	r3, [r7, #20]
 8013c40:	e00a      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013c42:	2306      	movs	r3, #6
 8013c44:	617b      	str	r3, [r7, #20]
 8013c46:	e007      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013c48:	79fb      	ldrb	r3, [r7, #7]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d102      	bne.n	8013c54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013c4e:	2309      	movs	r3, #9
 8013c50:	617b      	str	r3, [r7, #20]
 8013c52:	e001      	b.n	8013c58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013c54:	2309      	movs	r3, #9
 8013c56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	68da      	ldr	r2, [r3, #12]
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	029b      	lsls	r3, r3, #10
 8013c6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013c70:	431a      	orrs	r2, r3
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013c76:	2300      	movs	r3, #0
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	371c      	adds	r7, #28
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	00d8acbf 	.word	0x00d8acbf
 8013c88:	00e4e1bf 	.word	0x00e4e1bf
 8013c8c:	00f423ff 	.word	0x00f423ff
 8013c90:	0106737f 	.word	0x0106737f
 8013c94:	011a499f 	.word	0x011a499f
 8013c98:	01312cff 	.word	0x01312cff
 8013c9c:	014ca43f 	.word	0x014ca43f
 8013ca0:	016e35ff 	.word	0x016e35ff
 8013ca4:	01a6ab1f 	.word	0x01a6ab1f
 8013ca8:	01e847ff 	.word	0x01e847ff

08013cac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	689b      	ldr	r3, [r3, #8]
 8013cb8:	f043 0201 	orr.w	r2, r3, #1
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	370c      	adds	r7, #12
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr

08013cce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cce:	b480      	push	{r7}
 8013cd0:	b083      	sub	sp, #12
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	f023 0201 	bic.w	r2, r3, #1
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ce2:	2300      	movs	r3, #0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	370c      	adds	r7, #12
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013d08:	78fb      	ldrb	r3, [r7, #3]
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d106      	bne.n	8013d1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	60da      	str	r2, [r3, #12]
 8013d1a:	e00b      	b.n	8013d34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8013d1c:	78fb      	ldrb	r3, [r7, #3]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d106      	bne.n	8013d30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	60da      	str	r2, [r3, #12]
 8013d2e:	e001      	b.n	8013d34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8013d30:	2301      	movs	r3, #1
 8013d32:	e003      	b.n	8013d3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013d34:	2032      	movs	r0, #50	; 0x32
 8013d36:	f7fc ff81 	bl	8010c3c <HAL_Delay>

  return HAL_OK;
 8013d3a:	2300      	movs	r3, #0
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013d44:	b084      	sub	sp, #16
 8013d46:	b580      	push	{r7, lr}
 8013d48:	b086      	sub	sp, #24
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
 8013d4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013d56:	2300      	movs	r3, #0
 8013d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013d5e:	2300      	movs	r3, #0
 8013d60:	613b      	str	r3, [r7, #16]
 8013d62:	e009      	b.n	8013d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	3340      	adds	r3, #64	; 0x40
 8013d6a:	009b      	lsls	r3, r3, #2
 8013d6c:	4413      	add	r3, r2
 8013d6e:	2200      	movs	r2, #0
 8013d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	3301      	adds	r3, #1
 8013d76:	613b      	str	r3, [r7, #16]
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	2b0e      	cmp	r3, #14
 8013d7c:	d9f2      	bls.n	8013d64 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d11c      	bne.n	8013dbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	68fa      	ldr	r2, [r7, #12]
 8013d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d92:	f043 0302 	orr.w	r3, r3, #2
 8013d96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	601a      	str	r2, [r3, #0]
 8013dbc:	e005      	b.n	8013dca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ddc:	4619      	mov	r1, r3
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013de4:	461a      	mov	r2, r3
 8013de6:	680b      	ldr	r3, [r1, #0]
 8013de8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d10c      	bne.n	8013e0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d104      	bne.n	8013e00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013df6:	2100      	movs	r1, #0
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f000 f949 	bl	8014090 <USB_SetDevSpeed>
 8013dfe:	e008      	b.n	8013e12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013e00:	2101      	movs	r1, #1
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 f944 	bl	8014090 <USB_SetDevSpeed>
 8013e08:	e003      	b.n	8013e12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013e0a:	2103      	movs	r1, #3
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 f93f 	bl	8014090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013e12:	2110      	movs	r1, #16
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 f8f3 	bl	8014000 <USB_FlushTxFifo>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013e20:	2301      	movs	r3, #1
 8013e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 f911 	bl	801404c <USB_FlushRxFifo>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d001      	beq.n	8013e34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013e30:	2301      	movs	r3, #1
 8013e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e46:	461a      	mov	r2, r3
 8013e48:	2300      	movs	r3, #0
 8013e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e52:	461a      	mov	r2, r3
 8013e54:	2300      	movs	r3, #0
 8013e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e58:	2300      	movs	r3, #0
 8013e5a:	613b      	str	r3, [r7, #16]
 8013e5c:	e043      	b.n	8013ee6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	015a      	lsls	r2, r3, #5
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4413      	add	r3, r2
 8013e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e74:	d118      	bne.n	8013ea8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10a      	bne.n	8013e92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	015a      	lsls	r2, r3, #5
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	4413      	add	r3, r2
 8013e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e88:	461a      	mov	r2, r3
 8013e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013e8e:	6013      	str	r3, [r2, #0]
 8013e90:	e013      	b.n	8013eba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	015a      	lsls	r2, r3, #5
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	4413      	add	r3, r2
 8013e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	e008      	b.n	8013eba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	015a      	lsls	r2, r3, #5
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4413      	add	r3, r2
 8013eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	015a      	lsls	r2, r3, #5
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	2300      	movs	r3, #0
 8013eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed8:	461a      	mov	r2, r3
 8013eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	613b      	str	r3, [r7, #16]
 8013ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee8:	693a      	ldr	r2, [r7, #16]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d3b7      	bcc.n	8013e5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013eee:	2300      	movs	r3, #0
 8013ef0:	613b      	str	r3, [r7, #16]
 8013ef2:	e043      	b.n	8013f7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	015a      	lsls	r2, r3, #5
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	4413      	add	r3, r2
 8013efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f0a:	d118      	bne.n	8013f3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d10a      	bne.n	8013f28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	015a      	lsls	r2, r3, #5
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	4413      	add	r3, r2
 8013f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f1e:	461a      	mov	r2, r3
 8013f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013f24:	6013      	str	r3, [r2, #0]
 8013f26:	e013      	b.n	8013f50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	015a      	lsls	r2, r3, #5
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	4413      	add	r3, r2
 8013f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f34:	461a      	mov	r2, r3
 8013f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013f3a:	6013      	str	r3, [r2, #0]
 8013f3c:	e008      	b.n	8013f50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	015a      	lsls	r2, r3, #5
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	4413      	add	r3, r2
 8013f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	015a      	lsls	r2, r3, #5
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	4413      	add	r3, r2
 8013f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	2300      	movs	r3, #0
 8013f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	015a      	lsls	r2, r3, #5
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4413      	add	r3, r2
 8013f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f6e:	461a      	mov	r2, r3
 8013f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	613b      	str	r3, [r7, #16]
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7e:	693a      	ldr	r2, [r7, #16]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d3b7      	bcc.n	8013ef4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f8a:	691b      	ldr	r3, [r3, #16]
 8013f8c:	68fa      	ldr	r2, [r7, #12]
 8013f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d105      	bne.n	8013fb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	699b      	ldr	r3, [r3, #24]
 8013fb0:	f043 0210 	orr.w	r2, r3, #16
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	699a      	ldr	r2, [r3, #24]
 8013fbc:	4b0f      	ldr	r3, [pc, #60]	; (8013ffc <USB_DevInit+0x2b8>)
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d005      	beq.n	8013fd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	699b      	ldr	r3, [r3, #24]
 8013fce:	f043 0208 	orr.w	r2, r3, #8
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	d107      	bne.n	8013fec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	699b      	ldr	r3, [r3, #24]
 8013fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013fe4:	f043 0304 	orr.w	r3, r3, #4
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3718      	adds	r7, #24
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ff8:	b004      	add	sp, #16
 8013ffa:	4770      	bx	lr
 8013ffc:	803c3800 	.word	0x803c3800

08014000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801400a:	2300      	movs	r3, #0
 801400c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	019b      	lsls	r3, r3, #6
 8014012:	f043 0220 	orr.w	r2, r3, #32
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	3301      	adds	r3, #1
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	4a09      	ldr	r2, [pc, #36]	; (8014048 <USB_FlushTxFifo+0x48>)
 8014024:	4293      	cmp	r3, r2
 8014026:	d901      	bls.n	801402c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8014028:	2303      	movs	r3, #3
 801402a:	e006      	b.n	801403a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	f003 0320 	and.w	r3, r3, #32
 8014034:	2b20      	cmp	r3, #32
 8014036:	d0f0      	beq.n	801401a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	3714      	adds	r7, #20
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop
 8014048:	00030d40 	.word	0x00030d40

0801404c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801404c:	b480      	push	{r7}
 801404e:	b085      	sub	sp, #20
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8014054:	2300      	movs	r3, #0
 8014056:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2210      	movs	r2, #16
 801405c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	3301      	adds	r3, #1
 8014062:	60fb      	str	r3, [r7, #12]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	4a09      	ldr	r2, [pc, #36]	; (801408c <USB_FlushRxFifo+0x40>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d901      	bls.n	8014070 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801406c:	2303      	movs	r3, #3
 801406e:	e006      	b.n	801407e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	691b      	ldr	r3, [r3, #16]
 8014074:	f003 0310 	and.w	r3, r3, #16
 8014078:	2b10      	cmp	r3, #16
 801407a:	d0f0      	beq.n	801405e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801407c:	2300      	movs	r3, #0
}
 801407e:	4618      	mov	r0, r3
 8014080:	3714      	adds	r7, #20
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop
 801408c:	00030d40 	.word	0x00030d40

08014090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014090:	b480      	push	{r7}
 8014092:	b085      	sub	sp, #20
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	460b      	mov	r3, r1
 801409a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	78fb      	ldrb	r3, [r7, #3]
 80140aa:	68f9      	ldr	r1, [r7, #12]
 80140ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80140b0:	4313      	orrs	r3, r2
 80140b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3714      	adds	r7, #20
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr

080140c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80140c2:	b480      	push	{r7}
 80140c4:	b087      	sub	sp, #28
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140d4:	689b      	ldr	r3, [r3, #8]
 80140d6:	f003 0306 	and.w	r3, r3, #6
 80140da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d102      	bne.n	80140e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80140e2:	2300      	movs	r3, #0
 80140e4:	75fb      	strb	r3, [r7, #23]
 80140e6:	e00a      	b.n	80140fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2b02      	cmp	r3, #2
 80140ec:	d002      	beq.n	80140f4 <USB_GetDevSpeed+0x32>
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2b06      	cmp	r3, #6
 80140f2:	d102      	bne.n	80140fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80140f4:	2302      	movs	r3, #2
 80140f6:	75fb      	strb	r3, [r7, #23]
 80140f8:	e001      	b.n	80140fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80140fa:	230f      	movs	r3, #15
 80140fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80140fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014100:	4618      	mov	r0, r3
 8014102:	371c      	adds	r7, #28
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr

0801410c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801410c:	b480      	push	{r7}
 801410e:	b085      	sub	sp, #20
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	785b      	ldrb	r3, [r3, #1]
 8014124:	2b01      	cmp	r3, #1
 8014126:	d13a      	bne.n	801419e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801412e:	69da      	ldr	r2, [r3, #28]
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	f003 030f 	and.w	r3, r3, #15
 8014138:	2101      	movs	r1, #1
 801413a:	fa01 f303 	lsl.w	r3, r1, r3
 801413e:	b29b      	uxth	r3, r3
 8014140:	68f9      	ldr	r1, [r7, #12]
 8014142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014146:	4313      	orrs	r3, r2
 8014148:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	015a      	lsls	r2, r3, #5
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	4413      	add	r3, r2
 8014152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801415c:	2b00      	cmp	r3, #0
 801415e:	d155      	bne.n	801420c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	015a      	lsls	r2, r3, #5
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	4413      	add	r3, r2
 8014168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	78db      	ldrb	r3, [r3, #3]
 801417a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801417c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	059b      	lsls	r3, r3, #22
 8014182:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014184:	4313      	orrs	r3, r2
 8014186:	68ba      	ldr	r2, [r7, #8]
 8014188:	0151      	lsls	r1, r2, #5
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	440a      	add	r2, r1
 801418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801419a:	6013      	str	r3, [r2, #0]
 801419c:	e036      	b.n	801420c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141a4:	69da      	ldr	r2, [r3, #28]
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	f003 030f 	and.w	r3, r3, #15
 80141ae:	2101      	movs	r1, #1
 80141b0:	fa01 f303 	lsl.w	r3, r1, r3
 80141b4:	041b      	lsls	r3, r3, #16
 80141b6:	68f9      	ldr	r1, [r7, #12]
 80141b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141bc:	4313      	orrs	r3, r2
 80141be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	015a      	lsls	r2, r3, #5
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4413      	add	r3, r2
 80141c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d11a      	bne.n	801420c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	015a      	lsls	r2, r3, #5
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	4413      	add	r3, r2
 80141de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141e2:	681a      	ldr	r2, [r3, #0]
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	78db      	ldrb	r3, [r3, #3]
 80141f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141f2:	430b      	orrs	r3, r1
 80141f4:	4313      	orrs	r3, r2
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	0151      	lsls	r1, r2, #5
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	440a      	add	r2, r1
 80141fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801420a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801420c:	2300      	movs	r3, #0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3714      	adds	r7, #20
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr
	...

0801421c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b08a      	sub	sp, #40	; 0x28
 8014220:	af02      	add	r7, sp, #8
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	4613      	mov	r3, r2
 8014228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	785b      	ldrb	r3, [r3, #1]
 8014238:	2b01      	cmp	r3, #1
 801423a:	f040 815c 	bne.w	80144f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	695b      	ldr	r3, [r3, #20]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d132      	bne.n	80142ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	015a      	lsls	r2, r3, #5
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	4413      	add	r3, r2
 801424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014252:	691b      	ldr	r3, [r3, #16]
 8014254:	69ba      	ldr	r2, [r7, #24]
 8014256:	0151      	lsls	r1, r2, #5
 8014258:	69fa      	ldr	r2, [r7, #28]
 801425a:	440a      	add	r2, r1
 801425c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801426a:	69bb      	ldr	r3, [r7, #24]
 801426c:	015a      	lsls	r2, r3, #5
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	4413      	add	r3, r2
 8014272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014276:	691b      	ldr	r3, [r3, #16]
 8014278:	69ba      	ldr	r2, [r7, #24]
 801427a:	0151      	lsls	r1, r2, #5
 801427c:	69fa      	ldr	r2, [r7, #28]
 801427e:	440a      	add	r2, r1
 8014280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	015a      	lsls	r2, r3, #5
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	4413      	add	r3, r2
 8014292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014296:	691b      	ldr	r3, [r3, #16]
 8014298:	69ba      	ldr	r2, [r7, #24]
 801429a:	0151      	lsls	r1, r2, #5
 801429c:	69fa      	ldr	r2, [r7, #28]
 801429e:	440a      	add	r2, r1
 80142a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142a4:	0cdb      	lsrs	r3, r3, #19
 80142a6:	04db      	lsls	r3, r3, #19
 80142a8:	6113      	str	r3, [r2, #16]
 80142aa:	e074      	b.n	8014396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	015a      	lsls	r2, r3, #5
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	4413      	add	r3, r2
 80142b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	69ba      	ldr	r2, [r7, #24]
 80142bc:	0151      	lsls	r1, r2, #5
 80142be:	69fa      	ldr	r2, [r7, #28]
 80142c0:	440a      	add	r2, r1
 80142c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142c6:	0cdb      	lsrs	r3, r3, #19
 80142c8:	04db      	lsls	r3, r3, #19
 80142ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	015a      	lsls	r2, r3, #5
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	4413      	add	r3, r2
 80142d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	69ba      	ldr	r2, [r7, #24]
 80142dc:	0151      	lsls	r1, r2, #5
 80142de:	69fa      	ldr	r2, [r7, #28]
 80142e0:	440a      	add	r2, r1
 80142e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80142ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80142ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	015a      	lsls	r2, r3, #5
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	4413      	add	r3, r2
 80142f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142fc:	691a      	ldr	r2, [r3, #16]
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	6959      	ldr	r1, [r3, #20]
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	440b      	add	r3, r1
 8014308:	1e59      	subs	r1, r3, #1
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	689b      	ldr	r3, [r3, #8]
 801430e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014312:	04d9      	lsls	r1, r3, #19
 8014314:	4b9d      	ldr	r3, [pc, #628]	; (801458c <USB_EPStartXfer+0x370>)
 8014316:	400b      	ands	r3, r1
 8014318:	69b9      	ldr	r1, [r7, #24]
 801431a:	0148      	lsls	r0, r1, #5
 801431c:	69f9      	ldr	r1, [r7, #28]
 801431e:	4401      	add	r1, r0
 8014320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014324:	4313      	orrs	r3, r2
 8014326:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	015a      	lsls	r2, r3, #5
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	4413      	add	r3, r2
 8014330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014334:	691a      	ldr	r2, [r3, #16]
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	695b      	ldr	r3, [r3, #20]
 801433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801433e:	69b9      	ldr	r1, [r7, #24]
 8014340:	0148      	lsls	r0, r1, #5
 8014342:	69f9      	ldr	r1, [r7, #28]
 8014344:	4401      	add	r1, r0
 8014346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801434a:	4313      	orrs	r3, r2
 801434c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	78db      	ldrb	r3, [r3, #3]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d11f      	bne.n	8014396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	015a      	lsls	r2, r3, #5
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	4413      	add	r3, r2
 801435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	69ba      	ldr	r2, [r7, #24]
 8014366:	0151      	lsls	r1, r2, #5
 8014368:	69fa      	ldr	r2, [r7, #28]
 801436a:	440a      	add	r2, r1
 801436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	015a      	lsls	r2, r3, #5
 801437a:	69fb      	ldr	r3, [r7, #28]
 801437c:	4413      	add	r3, r2
 801437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014382:	691b      	ldr	r3, [r3, #16]
 8014384:	69ba      	ldr	r2, [r7, #24]
 8014386:	0151      	lsls	r1, r2, #5
 8014388:	69fa      	ldr	r2, [r7, #28]
 801438a:	440a      	add	r2, r1
 801438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014396:	79fb      	ldrb	r3, [r7, #7]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d14b      	bne.n	8014434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d009      	beq.n	80143b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	015a      	lsls	r2, r3, #5
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	4413      	add	r3, r2
 80143ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143b0:	461a      	mov	r2, r3
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	691b      	ldr	r3, [r3, #16]
 80143b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	78db      	ldrb	r3, [r3, #3]
 80143bc:	2b01      	cmp	r3, #1
 80143be:	d128      	bne.n	8014412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143c6:	689b      	ldr	r3, [r3, #8]
 80143c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d110      	bne.n	80143f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80143d0:	69bb      	ldr	r3, [r7, #24]
 80143d2:	015a      	lsls	r2, r3, #5
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	4413      	add	r3, r2
 80143d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	69ba      	ldr	r2, [r7, #24]
 80143e0:	0151      	lsls	r1, r2, #5
 80143e2:	69fa      	ldr	r2, [r7, #28]
 80143e4:	440a      	add	r2, r1
 80143e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143ee:	6013      	str	r3, [r2, #0]
 80143f0:	e00f      	b.n	8014412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	015a      	lsls	r2, r3, #5
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	4413      	add	r3, r2
 80143fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	69ba      	ldr	r2, [r7, #24]
 8014402:	0151      	lsls	r1, r2, #5
 8014404:	69fa      	ldr	r2, [r7, #28]
 8014406:	440a      	add	r2, r1
 8014408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014412:	69bb      	ldr	r3, [r7, #24]
 8014414:	015a      	lsls	r2, r3, #5
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	4413      	add	r3, r2
 801441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	69ba      	ldr	r2, [r7, #24]
 8014422:	0151      	lsls	r1, r2, #5
 8014424:	69fa      	ldr	r2, [r7, #28]
 8014426:	440a      	add	r2, r1
 8014428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801442c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014430:	6013      	str	r3, [r2, #0]
 8014432:	e12f      	b.n	8014694 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014434:	69bb      	ldr	r3, [r7, #24]
 8014436:	015a      	lsls	r2, r3, #5
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	4413      	add	r3, r2
 801443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	69ba      	ldr	r2, [r7, #24]
 8014444:	0151      	lsls	r1, r2, #5
 8014446:	69fa      	ldr	r2, [r7, #28]
 8014448:	440a      	add	r2, r1
 801444a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801444e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	78db      	ldrb	r3, [r3, #3]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d015      	beq.n	8014488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	695b      	ldr	r3, [r3, #20]
 8014460:	2b00      	cmp	r3, #0
 8014462:	f000 8117 	beq.w	8014694 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 030f 	and.w	r3, r3, #15
 8014476:	2101      	movs	r1, #1
 8014478:	fa01 f303 	lsl.w	r3, r1, r3
 801447c:	69f9      	ldr	r1, [r7, #28]
 801447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014482:	4313      	orrs	r3, r2
 8014484:	634b      	str	r3, [r1, #52]	; 0x34
 8014486:	e105      	b.n	8014694 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801448e:	689b      	ldr	r3, [r3, #8]
 8014490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014494:	2b00      	cmp	r3, #0
 8014496:	d110      	bne.n	80144ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	015a      	lsls	r2, r3, #5
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	4413      	add	r3, r2
 80144a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	69ba      	ldr	r2, [r7, #24]
 80144a8:	0151      	lsls	r1, r2, #5
 80144aa:	69fa      	ldr	r2, [r7, #28]
 80144ac:	440a      	add	r2, r1
 80144ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	e00f      	b.n	80144da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	015a      	lsls	r2, r3, #5
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	4413      	add	r3, r2
 80144c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	69ba      	ldr	r2, [r7, #24]
 80144ca:	0151      	lsls	r1, r2, #5
 80144cc:	69fa      	ldr	r2, [r7, #28]
 80144ce:	440a      	add	r2, r1
 80144d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	68d9      	ldr	r1, [r3, #12]
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	781a      	ldrb	r2, [r3, #0]
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	695b      	ldr	r3, [r3, #20]
 80144e6:	b298      	uxth	r0, r3
 80144e8:	79fb      	ldrb	r3, [r7, #7]
 80144ea:	9300      	str	r3, [sp, #0]
 80144ec:	4603      	mov	r3, r0
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f000 fa2b 	bl	801494a <USB_WritePacket>
 80144f4:	e0ce      	b.n	8014694 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	015a      	lsls	r2, r3, #5
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	4413      	add	r3, r2
 80144fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014502:	691b      	ldr	r3, [r3, #16]
 8014504:	69ba      	ldr	r2, [r7, #24]
 8014506:	0151      	lsls	r1, r2, #5
 8014508:	69fa      	ldr	r2, [r7, #28]
 801450a:	440a      	add	r2, r1
 801450c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014510:	0cdb      	lsrs	r3, r3, #19
 8014512:	04db      	lsls	r3, r3, #19
 8014514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	015a      	lsls	r2, r3, #5
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	4413      	add	r3, r2
 801451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014522:	691b      	ldr	r3, [r3, #16]
 8014524:	69ba      	ldr	r2, [r7, #24]
 8014526:	0151      	lsls	r1, r2, #5
 8014528:	69fa      	ldr	r2, [r7, #28]
 801452a:	440a      	add	r2, r1
 801452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014538:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	695b      	ldr	r3, [r3, #20]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d126      	bne.n	8014590 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	015a      	lsls	r2, r3, #5
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	4413      	add	r3, r2
 801454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801454e:	691a      	ldr	r2, [r3, #16]
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014558:	69b9      	ldr	r1, [r7, #24]
 801455a:	0148      	lsls	r0, r1, #5
 801455c:	69f9      	ldr	r1, [r7, #28]
 801455e:	4401      	add	r1, r0
 8014560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014564:	4313      	orrs	r3, r2
 8014566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	015a      	lsls	r2, r3, #5
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	4413      	add	r3, r2
 8014570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014574:	691b      	ldr	r3, [r3, #16]
 8014576:	69ba      	ldr	r2, [r7, #24]
 8014578:	0151      	lsls	r1, r2, #5
 801457a:	69fa      	ldr	r2, [r7, #28]
 801457c:	440a      	add	r2, r1
 801457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014586:	6113      	str	r3, [r2, #16]
 8014588:	e036      	b.n	80145f8 <USB_EPStartXfer+0x3dc>
 801458a:	bf00      	nop
 801458c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	695a      	ldr	r2, [r3, #20]
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	4413      	add	r3, r2
 801459a:	1e5a      	subs	r2, r3, #1
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	689b      	ldr	r3, [r3, #8]
 80145a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80145a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145b2:	691a      	ldr	r2, [r3, #16]
 80145b4:	8afb      	ldrh	r3, [r7, #22]
 80145b6:	04d9      	lsls	r1, r3, #19
 80145b8:	4b39      	ldr	r3, [pc, #228]	; (80146a0 <USB_EPStartXfer+0x484>)
 80145ba:	400b      	ands	r3, r1
 80145bc:	69b9      	ldr	r1, [r7, #24]
 80145be:	0148      	lsls	r0, r1, #5
 80145c0:	69f9      	ldr	r1, [r7, #28]
 80145c2:	4401      	add	r1, r0
 80145c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145c8:	4313      	orrs	r3, r2
 80145ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	015a      	lsls	r2, r3, #5
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	4413      	add	r3, r2
 80145d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d8:	691a      	ldr	r2, [r3, #16]
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	8af9      	ldrh	r1, [r7, #22]
 80145e0:	fb01 f303 	mul.w	r3, r1, r3
 80145e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145e8:	69b9      	ldr	r1, [r7, #24]
 80145ea:	0148      	lsls	r0, r1, #5
 80145ec:	69f9      	ldr	r1, [r7, #28]
 80145ee:	4401      	add	r1, r0
 80145f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145f4:	4313      	orrs	r3, r2
 80145f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80145f8:	79fb      	ldrb	r3, [r7, #7]
 80145fa:	2b01      	cmp	r3, #1
 80145fc:	d10d      	bne.n	801461a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d009      	beq.n	801461a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	68d9      	ldr	r1, [r3, #12]
 801460a:	69bb      	ldr	r3, [r7, #24]
 801460c:	015a      	lsls	r2, r3, #5
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	4413      	add	r3, r2
 8014612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014616:	460a      	mov	r2, r1
 8014618:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	78db      	ldrb	r3, [r3, #3]
 801461e:	2b01      	cmp	r3, #1
 8014620:	d128      	bne.n	8014674 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014628:	689b      	ldr	r3, [r3, #8]
 801462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801462e:	2b00      	cmp	r3, #0
 8014630:	d110      	bne.n	8014654 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014632:	69bb      	ldr	r3, [r7, #24]
 8014634:	015a      	lsls	r2, r3, #5
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	4413      	add	r3, r2
 801463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	69ba      	ldr	r2, [r7, #24]
 8014642:	0151      	lsls	r1, r2, #5
 8014644:	69fa      	ldr	r2, [r7, #28]
 8014646:	440a      	add	r2, r1
 8014648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801464c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014650:	6013      	str	r3, [r2, #0]
 8014652:	e00f      	b.n	8014674 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	69ba      	ldr	r2, [r7, #24]
 8014664:	0151      	lsls	r1, r2, #5
 8014666:	69fa      	ldr	r2, [r7, #28]
 8014668:	440a      	add	r2, r1
 801466a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014672:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014674:	69bb      	ldr	r3, [r7, #24]
 8014676:	015a      	lsls	r2, r3, #5
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	4413      	add	r3, r2
 801467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	69ba      	ldr	r2, [r7, #24]
 8014684:	0151      	lsls	r1, r2, #5
 8014686:	69fa      	ldr	r2, [r7, #28]
 8014688:	440a      	add	r2, r1
 801468a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801468e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014694:	2300      	movs	r3, #0
}
 8014696:	4618      	mov	r0, r3
 8014698:	3720      	adds	r7, #32
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	1ff80000 	.word	0x1ff80000

080146a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b087      	sub	sp, #28
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	4613      	mov	r3, r2
 80146b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	785b      	ldrb	r3, [r3, #1]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	f040 80cd 	bne.w	8014860 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d132      	bne.n	8014734 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	015a      	lsls	r2, r3, #5
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	4413      	add	r3, r2
 80146d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	693a      	ldr	r2, [r7, #16]
 80146de:	0151      	lsls	r1, r2, #5
 80146e0:	697a      	ldr	r2, [r7, #20]
 80146e2:	440a      	add	r2, r1
 80146e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80146ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80146f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	015a      	lsls	r2, r3, #5
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	4413      	add	r3, r2
 80146fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	693a      	ldr	r2, [r7, #16]
 8014702:	0151      	lsls	r1, r2, #5
 8014704:	697a      	ldr	r2, [r7, #20]
 8014706:	440a      	add	r2, r1
 8014708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801470c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	015a      	lsls	r2, r3, #5
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	4413      	add	r3, r2
 801471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801471e:	691b      	ldr	r3, [r3, #16]
 8014720:	693a      	ldr	r2, [r7, #16]
 8014722:	0151      	lsls	r1, r2, #5
 8014724:	697a      	ldr	r2, [r7, #20]
 8014726:	440a      	add	r2, r1
 8014728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801472c:	0cdb      	lsrs	r3, r3, #19
 801472e:	04db      	lsls	r3, r3, #19
 8014730:	6113      	str	r3, [r2, #16]
 8014732:	e04e      	b.n	80147d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	015a      	lsls	r2, r3, #5
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	4413      	add	r3, r2
 801473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014740:	691b      	ldr	r3, [r3, #16]
 8014742:	693a      	ldr	r2, [r7, #16]
 8014744:	0151      	lsls	r1, r2, #5
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	440a      	add	r2, r1
 801474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801474e:	0cdb      	lsrs	r3, r3, #19
 8014750:	04db      	lsls	r3, r3, #19
 8014752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	015a      	lsls	r2, r3, #5
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	4413      	add	r3, r2
 801475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014760:	691b      	ldr	r3, [r3, #16]
 8014762:	693a      	ldr	r2, [r7, #16]
 8014764:	0151      	lsls	r1, r2, #5
 8014766:	697a      	ldr	r2, [r7, #20]
 8014768:	440a      	add	r2, r1
 801476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801476e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014776:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	695a      	ldr	r2, [r3, #20]
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	689b      	ldr	r3, [r3, #8]
 8014780:	429a      	cmp	r2, r3
 8014782:	d903      	bls.n	801478c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	689a      	ldr	r2, [r3, #8]
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	015a      	lsls	r2, r3, #5
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	4413      	add	r3, r2
 8014794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014798:	691b      	ldr	r3, [r3, #16]
 801479a:	693a      	ldr	r2, [r7, #16]
 801479c:	0151      	lsls	r1, r2, #5
 801479e:	697a      	ldr	r2, [r7, #20]
 80147a0:	440a      	add	r2, r1
 80147a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	015a      	lsls	r2, r3, #5
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	4413      	add	r3, r2
 80147b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147b8:	691a      	ldr	r2, [r3, #16]
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	695b      	ldr	r3, [r3, #20]
 80147be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147c2:	6939      	ldr	r1, [r7, #16]
 80147c4:	0148      	lsls	r0, r1, #5
 80147c6:	6979      	ldr	r1, [r7, #20]
 80147c8:	4401      	add	r1, r0
 80147ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80147ce:	4313      	orrs	r3, r2
 80147d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80147d2:	79fb      	ldrb	r3, [r7, #7]
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d11e      	bne.n	8014816 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d009      	beq.n	80147f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	015a      	lsls	r2, r3, #5
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	4413      	add	r3, r2
 80147e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147ec:	461a      	mov	r2, r3
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	691b      	ldr	r3, [r3, #16]
 80147f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	015a      	lsls	r2, r3, #5
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	4413      	add	r3, r2
 80147fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	693a      	ldr	r2, [r7, #16]
 8014804:	0151      	lsls	r1, r2, #5
 8014806:	697a      	ldr	r2, [r7, #20]
 8014808:	440a      	add	r2, r1
 801480a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801480e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014812:	6013      	str	r3, [r2, #0]
 8014814:	e092      	b.n	801493c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	015a      	lsls	r2, r3, #5
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	4413      	add	r3, r2
 801481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	693a      	ldr	r2, [r7, #16]
 8014826:	0151      	lsls	r1, r2, #5
 8014828:	697a      	ldr	r2, [r7, #20]
 801482a:	440a      	add	r2, r1
 801482c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014834:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	695b      	ldr	r3, [r3, #20]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d07e      	beq.n	801493c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	f003 030f 	and.w	r3, r3, #15
 801484e:	2101      	movs	r1, #1
 8014850:	fa01 f303 	lsl.w	r3, r1, r3
 8014854:	6979      	ldr	r1, [r7, #20]
 8014856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801485a:	4313      	orrs	r3, r2
 801485c:	634b      	str	r3, [r1, #52]	; 0x34
 801485e:	e06d      	b.n	801493c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	015a      	lsls	r2, r3, #5
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	4413      	add	r3, r2
 8014868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	693a      	ldr	r2, [r7, #16]
 8014870:	0151      	lsls	r1, r2, #5
 8014872:	697a      	ldr	r2, [r7, #20]
 8014874:	440a      	add	r2, r1
 8014876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801487a:	0cdb      	lsrs	r3, r3, #19
 801487c:	04db      	lsls	r3, r3, #19
 801487e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	015a      	lsls	r2, r3, #5
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	4413      	add	r3, r2
 8014888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	693a      	ldr	r2, [r7, #16]
 8014890:	0151      	lsls	r1, r2, #5
 8014892:	697a      	ldr	r2, [r7, #20]
 8014894:	440a      	add	r2, r1
 8014896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801489a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801489e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80148a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	695b      	ldr	r3, [r3, #20]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d003      	beq.n	80148b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	689a      	ldr	r2, [r3, #8]
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	015a      	lsls	r2, r3, #5
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	4413      	add	r3, r2
 80148bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c0:	691b      	ldr	r3, [r3, #16]
 80148c2:	693a      	ldr	r2, [r7, #16]
 80148c4:	0151      	lsls	r1, r2, #5
 80148c6:	697a      	ldr	r2, [r7, #20]
 80148c8:	440a      	add	r2, r1
 80148ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80148d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	015a      	lsls	r2, r3, #5
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	4413      	add	r3, r2
 80148dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e0:	691a      	ldr	r2, [r3, #16]
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	689b      	ldr	r3, [r3, #8]
 80148e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80148ea:	6939      	ldr	r1, [r7, #16]
 80148ec:	0148      	lsls	r0, r1, #5
 80148ee:	6979      	ldr	r1, [r7, #20]
 80148f0:	4401      	add	r1, r0
 80148f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80148f6:	4313      	orrs	r3, r2
 80148f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80148fa:	79fb      	ldrb	r3, [r7, #7]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d10d      	bne.n	801491c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	68db      	ldr	r3, [r3, #12]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d009      	beq.n	801491c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	68d9      	ldr	r1, [r3, #12]
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	015a      	lsls	r2, r3, #5
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	4413      	add	r3, r2
 8014914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014918:	460a      	mov	r2, r1
 801491a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	015a      	lsls	r2, r3, #5
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	4413      	add	r3, r2
 8014924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	693a      	ldr	r2, [r7, #16]
 801492c:	0151      	lsls	r1, r2, #5
 801492e:	697a      	ldr	r2, [r7, #20]
 8014930:	440a      	add	r2, r1
 8014932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801493a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801493c:	2300      	movs	r3, #0
}
 801493e:	4618      	mov	r0, r3
 8014940:	371c      	adds	r7, #28
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr

0801494a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801494a:	b480      	push	{r7}
 801494c:	b089      	sub	sp, #36	; 0x24
 801494e:	af00      	add	r7, sp, #0
 8014950:	60f8      	str	r0, [r7, #12]
 8014952:	60b9      	str	r1, [r7, #8]
 8014954:	4611      	mov	r1, r2
 8014956:	461a      	mov	r2, r3
 8014958:	460b      	mov	r3, r1
 801495a:	71fb      	strb	r3, [r7, #7]
 801495c:	4613      	mov	r3, r2
 801495e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8014968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801496c:	2b00      	cmp	r3, #0
 801496e:	d11a      	bne.n	80149a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014970:	88bb      	ldrh	r3, [r7, #4]
 8014972:	3303      	adds	r3, #3
 8014974:	089b      	lsrs	r3, r3, #2
 8014976:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014978:	2300      	movs	r3, #0
 801497a:	61bb      	str	r3, [r7, #24]
 801497c:	e00f      	b.n	801499e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801497e:	79fb      	ldrb	r3, [r7, #7]
 8014980:	031a      	lsls	r2, r3, #12
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	4413      	add	r3, r2
 8014986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801498a:	461a      	mov	r2, r3
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	3304      	adds	r3, #4
 8014996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014998:	69bb      	ldr	r3, [r7, #24]
 801499a:	3301      	adds	r3, #1
 801499c:	61bb      	str	r3, [r7, #24]
 801499e:	69ba      	ldr	r2, [r7, #24]
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d3eb      	bcc.n	801497e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80149a6:	2300      	movs	r3, #0
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3724      	adds	r7, #36	; 0x24
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b089      	sub	sp, #36	; 0x24
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	4613      	mov	r3, r2
 80149c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80149ca:	88fb      	ldrh	r3, [r7, #6]
 80149cc:	3303      	adds	r3, #3
 80149ce:	089b      	lsrs	r3, r3, #2
 80149d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80149d2:	2300      	movs	r3, #0
 80149d4:	61bb      	str	r3, [r7, #24]
 80149d6:	e00b      	b.n	80149f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	3304      	adds	r3, #4
 80149e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	3301      	adds	r3, #1
 80149ee:	61bb      	str	r3, [r7, #24]
 80149f0:	69ba      	ldr	r2, [r7, #24]
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d3ef      	bcc.n	80149d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80149f8:	69fb      	ldr	r3, [r7, #28]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3724      	adds	r7, #36	; 0x24
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr

08014a06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a06:	b480      	push	{r7}
 8014a08:	b085      	sub	sp, #20
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	6078      	str	r0, [r7, #4]
 8014a0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	785b      	ldrb	r3, [r3, #1]
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d12c      	bne.n	8014a7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	015a      	lsls	r2, r3, #5
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	4413      	add	r3, r2
 8014a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	db12      	blt.n	8014a5a <USB_EPSetStall+0x54>
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00f      	beq.n	8014a5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	015a      	lsls	r2, r3, #5
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	4413      	add	r3, r2
 8014a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	68ba      	ldr	r2, [r7, #8]
 8014a4a:	0151      	lsls	r1, r2, #5
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	440a      	add	r2, r1
 8014a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014a58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	015a      	lsls	r2, r3, #5
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	4413      	add	r3, r2
 8014a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	0151      	lsls	r1, r2, #5
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	440a      	add	r2, r1
 8014a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014a78:	6013      	str	r3, [r2, #0]
 8014a7a:	e02b      	b.n	8014ad4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	015a      	lsls	r2, r3, #5
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	4413      	add	r3, r2
 8014a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	db12      	blt.n	8014ab4 <USB_EPSetStall+0xae>
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00f      	beq.n	8014ab4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	015a      	lsls	r2, r3, #5
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	0151      	lsls	r1, r2, #5
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	440a      	add	r2, r1
 8014aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	015a      	lsls	r2, r3, #5
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	4413      	add	r3, r2
 8014abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	0151      	lsls	r1, r2, #5
 8014ac6:	68fa      	ldr	r2, [r7, #12]
 8014ac8:	440a      	add	r2, r1
 8014aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014ad4:	2300      	movs	r3, #0
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3714      	adds	r7, #20
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr

08014ae2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014ae2:	b480      	push	{r7}
 8014ae4:	b085      	sub	sp, #20
 8014ae6:	af00      	add	r7, sp, #0
 8014ae8:	6078      	str	r0, [r7, #4]
 8014aea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	785b      	ldrb	r3, [r3, #1]
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d128      	bne.n	8014b50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	015a      	lsls	r2, r3, #5
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	4413      	add	r3, r2
 8014b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	68ba      	ldr	r2, [r7, #8]
 8014b0e:	0151      	lsls	r1, r2, #5
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	440a      	add	r2, r1
 8014b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	78db      	ldrb	r3, [r3, #3]
 8014b22:	2b03      	cmp	r3, #3
 8014b24:	d003      	beq.n	8014b2e <USB_EPClearStall+0x4c>
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	78db      	ldrb	r3, [r3, #3]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d138      	bne.n	8014ba0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	015a      	lsls	r2, r3, #5
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	4413      	add	r3, r2
 8014b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68ba      	ldr	r2, [r7, #8]
 8014b3e:	0151      	lsls	r1, r2, #5
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	440a      	add	r2, r1
 8014b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b4c:	6013      	str	r3, [r2, #0]
 8014b4e:	e027      	b.n	8014ba0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	015a      	lsls	r2, r3, #5
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	4413      	add	r3, r2
 8014b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	68ba      	ldr	r2, [r7, #8]
 8014b60:	0151      	lsls	r1, r2, #5
 8014b62:	68fa      	ldr	r2, [r7, #12]
 8014b64:	440a      	add	r2, r1
 8014b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	78db      	ldrb	r3, [r3, #3]
 8014b74:	2b03      	cmp	r3, #3
 8014b76:	d003      	beq.n	8014b80 <USB_EPClearStall+0x9e>
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	78db      	ldrb	r3, [r3, #3]
 8014b7c:	2b02      	cmp	r3, #2
 8014b7e:	d10f      	bne.n	8014ba0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	015a      	lsls	r2, r3, #5
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	4413      	add	r3, r2
 8014b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	68ba      	ldr	r2, [r7, #8]
 8014b90:	0151      	lsls	r1, r2, #5
 8014b92:	68fa      	ldr	r2, [r7, #12]
 8014b94:	440a      	add	r2, r1
 8014b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014ba0:	2300      	movs	r3, #0
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3714      	adds	r7, #20
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bac:	4770      	bx	lr

08014bae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014bae:	b480      	push	{r7}
 8014bb0:	b085      	sub	sp, #20
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014bcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014bd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	78fb      	ldrb	r3, [r7, #3]
 8014bdc:	011b      	lsls	r3, r3, #4
 8014bde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014be2:	68f9      	ldr	r1, [r7, #12]
 8014be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014be8:	4313      	orrs	r3, r2
 8014bea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3714      	adds	r7, #20
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf8:	4770      	bx	lr

08014bfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014bfa:	b480      	push	{r7}
 8014bfc:	b085      	sub	sp, #20
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c14:	f023 0303 	bic.w	r3, r3, #3
 8014c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	68fa      	ldr	r2, [r7, #12]
 8014c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c28:	f023 0302 	bic.w	r3, r3, #2
 8014c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3714      	adds	r7, #20
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr

08014c3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b085      	sub	sp, #20
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c56:	f023 0303 	bic.w	r3, r3, #3
 8014c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c6a:	f043 0302 	orr.w	r3, r3, #2
 8014c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b085      	sub	sp, #20
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	695b      	ldr	r3, [r3, #20]
 8014c8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	699b      	ldr	r3, [r3, #24]
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	4013      	ands	r3, r2
 8014c94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014c96:	68fb      	ldr	r3, [r7, #12]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3714      	adds	r7, #20
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cb6:	699b      	ldr	r3, [r3, #24]
 8014cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cc0:	69db      	ldr	r3, [r3, #28]
 8014cc2:	68ba      	ldr	r2, [r7, #8]
 8014cc4:	4013      	ands	r3, r2
 8014cc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	0c1b      	lsrs	r3, r3, #16
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3714      	adds	r7, #20
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cea:	699b      	ldr	r3, [r3, #24]
 8014cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	68ba      	ldr	r2, [r7, #8]
 8014cf8:	4013      	ands	r3, r2
 8014cfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	b29b      	uxth	r3, r3
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3714      	adds	r7, #20
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b085      	sub	sp, #20
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014d1c:	78fb      	ldrb	r3, [r7, #3]
 8014d1e:	015a      	lsls	r2, r3, #5
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	4413      	add	r3, r2
 8014d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d32:	695b      	ldr	r3, [r3, #20]
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	4013      	ands	r3, r2
 8014d38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d3a:	68bb      	ldr	r3, [r7, #8]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b087      	sub	sp, #28
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	460b      	mov	r3, r1
 8014d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014d6c:	78fb      	ldrb	r3, [r7, #3]
 8014d6e:	f003 030f 	and.w	r3, r3, #15
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	fa22 f303 	lsr.w	r3, r2, r3
 8014d78:	01db      	lsls	r3, r3, #7
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	693a      	ldr	r2, [r7, #16]
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014d82:	78fb      	ldrb	r3, [r7, #3]
 8014d84:	015a      	lsls	r2, r3, #5
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	4413      	add	r3, r2
 8014d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d8e:	689b      	ldr	r3, [r3, #8]
 8014d90:	693a      	ldr	r2, [r7, #16]
 8014d92:	4013      	ands	r3, r2
 8014d94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d96:	68bb      	ldr	r3, [r7, #8]
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	371c      	adds	r7, #28
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr

08014da4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	695b      	ldr	r3, [r3, #20]
 8014db0:	f003 0301 	and.w	r3, r3, #1
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	370c      	adds	r7, #12
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr

08014dc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014dde:	f023 0307 	bic.w	r3, r3, #7
 8014de2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014df6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014df8:	2300      	movs	r3, #0
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3714      	adds	r7, #20
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e04:	4770      	bx	lr
	...

08014e08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b087      	sub	sp, #28
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	460b      	mov	r3, r1
 8014e12:	607a      	str	r2, [r7, #4]
 8014e14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	333c      	adds	r3, #60	; 0x3c
 8014e1e:	3304      	adds	r3, #4
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	4a26      	ldr	r2, [pc, #152]	; (8014ec0 <USB_EP0_OutStart+0xb8>)
 8014e28:	4293      	cmp	r3, r2
 8014e2a:	d90a      	bls.n	8014e42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e3c:	d101      	bne.n	8014e42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	e037      	b.n	8014eb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e48:	461a      	mov	r2, r3
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e54:	691b      	ldr	r3, [r3, #16]
 8014e56:	697a      	ldr	r2, [r7, #20]
 8014e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e68:	691b      	ldr	r3, [r3, #16]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e70:	f043 0318 	orr.w	r3, r3, #24
 8014e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e7c:	691b      	ldr	r3, [r3, #16]
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014e88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014e8a:	7afb      	ldrb	r3, [r7, #11]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d10f      	bne.n	8014eb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e96:	461a      	mov	r2, r3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	697a      	ldr	r2, [r7, #20]
 8014ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014eaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014eae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	371c      	adds	r7, #28
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr
 8014ebe:	bf00      	nop
 8014ec0:	4f54300a 	.word	0x4f54300a

08014ec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b085      	sub	sp, #20
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	60fb      	str	r3, [r7, #12]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	4a13      	ldr	r2, [pc, #76]	; (8014f28 <USB_CoreReset+0x64>)
 8014eda:	4293      	cmp	r3, r2
 8014edc:	d901      	bls.n	8014ee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014ede:	2303      	movs	r3, #3
 8014ee0:	e01b      	b.n	8014f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	daf2      	bge.n	8014ed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014eea:	2300      	movs	r3, #0
 8014eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	691b      	ldr	r3, [r3, #16]
 8014ef2:	f043 0201 	orr.w	r2, r3, #1
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	3301      	adds	r3, #1
 8014efe:	60fb      	str	r3, [r7, #12]
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	4a09      	ldr	r2, [pc, #36]	; (8014f28 <USB_CoreReset+0x64>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d901      	bls.n	8014f0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f08:	2303      	movs	r3, #3
 8014f0a:	e006      	b.n	8014f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	691b      	ldr	r3, [r3, #16]
 8014f10:	f003 0301 	and.w	r3, r3, #1
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d0f0      	beq.n	8014efa <USB_CoreReset+0x36>

  return HAL_OK;
 8014f18:	2300      	movs	r3, #0
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3714      	adds	r7, #20
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	00030d40 	.word	0x00030d40

08014f2c <__NVIC_SystemReset>:
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8014f30:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014f34:	4b05      	ldr	r3, [pc, #20]	; (8014f4c <__NVIC_SystemReset+0x20>)
 8014f36:	68db      	ldr	r3, [r3, #12]
 8014f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014f3c:	4903      	ldr	r1, [pc, #12]	; (8014f4c <__NVIC_SystemReset+0x20>)
 8014f3e:	4b04      	ldr	r3, [pc, #16]	; (8014f50 <__NVIC_SystemReset+0x24>)
 8014f40:	4313      	orrs	r3, r2
 8014f42:	60cb      	str	r3, [r1, #12]
 8014f44:	f3bf 8f4f 	dsb	sy
    __NOP();
 8014f48:	bf00      	nop
 8014f4a:	e7fd      	b.n	8014f48 <__NVIC_SystemReset+0x1c>
 8014f4c:	e000ed00 	.word	0xe000ed00
 8014f50:	05fa0004 	.word	0x05fa0004

08014f54 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8014f60:	f240 401c 	movw	r0, #1052	; 0x41c
 8014f64:	f002 fc76 	bl	8017854 <malloc>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d105      	bne.n	8014f7e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2200      	movs	r2, #0
 8014f76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014f7a:	2302      	movs	r3, #2
 8014f7c:	e03e      	b.n	8014ffc <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	4a1c      	ldr	r2, [pc, #112]	; (8015004 <USBD_DFU_Init+0xb0>)
 8014f92:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2202      	movs	r2, #2
 8014fb2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2202      	movs	r2, #2
 8014fda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	4798      	blx	r3
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d001      	beq.n	8014ffa <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8014ff6:	2303      	movs	r3, #3
 8014ff8:	e000      	b.n	8014ffc <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	08008000 	.word	0x08008000

08015008 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	460b      	mov	r3, r1
 8015012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801501a:	2b00      	cmp	r3, #0
 801501c:	d101      	bne.n	8015022 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 801501e:	2302      	movs	r3, #2
 8015020:	e027      	b.n	8015072 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015028:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2200      	movs	r2, #0
 801502e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2200      	movs	r2, #0
 8015036:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2202      	movs	r2, #2
 801503e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2200      	movs	r2, #0
 8015046:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2202      	movs	r2, #2
 801504e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015058:	689b      	ldr	r3, [r3, #8]
 801505a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015062:	4618      	mov	r0, r3
 8015064:	f002 fbfe 	bl	8017864 <free>
  pdev->pClassData = NULL;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8015070:	2300      	movs	r3, #0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3710      	adds	r7, #16
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
	...

0801507c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b088      	sub	sp, #32
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801508c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801508e:	2300      	movs	r3, #0
 8015090:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8015092:	2300      	movs	r3, #0
 8015094:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8015096:	2300      	movs	r3, #0
 8015098:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 801509a:	2300      	movs	r3, #0
 801509c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d03f      	beq.n	801512a <USBD_DFU_Setup+0xae>
 80150aa:	2b20      	cmp	r3, #32
 80150ac:	f040 80c3 	bne.w	8015236 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	785b      	ldrb	r3, [r3, #1]
 80150b4:	2b06      	cmp	r3, #6
 80150b6:	d830      	bhi.n	801511a <USBD_DFU_Setup+0x9e>
 80150b8:	a201      	add	r2, pc, #4	; (adr r2, 80150c0 <USBD_DFU_Setup+0x44>)
 80150ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150be:	bf00      	nop
 80150c0:	08015111 	.word	0x08015111
 80150c4:	080150dd 	.word	0x080150dd
 80150c8:	080150e7 	.word	0x080150e7
 80150cc:	080150f1 	.word	0x080150f1
 80150d0:	080150f9 	.word	0x080150f9
 80150d4:	08015101 	.word	0x08015101
 80150d8:	08015109 	.word	0x08015109
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 80150dc:	6839      	ldr	r1, [r7, #0]
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 fa62 	bl	80155a8 <DFU_Download>
      break;
 80150e4:	e020      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 80150e6:	6839      	ldr	r1, [r7, #0]
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f000 fac7 	bl	801567c <DFU_Upload>
      break;
 80150ee:	e01b      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 fb9b 	bl	801582c <DFU_GetStatus>
      break;
 80150f6:	e017      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f000 fc49 	bl	8015990 <DFU_ClearStatus>
      break;
 80150fe:	e013      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f000 fc95 	bl	8015a30 <DFU_GetState>
      break;
 8015106:	e00f      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f000 fca5 	bl	8015a58 <DFU_Abort>
      break;
 801510e:	e00b      	b.n	8015128 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8015110:	6839      	ldr	r1, [r7, #0]
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 f9e8 	bl	80154e8 <DFU_Detach>
      break;
 8015118:	e006      	b.n	8015128 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 801511a:	6839      	ldr	r1, [r7, #0]
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f001 fda9 	bl	8016c74 <USBD_CtlError>
      ret = USBD_FAIL;
 8015122:	2303      	movs	r3, #3
 8015124:	77fb      	strb	r3, [r7, #31]
      break;
 8015126:	bf00      	nop
    }
    break;
 8015128:	e08c      	b.n	8015244 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	785b      	ldrb	r3, [r3, #1]
 801512e:	2b0b      	cmp	r3, #11
 8015130:	d878      	bhi.n	8015224 <USBD_DFU_Setup+0x1a8>
 8015132:	a201      	add	r2, pc, #4	; (adr r2, 8015138 <USBD_DFU_Setup+0xbc>)
 8015134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015138:	08015169 	.word	0x08015169
 801513c:	08015233 	.word	0x08015233
 8015140:	08015225 	.word	0x08015225
 8015144:	08015225 	.word	0x08015225
 8015148:	08015225 	.word	0x08015225
 801514c:	08015225 	.word	0x08015225
 8015150:	08015191 	.word	0x08015191
 8015154:	08015225 	.word	0x08015225
 8015158:	08015225 	.word	0x08015225
 801515c:	08015225 	.word	0x08015225
 8015160:	080151bb 	.word	0x080151bb
 8015164:	080151e5 	.word	0x080151e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801516e:	2b03      	cmp	r3, #3
 8015170:	d107      	bne.n	8015182 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015172:	f107 030e 	add.w	r3, r7, #14
 8015176:	2202      	movs	r2, #2
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f001 fdeb 	bl	8016d56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015180:	e058      	b.n	8015234 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8015182:	6839      	ldr	r1, [r7, #0]
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f001 fd75 	bl	8016c74 <USBD_CtlError>
        ret = USBD_FAIL;
 801518a:	2303      	movs	r3, #3
 801518c:	77fb      	strb	r3, [r7, #31]
      break;
 801518e:	e051      	b.n	8015234 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	885b      	ldrh	r3, [r3, #2]
 8015194:	0a1b      	lsrs	r3, r3, #8
 8015196:	b29b      	uxth	r3, r3
 8015198:	2b21      	cmp	r3, #33	; 0x21
 801519a:	d107      	bne.n	80151ac <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 801519c:	4b2c      	ldr	r3, [pc, #176]	; (8015250 <USBD_DFU_Setup+0x1d4>)
 801519e:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	88db      	ldrh	r3, [r3, #6]
 80151a4:	2b09      	cmp	r3, #9
 80151a6:	bf28      	it	cs
 80151a8:	2309      	movcs	r3, #9
 80151aa:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 80151ac:	8afb      	ldrh	r3, [r7, #22]
 80151ae:	461a      	mov	r2, r3
 80151b0:	69b9      	ldr	r1, [r7, #24]
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f001 fdcf 	bl	8016d56 <USBD_CtlSendData>
      break;
 80151b8:	e03c      	b.n	8015234 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151c0:	2b03      	cmp	r3, #3
 80151c2:	d108      	bne.n	80151d6 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80151ca:	2201      	movs	r2, #1
 80151cc:	4619      	mov	r1, r3
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f001 fdc1 	bl	8016d56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80151d4:	e02e      	b.n	8015234 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80151d6:	6839      	ldr	r1, [r7, #0]
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f001 fd4b 	bl	8016c74 <USBD_CtlError>
        ret = USBD_FAIL;
 80151de:	2303      	movs	r3, #3
 80151e0:	77fb      	strb	r3, [r7, #31]
      break;
 80151e2:	e027      	b.n	8015234 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	885b      	ldrh	r3, [r3, #2]
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d113      	bne.n	8015216 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151f4:	2b03      	cmp	r3, #3
 80151f6:	d107      	bne.n	8015208 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	885b      	ldrh	r3, [r3, #2]
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	461a      	mov	r2, r3
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015206:	e015      	b.n	8015234 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 8015208:	6839      	ldr	r1, [r7, #0]
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f001 fd32 	bl	8016c74 <USBD_CtlError>
          ret = USBD_FAIL;
 8015210:	2303      	movs	r3, #3
 8015212:	77fb      	strb	r3, [r7, #31]
      break;
 8015214:	e00e      	b.n	8015234 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8015216:	6839      	ldr	r1, [r7, #0]
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f001 fd2b 	bl	8016c74 <USBD_CtlError>
        ret = USBD_FAIL;
 801521e:	2303      	movs	r3, #3
 8015220:	77fb      	strb	r3, [r7, #31]
      break;
 8015222:	e007      	b.n	8015234 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8015224:	6839      	ldr	r1, [r7, #0]
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f001 fd24 	bl	8016c74 <USBD_CtlError>
      ret = USBD_FAIL;
 801522c:	2303      	movs	r3, #3
 801522e:	77fb      	strb	r3, [r7, #31]
      break;
 8015230:	e000      	b.n	8015234 <USBD_DFU_Setup+0x1b8>
      break;
 8015232:	bf00      	nop
    }
    break;
 8015234:	e006      	b.n	8015244 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 8015236:	6839      	ldr	r1, [r7, #0]
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f001 fd1b 	bl	8016c74 <USBD_CtlError>
    ret = USBD_FAIL;
 801523e:	2303      	movs	r3, #3
 8015240:	77fb      	strb	r3, [r7, #31]
    break;
 8015242:	bf00      	nop
  }

  return (uint8_t)ret;
 8015244:	7ffb      	ldrb	r3, [r7, #31]
}
 8015246:	4618      	mov	r0, r3
 8015248:	3720      	adds	r7, #32
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	2000005a 	.word	0x2000005a

08015254 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	221b      	movs	r2, #27
 8015260:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8015262:	4b03      	ldr	r3, [pc, #12]	; (8015270 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8015264:	4618      	mov	r0, r3
 8015266:	370c      	adds	r7, #12
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	20000048 	.word	0x20000048

08015274 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	370c      	adds	r7, #12
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr
	...

0801528c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b088      	sub	sp, #32
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801529a:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80152a2:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80152aa:	2b04      	cmp	r3, #4
 80152ac:	f040 80bc 	bne.w	8015428 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d17a      	bne.n	80153b0 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	f000 8092 	beq.w	80153ea <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152cc:	2b05      	cmp	r3, #5
 80152ce:	d15c      	bne.n	801538a <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	2b21      	cmp	r3, #33	; 0x21
 80152d6:	d124      	bne.n	8015322 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	785b      	ldrb	r3, [r3, #1]
 80152dc:	461a      	mov	r2, r3
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	789b      	ldrb	r3, [r3, #2]
 80152ee:	021b      	lsls	r3, r3, #8
 80152f0:	441a      	add	r2, r3
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80152f8:	69fb      	ldr	r3, [r7, #28]
 80152fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	78db      	ldrb	r3, [r3, #3]
 8015302:	041b      	lsls	r3, r3, #16
 8015304:	441a      	add	r2, r3
 8015306:	69fb      	ldr	r3, [r7, #28]
 8015308:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	791b      	ldrb	r3, [r3, #4]
 8015316:	061b      	lsls	r3, r3, #24
 8015318:	441a      	add	r2, r3
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8015320:	e063      	b.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	2b41      	cmp	r3, #65	; 0x41
 8015328:	d15f      	bne.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	785b      	ldrb	r3, [r3, #1]
 801532e:	461a      	mov	r2, r3
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8015336:	69fb      	ldr	r3, [r7, #28]
 8015338:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	789b      	ldrb	r3, [r3, #2]
 8015340:	021b      	lsls	r3, r3, #8
 8015342:	441a      	add	r2, r3
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	78db      	ldrb	r3, [r3, #3]
 8015354:	041b      	lsls	r3, r3, #16
 8015356:	441a      	add	r2, r3
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	791b      	ldrb	r3, [r3, #4]
 8015368:	061b      	lsls	r3, r3, #24
 801536a:	441a      	add	r2, r3
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	68db      	ldr	r3, [r3, #12]
 8015376:	69fa      	ldr	r2, [r7, #28]
 8015378:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 801537c:	4610      	mov	r0, r2
 801537e:	4798      	blx	r3
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	d031      	beq.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8015386:	2303      	movs	r3, #3
 8015388:	e057      	b.n	801543a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	2200      	movs	r2, #0
 801538e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	2200      	movs	r2, #0
 8015396:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 801539a:	2300      	movs	r3, #0
 801539c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 801539e:	2301      	movs	r3, #1
 80153a0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80153a2:	f107 030c 	add.w	r3, r7, #12
 80153a6:	4619      	mov	r1, r3
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f001 fc63 	bl	8016c74 <USBD_CtlError>
 80153ae:	e01c      	b.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d917      	bls.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80153c0:	4b20      	ldr	r3, [pc, #128]	; (8015444 <USBD_DFU_EP0_TxReady+0x1b8>)
 80153c2:	4413      	add	r3, r2
 80153c4:	029a      	lsls	r2, r3, #10
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80153cc:	4413      	add	r3, r2
 80153ce:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80153d0:	69bb      	ldr	r3, [r7, #24]
 80153d2:	691b      	ldr	r3, [r3, #16]
 80153d4:	69f8      	ldr	r0, [r7, #28]
 80153d6:	6979      	ldr	r1, [r7, #20]
 80153d8:	69fa      	ldr	r2, [r7, #28]
 80153da:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80153de:	4798      	blx	r3
 80153e0:	4603      	mov	r3, r0
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d001      	beq.n	80153ea <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 80153e6:	2303      	movs	r3, #3
 80153e8:	e027      	b.n	801543a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	2200      	movs	r2, #0
 80153f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80153fa:	69fb      	ldr	r3, [r7, #28]
 80153fc:	2203      	movs	r2, #3
 80153fe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015402:	69fb      	ldr	r3, [r7, #28]
 8015404:	2200      	movs	r2, #0
 8015406:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	2200      	movs	r2, #0
 801540e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	2200      	movs	r2, #0
 8015416:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015426:	e007      	b.n	8015438 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801542e:	2b07      	cmp	r3, #7
 8015430:	d102      	bne.n	8015438 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f000 fb5e 	bl	8015af4 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 8015438:	2300      	movs	r3, #0
}
 801543a:	4618      	mov	r0, r3
 801543c:	3720      	adds	r7, #32
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	003ffffe 	.word	0x003ffffe

08015448 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	370c      	adds	r7, #12
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr
	...

08015460 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	220a      	movs	r2, #10
 801546c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 801546e:	4b03      	ldr	r3, [pc, #12]	; (801547c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8015470:	4618      	mov	r0, r3
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	20000064 	.word	0x20000064

08015480 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b086      	sub	sp, #24
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	460b      	mov	r3, r1
 801548a:	607a      	str	r2, [r7, #4]
 801548c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015494:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8015496:	7afb      	ldrb	r3, [r7, #11]
 8015498:	2b06      	cmp	r3, #6
 801549a:	d808      	bhi.n	80154ae <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	4905      	ldr	r1, [pc, #20]	; (80154b8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80154a4:	4618      	mov	r0, r3
 80154a6:	f001 fbf6 	bl	8016c96 <USBD_GetString>
    return USBD_StrDesc;
 80154aa:	4b03      	ldr	r3, [pc, #12]	; (80154b8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80154ac:	e000      	b.n	80154b0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80154ae:	2300      	movs	r3, #0
  }
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3718      	adds	r7, #24
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	20000170 	.word	0x20000170

080154bc <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d101      	bne.n	80154d0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80154cc:	2303      	movs	r3, #3
 80154ce:	e004      	b.n	80154da <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr
	...

080154e8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80154f8:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015500:	2b02      	cmp	r3, #2
 8015502:	d013      	beq.n	801552c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801550a:	2b03      	cmp	r3, #3
 801550c:	d00e      	beq.n	801552c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015514:	2b05      	cmp	r3, #5
 8015516:	d009      	beq.n	801552c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801551e:	2b06      	cmp	r3, #6
 8015520:	d004      	beq.n	801552c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015528:	2b09      	cmp	r3, #9
 801552a:	d125      	bne.n	8015578 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2202      	movs	r2, #2
 8015530:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2200      	movs	r2, #0
 8015538:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2200      	movs	r2, #0
 8015540:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2200      	movs	r2, #0
 8015548:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2200      	movs	r2, #0
 8015550:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	2200      	movs	r2, #0
 8015564:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2200      	movs	r2, #0
 801556c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2200      	movs	r2, #0
 8015574:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8015578:	4b0a      	ldr	r3, [pc, #40]	; (80155a4 <DFU_Detach+0xbc>)
 801557a:	7d5b      	ldrb	r3, [r3, #21]
 801557c:	f003 0310 	and.w	r3, r3, #16
 8015580:	2b00      	cmp	r3, #0
 8015582:	d006      	beq.n	8015592 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f000 fb62 	bl	8015c4e <USBD_Stop>
    (void)USBD_Start(pdev);
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 fb53 	bl	8015c36 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8015590:	e004      	b.n	801559c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	885b      	ldrh	r3, [r3, #2]
 8015596:	4618      	mov	r0, r3
 8015598:	f7fb fb50 	bl	8010c3c <HAL_Delay>
}
 801559c:	bf00      	nop
 801559e:	3710      	adds	r7, #16
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	20000048 	.word	0x20000048

080155a8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b084      	sub	sp, #16
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80155b8:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	88db      	ldrh	r3, [r3, #6]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d02d      	beq.n	801561e <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80155c8:	2b02      	cmp	r3, #2
 80155ca:	d004      	beq.n	80155d6 <DFU_Download+0x2e>
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80155d2:	2b05      	cmp	r3, #5
 80155d4:	d11e      	bne.n	8015614 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	885b      	ldrh	r3, [r3, #2]
 80155da:	461a      	mov	r2, r3
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	88db      	ldrh	r3, [r3, #6]
 80155e6:	461a      	mov	r2, r3
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2203      	movs	r2, #3
 80155f2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8015602:	68f9      	ldr	r1, [r7, #12]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801560a:	461a      	mov	r2, r3
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f001 fbce 	bl	8016dae <USBD_CtlPrepareRx>
 8015612:	e02e      	b.n	8015672 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8015614:	6839      	ldr	r1, [r7, #0]
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f001 fb2c 	bl	8016c74 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 801561c:	e029      	b.n	8015672 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015624:	2b05      	cmp	r3, #5
 8015626:	d004      	beq.n	8015632 <DFU_Download+0x8a>
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801562e:	2b02      	cmp	r3, #2
 8015630:	d11a      	bne.n	8015668 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	2201      	movs	r2, #1
 8015636:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2206      	movs	r2, #6
 801563e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2200      	movs	r2, #0
 8015646:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	2200      	movs	r2, #0
 801564e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2200      	movs	r2, #0
 8015656:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015666:	e004      	b.n	8015672 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 8015668:	6839      	ldr	r1, [r7, #0]
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f001 fb02 	bl	8016c74 <USBD_CtlError>
}
 8015670:	e7ff      	b.n	8015672 <DFU_Download+0xca>
 8015672:	bf00      	nop
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
	...

0801567c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b086      	sub	sp, #24
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801568c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015694:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	88db      	ldrh	r3, [r3, #6]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 80a9 	beq.w	80157f2 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	d005      	beq.n	80156b6 <DFU_Upload+0x3a>
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80156b0:	2b09      	cmp	r3, #9
 80156b2:	f040 8091 	bne.w	80157d8 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	885b      	ldrh	r3, [r3, #2]
 80156ba:	461a      	mov	r2, r3
 80156bc:	697b      	ldr	r3, [r7, #20]
 80156be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	88db      	ldrh	r3, [r3, #6]
 80156c6:	461a      	mov	r2, r3
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d12c      	bne.n	8015732 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156de:	2b03      	cmp	r3, #3
 80156e0:	d901      	bls.n	80156e6 <DFU_Upload+0x6a>
 80156e2:	2202      	movs	r2, #2
 80156e4:	e000      	b.n	80156e8 <DFU_Upload+0x6c>
 80156e6:	2209      	movs	r2, #9
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	2200      	movs	r2, #0
 80156fa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	2200      	movs	r2, #0
 8015702:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	2200      	movs	r2, #0
 8015716:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	2221      	movs	r2, #33	; 0x21
 801571c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	2241      	movs	r2, #65	; 0x41
 8015722:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	2203      	movs	r2, #3
 8015728:	4619      	mov	r1, r3
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f001 fb13 	bl	8016d56 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8015730:	e076      	b.n	8015820 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015738:	2b01      	cmp	r3, #1
 801573a:	d932      	bls.n	80157a2 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2209      	movs	r2, #9
 8015740:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	2200      	movs	r2, #0
 8015748:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	2200      	movs	r2, #0
 8015750:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	2200      	movs	r2, #0
 8015758:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801576e:	4b2e      	ldr	r3, [pc, #184]	; (8015828 <DFU_Upload+0x1ac>)
 8015770:	4413      	add	r3, r2
 8015772:	029a      	lsls	r2, r3, #10
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 801577a:	4413      	add	r3, r2
 801577c:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	695b      	ldr	r3, [r3, #20]
 8015782:	68f8      	ldr	r0, [r7, #12]
 8015784:	6979      	ldr	r1, [r7, #20]
 8015786:	697a      	ldr	r2, [r7, #20]
 8015788:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 801578c:	4798      	blx	r3
 801578e:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015796:	461a      	mov	r2, r3
 8015798:	68b9      	ldr	r1, [r7, #8]
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f001 fadb 	bl	8016d56 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80157a0:	e03e      	b.n	8015820 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	220f      	movs	r2, #15
 80157a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	2200      	movs	r2, #0
 80157ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	2200      	movs	r2, #0
 80157b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	2200      	movs	r2, #0
 80157be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80157ce:	6839      	ldr	r1, [r7, #0]
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f001 fa4f 	bl	8016c74 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80157d6:	e023      	b.n	8015820 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	2200      	movs	r2, #0
 80157dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	2200      	movs	r2, #0
 80157e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f001 fa42 	bl	8016c74 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80157f0:	e016      	b.n	8015820 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	2202      	movs	r2, #2
 80157f6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	2200      	movs	r2, #0
 80157fe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	2200      	movs	r2, #0
 8015806:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	2200      	movs	r2, #0
 801580e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 801581e:	e7ff      	b.n	8015820 <DFU_Upload+0x1a4>
 8015820:	bf00      	nop
 8015822:	3718      	adds	r7, #24
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}
 8015828:	003ffffe 	.word	0x003ffffe

0801582c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801583a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015842:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801584a:	2b03      	cmp	r3, #3
 801584c:	d002      	beq.n	8015854 <DFU_GetStatus+0x28>
 801584e:	2b06      	cmp	r3, #6
 8015850:	d051      	beq.n	80158f6 <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8015852:	e08e      	b.n	8015972 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801585a:	2b00      	cmp	r3, #0
 801585c:	d034      	beq.n	80158c8 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2204      	movs	r2, #4
 8015862:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2200      	movs	r2, #0
 801586a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2200      	movs	r2, #0
 8015872:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	2200      	movs	r2, #0
 801587a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10e      	bne.n	80158b2 <DFU_GetStatus+0x86>
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	2b41      	cmp	r3, #65	; 0x41
 801589a:	d10a      	bne.n	80158b2 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	699b      	ldr	r3, [r3, #24]
 80158a0:	68fa      	ldr	r2, [r7, #12]
 80158a2:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80158a6:	68fa      	ldr	r2, [r7, #12]
 80158a8:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80158ac:	2100      	movs	r1, #0
 80158ae:	4798      	blx	r3
    break;
 80158b0:	e05f      	b.n	8015972 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	699b      	ldr	r3, [r3, #24]
 80158b6:	68fa      	ldr	r2, [r7, #12]
 80158b8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80158bc:	68fa      	ldr	r2, [r7, #12]
 80158be:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80158c2:	2101      	movs	r1, #1
 80158c4:	4798      	blx	r3
    break;
 80158c6:	e054      	b.n	8015972 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2205      	movs	r2, #5
 80158cc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2200      	movs	r2, #0
 80158d4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2200      	movs	r2, #0
 80158dc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2200      	movs	r2, #0
 80158e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 80158f4:	e03d      	b.n	8015972 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d116      	bne.n	801592e <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2207      	movs	r2, #7
 8015904:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2201      	movs	r2, #1
 801590c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2200      	movs	r2, #0
 8015914:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2200      	movs	r2, #0
 801591c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 801592c:	e020      	b.n	8015970 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8015934:	2b00      	cmp	r3, #0
 8015936:	d11b      	bne.n	8015970 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8015938:	4b14      	ldr	r3, [pc, #80]	; (801598c <DFU_GetStatus+0x160>)
 801593a:	7d1b      	ldrb	r3, [r3, #20]
 801593c:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8015940:	2b00      	cmp	r3, #0
 8015942:	d015      	beq.n	8015970 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2202      	movs	r2, #2
 8015948:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2200      	movs	r2, #0
 8015950:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	2200      	movs	r2, #0
 8015958:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2200      	movs	r2, #0
 8015960:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8015970:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8015978:	2206      	movs	r2, #6
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f001 f9ea 	bl	8016d56 <USBD_CtlSendData>
}
 8015982:	bf00      	nop
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	20000048 	.word	0x20000048

08015990 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8015990:	b480      	push	{r7}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801599e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80159a6:	2b0a      	cmp	r3, #10
 80159a8:	d11e      	bne.n	80159e8 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	2202      	movs	r2, #2
 80159ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	2200      	movs	r2, #0
 80159b6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2200      	movs	r2, #0
 80159be:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2200      	movs	r2, #0
 80159c6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2200      	movs	r2, #0
 80159ce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2200      	movs	r2, #0
 80159e2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 80159e6:	e01d      	b.n	8015a24 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	220a      	movs	r2, #10
 80159ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	220e      	movs	r2, #14
 80159f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2200      	movs	r2, #0
 80159fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2200      	movs	r2, #0
 8015a04:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8015a24:	bf00      	nop
 8015a26:	3714      	adds	r7, #20
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2e:	4770      	bx	lr

08015a30 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015a3e:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8015a46:	2201      	movs	r2, #1
 8015a48:	4619      	mov	r1, r3
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f001 f983 	bl	8016d56 <USBD_CtlSendData>
}
 8015a50:	bf00      	nop
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015a66:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015a6e:	2b02      	cmp	r3, #2
 8015a70:	d013      	beq.n	8015a9a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015a78:	2b03      	cmp	r3, #3
 8015a7a:	d00e      	beq.n	8015a9a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015a82:	2b05      	cmp	r3, #5
 8015a84:	d009      	beq.n	8015a9a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015a8c:	2b06      	cmp	r3, #6
 8015a8e:	d004      	beq.n	8015a9a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015a96:	2b09      	cmp	r3, #9
 8015a98:	d125      	bne.n	8015ae6 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2202      	movs	r2, #2
 8015a9e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	2200      	movs	r2, #0
 8015aae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2200      	movs	r2, #0
 8015abe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8015ae6:	bf00      	nop
 8015ae8:	3714      	adds	r7, #20
 8015aea:	46bd      	mov	sp, r7
 8015aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af0:	4770      	bx	lr
	...

08015af4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b084      	sub	sp, #16
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015b02:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2200      	movs	r2, #0
 8015b08:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8015b0c:	4b1d      	ldr	r3, [pc, #116]	; (8015b84 <DFU_Leave+0x90>)
 8015b0e:	7d1b      	ldrb	r3, [r3, #20]
 8015b10:	f003 0304 	and.w	r3, r3, #4
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d016      	beq.n	8015b46 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	2206      	movs	r2, #6
 8015b1c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	2200      	movs	r2, #0
 8015b24:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2200      	movs	r2, #0
 8015b34:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8015b44:	e01a      	b.n	8015b7c <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	2208      	movs	r2, #8
 8015b4a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2200      	movs	r2, #0
 8015b52:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2200      	movs	r2, #0
 8015b62:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 f86b 	bl	8015c4e <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8015b78:	f7ff f9d8 	bl	8014f2c <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	20000048 	.word	0x20000048

08015b88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b086      	sub	sp, #24
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	4613      	mov	r3, r2
 8015b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d101      	bne.n	8015ba0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015b9c:	2303      	movs	r3, #3
 8015b9e:	e025      	b.n	8015bec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	2200      	movs	r2, #0
 8015bae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d003      	beq.n	8015bc4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d003      	beq.n	8015bd2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	68ba      	ldr	r2, [r7, #8]
 8015bce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	79fa      	ldrb	r2, [r7, #7]
 8015bde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f001 fc1b 	bl	801741c <USBD_LL_Init>
 8015be6:	4603      	mov	r3, r0
 8015be8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3718      	adds	r7, #24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d101      	bne.n	8015c0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015c08:	2303      	movs	r3, #3
 8015c0a:	e010      	b.n	8015c2e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c1c:	f107 020e 	add.w	r2, r7, #14
 8015c20:	4610      	mov	r0, r2
 8015c22:	4798      	blx	r3
 8015c24:	4602      	mov	r2, r0
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3710      	adds	r7, #16
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f001 fc3c 	bl	80174bc <USBD_LL_Start>
 8015c44:	4603      	mov	r3, r0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3708      	adds	r7, #8
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015c4e:	b580      	push	{r7, lr}
 8015c50:	b084      	sub	sp, #16
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d009      	beq.n	8015c74 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	6852      	ldr	r2, [r2, #4]
 8015c6c:	b2d2      	uxtb	r2, r2
 8015c6e:	4611      	mov	r1, r2
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d003      	beq.n	8015c86 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2200      	movs	r2, #0
 8015c82:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	f001 fc33 	bl	80174f2 <USBD_LL_Stop>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	73fb      	strb	r3, [r7, #15]

  return ret;
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3710      	adds	r7, #16
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}

08015c9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015c9a:	b480      	push	{r7}
 8015c9c:	b083      	sub	sp, #12
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ca2:	2300      	movs	r3, #0
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b084      	sub	sp, #16
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	460b      	mov	r3, r1
 8015cba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015cbc:	2303      	movs	r3, #3
 8015cbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d009      	beq.n	8015cde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	78fa      	ldrb	r2, [r7, #3]
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	4798      	blx	r3
 8015cda:	4603      	mov	r3, r0
 8015cdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3710      	adds	r7, #16
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d007      	beq.n	8015d0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	78fa      	ldrb	r2, [r7, #3]
 8015d08:	4611      	mov	r1, r2
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	4798      	blx	r3
  }

  return USBD_OK;
 8015d0e:	2300      	movs	r3, #0
}
 8015d10:	4618      	mov	r0, r3
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015d28:	6839      	ldr	r1, [r7, #0]
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f000 ff68 	bl	8016c00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2201      	movs	r2, #1
 8015d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015d3e:	461a      	mov	r2, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015d4c:	f003 031f 	and.w	r3, r3, #31
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d00e      	beq.n	8015d72 <USBD_LL_SetupStage+0x5a>
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d302      	bcc.n	8015d5e <USBD_LL_SetupStage+0x46>
 8015d58:	2b02      	cmp	r3, #2
 8015d5a:	d014      	beq.n	8015d86 <USBD_LL_SetupStage+0x6e>
 8015d5c:	e01d      	b.n	8015d9a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015d64:	4619      	mov	r1, r3
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 fa18 	bl	801619c <USBD_StdDevReq>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8015d70:	e020      	b.n	8015db4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015d78:	4619      	mov	r1, r3
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fa7c 	bl	8016278 <USBD_StdItfReq>
 8015d80:	4603      	mov	r3, r0
 8015d82:	73fb      	strb	r3, [r7, #15]
      break;
 8015d84:	e016      	b.n	8015db4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f000 fab8 	bl	8016304 <USBD_StdEPReq>
 8015d94:	4603      	mov	r3, r0
 8015d96:	73fb      	strb	r3, [r7, #15]
      break;
 8015d98:	e00c      	b.n	8015db4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	4619      	mov	r1, r3
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f001 fbe3 	bl	8017574 <USBD_LL_StallEP>
 8015dae:	4603      	mov	r3, r0
 8015db0:	73fb      	strb	r3, [r7, #15]
      break;
 8015db2:	bf00      	nop
  }

  return ret;
 8015db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}

08015dbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b086      	sub	sp, #24
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	60f8      	str	r0, [r7, #12]
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	607a      	str	r2, [r7, #4]
 8015dca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015dcc:	7afb      	ldrb	r3, [r7, #11]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d137      	bne.n	8015e42 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015dd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015de0:	2b03      	cmp	r3, #3
 8015de2:	d14a      	bne.n	8015e7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	689a      	ldr	r2, [r3, #8]
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d913      	bls.n	8015e18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	689a      	ldr	r2, [r3, #8]
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	68db      	ldr	r3, [r3, #12]
 8015df8:	1ad2      	subs	r2, r2, r3
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	68da      	ldr	r2, [r3, #12]
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	689b      	ldr	r3, [r3, #8]
 8015e06:	4293      	cmp	r3, r2
 8015e08:	bf28      	it	cs
 8015e0a:	4613      	movcs	r3, r2
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	6879      	ldr	r1, [r7, #4]
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f000 ffe9 	bl	8016de8 <USBD_CtlContinueRx>
 8015e16:	e030      	b.n	8015e7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e1e:	691b      	ldr	r3, [r3, #16]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00a      	beq.n	8015e3a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015e2a:	2b03      	cmp	r3, #3
 8015e2c:	d105      	bne.n	8015e3a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	68f8      	ldr	r0, [r7, #12]
 8015e38:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f000 ffe5 	bl	8016e0a <USBD_CtlSendStatus>
 8015e40:	e01b      	b.n	8015e7a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e48:	699b      	ldr	r3, [r3, #24]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d013      	beq.n	8015e76 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8015e54:	2b03      	cmp	r3, #3
 8015e56:	d10e      	bne.n	8015e76 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e5e:	699b      	ldr	r3, [r3, #24]
 8015e60:	7afa      	ldrb	r2, [r7, #11]
 8015e62:	4611      	mov	r1, r2
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	4798      	blx	r3
 8015e68:	4603      	mov	r3, r0
 8015e6a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015e6c:	7dfb      	ldrb	r3, [r7, #23]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d003      	beq.n	8015e7a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8015e72:	7dfb      	ldrb	r3, [r7, #23]
 8015e74:	e002      	b.n	8015e7c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015e76:	2303      	movs	r3, #3
 8015e78:	e000      	b.n	8015e7c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	460b      	mov	r3, r1
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015e92:	7afb      	ldrb	r3, [r7, #11]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d16a      	bne.n	8015f6e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	3314      	adds	r3, #20
 8015e9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015ea4:	2b02      	cmp	r3, #2
 8015ea6:	d155      	bne.n	8015f54 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	689a      	ldr	r2, [r3, #8]
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	d914      	bls.n	8015ede <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	689a      	ldr	r2, [r3, #8]
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	1ad2      	subs	r2, r2, r3
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	689b      	ldr	r3, [r3, #8]
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	6879      	ldr	r1, [r7, #4]
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f000 ff5e 	bl	8016d8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f001 fbf6 	bl	80176c8 <USBD_LL_PrepareReceive>
 8015edc:	e03a      	b.n	8015f54 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	68da      	ldr	r2, [r3, #12]
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	689b      	ldr	r3, [r3, #8]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d11c      	bne.n	8015f24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	685a      	ldr	r2, [r3, #4]
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d316      	bcc.n	8015f24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	685a      	ldr	r2, [r3, #4]
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d20f      	bcs.n	8015f24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015f04:	2200      	movs	r2, #0
 8015f06:	2100      	movs	r1, #0
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f000 ff3f 	bl	8016d8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2200      	movs	r2, #0
 8015f12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015f16:	2300      	movs	r3, #0
 8015f18:	2200      	movs	r2, #0
 8015f1a:	2100      	movs	r1, #0
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f001 fbd3 	bl	80176c8 <USBD_LL_PrepareReceive>
 8015f22:	e017      	b.n	8015f54 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d00a      	beq.n	8015f46 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015f36:	2b03      	cmp	r3, #3
 8015f38:	d105      	bne.n	8015f46 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f40:	68db      	ldr	r3, [r3, #12]
 8015f42:	68f8      	ldr	r0, [r7, #12]
 8015f44:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f46:	2180      	movs	r1, #128	; 0x80
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f001 fb13 	bl	8017574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015f4e:	68f8      	ldr	r0, [r7, #12]
 8015f50:	f000 ff6e 	bl	8016e30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015f5a:	2b01      	cmp	r3, #1
 8015f5c:	d123      	bne.n	8015fa6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015f5e:	68f8      	ldr	r0, [r7, #12]
 8015f60:	f7ff fe9b 	bl	8015c9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2200      	movs	r2, #0
 8015f68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015f6c:	e01b      	b.n	8015fa6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f74:	695b      	ldr	r3, [r3, #20]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d013      	beq.n	8015fa2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8015f80:	2b03      	cmp	r3, #3
 8015f82:	d10e      	bne.n	8015fa2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f8a:	695b      	ldr	r3, [r3, #20]
 8015f8c:	7afa      	ldrb	r2, [r7, #11]
 8015f8e:	4611      	mov	r1, r2
 8015f90:	68f8      	ldr	r0, [r7, #12]
 8015f92:	4798      	blx	r3
 8015f94:	4603      	mov	r3, r0
 8015f96:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015f98:	7dfb      	ldrb	r3, [r7, #23]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d003      	beq.n	8015fa6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015f9e:	7dfb      	ldrb	r3, [r7, #23]
 8015fa0:	e002      	b.n	8015fa8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015fa2:	2303      	movs	r3, #3
 8015fa4:	e000      	b.n	8015fa8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015fa6:	2300      	movs	r3, #0
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3718      	adds	r7, #24
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}

08015fb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2201      	movs	r2, #1
 8015fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d009      	beq.n	8015ff4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	6852      	ldr	r2, [r2, #4]
 8015fec:	b2d2      	uxtb	r2, r2
 8015fee:	4611      	mov	r1, r2
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ff4:	2340      	movs	r3, #64	; 0x40
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	2100      	movs	r1, #0
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f001 fa94 	bl	8017528 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2201      	movs	r2, #1
 8016004:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2240      	movs	r2, #64	; 0x40
 801600c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016010:	2340      	movs	r3, #64	; 0x40
 8016012:	2200      	movs	r2, #0
 8016014:	2180      	movs	r1, #128	; 0x80
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f001 fa86 	bl	8017528 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2201      	movs	r2, #1
 8016020:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2240      	movs	r2, #64	; 0x40
 8016026:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016028:	2300      	movs	r3, #0
}
 801602a:	4618      	mov	r0, r3
 801602c:	3708      	adds	r7, #8
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}

08016032 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016032:	b480      	push	{r7}
 8016034:	b083      	sub	sp, #12
 8016036:	af00      	add	r7, sp, #0
 8016038:	6078      	str	r0, [r7, #4]
 801603a:	460b      	mov	r3, r1
 801603c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	78fa      	ldrb	r2, [r7, #3]
 8016042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016044:	2300      	movs	r3, #0
}
 8016046:	4618      	mov	r0, r3
 8016048:	370c      	adds	r7, #12
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr

08016052 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016052:	b480      	push	{r7}
 8016054:	b083      	sub	sp, #12
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2204      	movs	r2, #4
 801606a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	370c      	adds	r7, #12
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr

0801607c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801608a:	2b04      	cmp	r3, #4
 801608c:	d105      	bne.n	801609a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801609a:	2300      	movs	r3, #0
}
 801609c:	4618      	mov	r0, r3
 801609e:	370c      	adds	r7, #12
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160b6:	2b03      	cmp	r3, #3
 80160b8:	d10b      	bne.n	80160d2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160c0:	69db      	ldr	r3, [r3, #28]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d005      	beq.n	80160d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160cc:	69db      	ldr	r3, [r3, #28]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80160d2:	2300      	movs	r3, #0
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3708      	adds	r7, #8
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80160dc:	b480      	push	{r7}
 80160de:	b083      	sub	sp, #12
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	460b      	mov	r3, r1
 80160e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80160e8:	2300      	movs	r3, #0
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	370c      	adds	r7, #12
 80160ee:	46bd      	mov	sp, r7
 80160f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f4:	4770      	bx	lr

080160f6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80160f6:	b480      	push	{r7}
 80160f8:	b083      	sub	sp, #12
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	6078      	str	r0, [r7, #4]
 80160fe:	460b      	mov	r3, r1
 8016100:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8016102:	2300      	movs	r3, #0
}
 8016104:	4618      	mov	r0, r3
 8016106:	370c      	adds	r7, #12
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr

08016110 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016118:	2300      	movs	r3, #0
}
 801611a:	4618      	mov	r0, r3
 801611c:	370c      	adds	r7, #12
 801611e:	46bd      	mov	sp, r7
 8016120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016124:	4770      	bx	lr

08016126 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016126:	b580      	push	{r7, lr}
 8016128:	b082      	sub	sp, #8
 801612a:	af00      	add	r7, sp, #0
 801612c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2201      	movs	r2, #1
 8016132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801613c:	2b00      	cmp	r3, #0
 801613e:	d009      	beq.n	8016154 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	6852      	ldr	r2, [r2, #4]
 801614c:	b2d2      	uxtb	r2, r2
 801614e:	4611      	mov	r1, r2
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	4798      	blx	r3
  }

  return USBD_OK;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801615e:	b480      	push	{r7}
 8016160:	b087      	sub	sp, #28
 8016162:	af00      	add	r7, sp, #0
 8016164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	3301      	adds	r3, #1
 8016174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801617c:	8a3b      	ldrh	r3, [r7, #16]
 801617e:	021b      	lsls	r3, r3, #8
 8016180:	b21a      	sxth	r2, r3
 8016182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016186:	4313      	orrs	r3, r2
 8016188:	b21b      	sxth	r3, r3
 801618a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801618c:	89fb      	ldrh	r3, [r7, #14]
}
 801618e:	4618      	mov	r0, r3
 8016190:	371c      	adds	r7, #28
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
	...

0801619c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80161b2:	2b20      	cmp	r3, #32
 80161b4:	d004      	beq.n	80161c0 <USBD_StdDevReq+0x24>
 80161b6:	2b40      	cmp	r3, #64	; 0x40
 80161b8:	d002      	beq.n	80161c0 <USBD_StdDevReq+0x24>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d00a      	beq.n	80161d4 <USBD_StdDevReq+0x38>
 80161be:	e050      	b.n	8016262 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161c6:	689b      	ldr	r3, [r3, #8]
 80161c8:	6839      	ldr	r1, [r7, #0]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	4798      	blx	r3
 80161ce:	4603      	mov	r3, r0
 80161d0:	73fb      	strb	r3, [r7, #15]
    break;
 80161d2:	e04b      	b.n	801626c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	785b      	ldrb	r3, [r3, #1]
 80161d8:	2b09      	cmp	r3, #9
 80161da:	d83c      	bhi.n	8016256 <USBD_StdDevReq+0xba>
 80161dc:	a201      	add	r2, pc, #4	; (adr r2, 80161e4 <USBD_StdDevReq+0x48>)
 80161de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161e2:	bf00      	nop
 80161e4:	08016239 	.word	0x08016239
 80161e8:	0801624d 	.word	0x0801624d
 80161ec:	08016257 	.word	0x08016257
 80161f0:	08016243 	.word	0x08016243
 80161f4:	08016257 	.word	0x08016257
 80161f8:	08016217 	.word	0x08016217
 80161fc:	0801620d 	.word	0x0801620d
 8016200:	08016257 	.word	0x08016257
 8016204:	0801622f 	.word	0x0801622f
 8016208:	08016221 	.word	0x08016221
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801620c:	6839      	ldr	r1, [r7, #0]
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 f9ce 	bl	80165b0 <USBD_GetDescriptor>
      break;
 8016214:	e024      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8016216:	6839      	ldr	r1, [r7, #0]
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 fb6f 	bl	80168fc <USBD_SetAddress>
      break;
 801621e:	e01f      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8016220:	6839      	ldr	r1, [r7, #0]
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f000 fbac 	bl	8016980 <USBD_SetConfig>
 8016228:	4603      	mov	r3, r0
 801622a:	73fb      	strb	r3, [r7, #15]
      break;
 801622c:	e018      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 fc49 	bl	8016ac8 <USBD_GetConfig>
      break;
 8016236:	e013      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8016238:	6839      	ldr	r1, [r7, #0]
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 fc78 	bl	8016b30 <USBD_GetStatus>
      break;
 8016240:	e00e      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f000 fca6 	bl	8016b96 <USBD_SetFeature>
      break;
 801624a:	e009      	b.n	8016260 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801624c:	6839      	ldr	r1, [r7, #0]
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fcb5 	bl	8016bbe <USBD_ClrFeature>
      break;
 8016254:	e004      	b.n	8016260 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8016256:	6839      	ldr	r1, [r7, #0]
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f000 fd0b 	bl	8016c74 <USBD_CtlError>
      break;
 801625e:	bf00      	nop
    }
    break;
 8016260:	e004      	b.n	801626c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8016262:	6839      	ldr	r1, [r7, #0]
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f000 fd05 	bl	8016c74 <USBD_CtlError>
    break;
 801626a:	bf00      	nop
  }

  return ret;
 801626c:	7bfb      	ldrb	r3, [r7, #15]
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop

08016278 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b084      	sub	sp, #16
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016282:	2300      	movs	r3, #0
 8016284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801628e:	2b20      	cmp	r3, #32
 8016290:	d003      	beq.n	801629a <USBD_StdItfReq+0x22>
 8016292:	2b40      	cmp	r3, #64	; 0x40
 8016294:	d001      	beq.n	801629a <USBD_StdItfReq+0x22>
 8016296:	2b00      	cmp	r3, #0
 8016298:	d12a      	bne.n	80162f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162a0:	3b01      	subs	r3, #1
 80162a2:	2b02      	cmp	r3, #2
 80162a4:	d81d      	bhi.n	80162e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	889b      	ldrh	r3, [r3, #4]
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	2b01      	cmp	r3, #1
 80162ae:	d813      	bhi.n	80162d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162b6:	689b      	ldr	r3, [r3, #8]
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	4798      	blx	r3
 80162be:	4603      	mov	r3, r0
 80162c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	88db      	ldrh	r3, [r3, #6]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d110      	bne.n	80162ec <USBD_StdItfReq+0x74>
 80162ca:	7bfb      	ldrb	r3, [r7, #15]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d10d      	bne.n	80162ec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 fd9a 	bl	8016e0a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80162d6:	e009      	b.n	80162ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80162d8:	6839      	ldr	r1, [r7, #0]
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f000 fcca 	bl	8016c74 <USBD_CtlError>
      break;
 80162e0:	e004      	b.n	80162ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80162e2:	6839      	ldr	r1, [r7, #0]
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f000 fcc5 	bl	8016c74 <USBD_CtlError>
      break;
 80162ea:	e000      	b.n	80162ee <USBD_StdItfReq+0x76>
      break;
 80162ec:	bf00      	nop
    }
    break;
 80162ee:	e004      	b.n	80162fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80162f0:	6839      	ldr	r1, [r7, #0]
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 fcbe 	bl	8016c74 <USBD_CtlError>
    break;
 80162f8:	bf00      	nop
  }

  return ret;
 80162fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3710      	adds	r7, #16
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}

08016304 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b084      	sub	sp, #16
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801630e:	2300      	movs	r3, #0
 8016310:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	889b      	ldrh	r3, [r3, #4]
 8016316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016320:	2b20      	cmp	r3, #32
 8016322:	d004      	beq.n	801632e <USBD_StdEPReq+0x2a>
 8016324:	2b40      	cmp	r3, #64	; 0x40
 8016326:	d002      	beq.n	801632e <USBD_StdEPReq+0x2a>
 8016328:	2b00      	cmp	r3, #0
 801632a:	d00a      	beq.n	8016342 <USBD_StdEPReq+0x3e>
 801632c:	e135      	b.n	801659a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016334:	689b      	ldr	r3, [r3, #8]
 8016336:	6839      	ldr	r1, [r7, #0]
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	4798      	blx	r3
 801633c:	4603      	mov	r3, r0
 801633e:	73fb      	strb	r3, [r7, #15]
    break;
 8016340:	e130      	b.n	80165a4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	785b      	ldrb	r3, [r3, #1]
 8016346:	2b01      	cmp	r3, #1
 8016348:	d03e      	beq.n	80163c8 <USBD_StdEPReq+0xc4>
 801634a:	2b03      	cmp	r3, #3
 801634c:	d002      	beq.n	8016354 <USBD_StdEPReq+0x50>
 801634e:	2b00      	cmp	r3, #0
 8016350:	d077      	beq.n	8016442 <USBD_StdEPReq+0x13e>
 8016352:	e11c      	b.n	801658e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801635a:	2b02      	cmp	r3, #2
 801635c:	d002      	beq.n	8016364 <USBD_StdEPReq+0x60>
 801635e:	2b03      	cmp	r3, #3
 8016360:	d015      	beq.n	801638e <USBD_StdEPReq+0x8a>
 8016362:	e02b      	b.n	80163bc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016364:	7bbb      	ldrb	r3, [r7, #14]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00c      	beq.n	8016384 <USBD_StdEPReq+0x80>
 801636a:	7bbb      	ldrb	r3, [r7, #14]
 801636c:	2b80      	cmp	r3, #128	; 0x80
 801636e:	d009      	beq.n	8016384 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016370:	7bbb      	ldrb	r3, [r7, #14]
 8016372:	4619      	mov	r1, r3
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f001 f8fd 	bl	8017574 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801637a:	2180      	movs	r1, #128	; 0x80
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f001 f8f9 	bl	8017574 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8016382:	e020      	b.n	80163c6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8016384:	6839      	ldr	r1, [r7, #0]
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f000 fc74 	bl	8016c74 <USBD_CtlError>
        break;
 801638c:	e01b      	b.n	80163c6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	885b      	ldrh	r3, [r3, #2]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d10e      	bne.n	80163b4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016396:	7bbb      	ldrb	r3, [r7, #14]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d00b      	beq.n	80163b4 <USBD_StdEPReq+0xb0>
 801639c:	7bbb      	ldrb	r3, [r7, #14]
 801639e:	2b80      	cmp	r3, #128	; 0x80
 80163a0:	d008      	beq.n	80163b4 <USBD_StdEPReq+0xb0>
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	88db      	ldrh	r3, [r3, #6]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d104      	bne.n	80163b4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80163aa:	7bbb      	ldrb	r3, [r7, #14]
 80163ac:	4619      	mov	r1, r3
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f001 f8e0 	bl	8017574 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f000 fd28 	bl	8016e0a <USBD_CtlSendStatus>

        break;
 80163ba:	e004      	b.n	80163c6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fc58 	bl	8016c74 <USBD_CtlError>
        break;
 80163c4:	bf00      	nop
      }
      break;
 80163c6:	e0e7      	b.n	8016598 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163ce:	2b02      	cmp	r3, #2
 80163d0:	d002      	beq.n	80163d8 <USBD_StdEPReq+0xd4>
 80163d2:	2b03      	cmp	r3, #3
 80163d4:	d015      	beq.n	8016402 <USBD_StdEPReq+0xfe>
 80163d6:	e02d      	b.n	8016434 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80163d8:	7bbb      	ldrb	r3, [r7, #14]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00c      	beq.n	80163f8 <USBD_StdEPReq+0xf4>
 80163de:	7bbb      	ldrb	r3, [r7, #14]
 80163e0:	2b80      	cmp	r3, #128	; 0x80
 80163e2:	d009      	beq.n	80163f8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80163e4:	7bbb      	ldrb	r3, [r7, #14]
 80163e6:	4619      	mov	r1, r3
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f001 f8c3 	bl	8017574 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80163ee:	2180      	movs	r1, #128	; 0x80
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f001 f8bf 	bl	8017574 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80163f6:	e023      	b.n	8016440 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80163f8:	6839      	ldr	r1, [r7, #0]
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 fc3a 	bl	8016c74 <USBD_CtlError>
        break;
 8016400:	e01e      	b.n	8016440 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	885b      	ldrh	r3, [r3, #2]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d119      	bne.n	801643e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801640a:	7bbb      	ldrb	r3, [r7, #14]
 801640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016410:	2b00      	cmp	r3, #0
 8016412:	d004      	beq.n	801641e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016414:	7bbb      	ldrb	r3, [r7, #14]
 8016416:	4619      	mov	r1, r3
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f001 f8ca 	bl	80175b2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f000 fcf3 	bl	8016e0a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801642a:	689b      	ldr	r3, [r3, #8]
 801642c:	6839      	ldr	r1, [r7, #0]
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	4798      	blx	r3
        }
        break;
 8016432:	e004      	b.n	801643e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8016434:	6839      	ldr	r1, [r7, #0]
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 fc1c 	bl	8016c74 <USBD_CtlError>
        break;
 801643c:	e000      	b.n	8016440 <USBD_StdEPReq+0x13c>
        break;
 801643e:	bf00      	nop
      }
      break;
 8016440:	e0aa      	b.n	8016598 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016448:	2b02      	cmp	r3, #2
 801644a:	d002      	beq.n	8016452 <USBD_StdEPReq+0x14e>
 801644c:	2b03      	cmp	r3, #3
 801644e:	d032      	beq.n	80164b6 <USBD_StdEPReq+0x1b2>
 8016450:	e097      	b.n	8016582 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016452:	7bbb      	ldrb	r3, [r7, #14]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d007      	beq.n	8016468 <USBD_StdEPReq+0x164>
 8016458:	7bbb      	ldrb	r3, [r7, #14]
 801645a:	2b80      	cmp	r3, #128	; 0x80
 801645c:	d004      	beq.n	8016468 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f000 fc07 	bl	8016c74 <USBD_CtlError>
          break;
 8016466:	e091      	b.n	801658c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801646c:	2b00      	cmp	r3, #0
 801646e:	da0b      	bge.n	8016488 <USBD_StdEPReq+0x184>
 8016470:	7bbb      	ldrb	r3, [r7, #14]
 8016472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016476:	4613      	mov	r3, r2
 8016478:	009b      	lsls	r3, r3, #2
 801647a:	4413      	add	r3, r2
 801647c:	009b      	lsls	r3, r3, #2
 801647e:	3310      	adds	r3, #16
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	4413      	add	r3, r2
 8016484:	3304      	adds	r3, #4
 8016486:	e00b      	b.n	80164a0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016488:	7bbb      	ldrb	r3, [r7, #14]
 801648a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801648e:	4613      	mov	r3, r2
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	4413      	add	r3, r2
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	4413      	add	r3, r2
 801649e:	3304      	adds	r3, #4
 80164a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	2200      	movs	r2, #0
 80164a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	2202      	movs	r2, #2
 80164ac:	4619      	mov	r1, r3
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 fc51 	bl	8016d56 <USBD_CtlSendData>
        break;
 80164b4:	e06a      	b.n	801658c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80164b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	da11      	bge.n	80164e2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80164be:	7bbb      	ldrb	r3, [r7, #14]
 80164c0:	f003 020f 	and.w	r2, r3, #15
 80164c4:	6879      	ldr	r1, [r7, #4]
 80164c6:	4613      	mov	r3, r2
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	4413      	add	r3, r2
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	440b      	add	r3, r1
 80164d0:	3324      	adds	r3, #36	; 0x24
 80164d2:	881b      	ldrh	r3, [r3, #0]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d117      	bne.n	8016508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80164d8:	6839      	ldr	r1, [r7, #0]
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 fbca 	bl	8016c74 <USBD_CtlError>
            break;
 80164e0:	e054      	b.n	801658c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80164e2:	7bbb      	ldrb	r3, [r7, #14]
 80164e4:	f003 020f 	and.w	r2, r3, #15
 80164e8:	6879      	ldr	r1, [r7, #4]
 80164ea:	4613      	mov	r3, r2
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	4413      	add	r3, r2
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	440b      	add	r3, r1
 80164f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80164f8:	881b      	ldrh	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d104      	bne.n	8016508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80164fe:	6839      	ldr	r1, [r7, #0]
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f000 fbb7 	bl	8016c74 <USBD_CtlError>
            break;
 8016506:	e041      	b.n	801658c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801650c:	2b00      	cmp	r3, #0
 801650e:	da0b      	bge.n	8016528 <USBD_StdEPReq+0x224>
 8016510:	7bbb      	ldrb	r3, [r7, #14]
 8016512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016516:	4613      	mov	r3, r2
 8016518:	009b      	lsls	r3, r3, #2
 801651a:	4413      	add	r3, r2
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	3310      	adds	r3, #16
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	4413      	add	r3, r2
 8016524:	3304      	adds	r3, #4
 8016526:	e00b      	b.n	8016540 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016528:	7bbb      	ldrb	r3, [r7, #14]
 801652a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801652e:	4613      	mov	r3, r2
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	4413      	add	r3, r2
 8016534:	009b      	lsls	r3, r3, #2
 8016536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	4413      	add	r3, r2
 801653e:	3304      	adds	r3, #4
 8016540:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016542:	7bbb      	ldrb	r3, [r7, #14]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d002      	beq.n	801654e <USBD_StdEPReq+0x24a>
 8016548:	7bbb      	ldrb	r3, [r7, #14]
 801654a:	2b80      	cmp	r3, #128	; 0x80
 801654c:	d103      	bne.n	8016556 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	2200      	movs	r2, #0
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	e00e      	b.n	8016574 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016556:	7bbb      	ldrb	r3, [r7, #14]
 8016558:	4619      	mov	r1, r3
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f001 f848 	bl	80175f0 <USBD_LL_IsStallEP>
 8016560:	4603      	mov	r3, r0
 8016562:	2b00      	cmp	r3, #0
 8016564:	d003      	beq.n	801656e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	2201      	movs	r2, #1
 801656a:	601a      	str	r2, [r3, #0]
 801656c:	e002      	b.n	8016574 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	2200      	movs	r2, #0
 8016572:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016574:	68bb      	ldr	r3, [r7, #8]
 8016576:	2202      	movs	r2, #2
 8016578:	4619      	mov	r1, r3
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 fbeb 	bl	8016d56 <USBD_CtlSendData>
          break;
 8016580:	e004      	b.n	801658c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8016582:	6839      	ldr	r1, [r7, #0]
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f000 fb75 	bl	8016c74 <USBD_CtlError>
        break;
 801658a:	bf00      	nop
      }
      break;
 801658c:	e004      	b.n	8016598 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801658e:	6839      	ldr	r1, [r7, #0]
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f000 fb6f 	bl	8016c74 <USBD_CtlError>
      break;
 8016596:	bf00      	nop
    }
    break;
 8016598:	e004      	b.n	80165a4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801659a:	6839      	ldr	r1, [r7, #0]
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f000 fb69 	bl	8016c74 <USBD_CtlError>
    break;
 80165a2:	bf00      	nop
  }

  return ret;
 80165a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
	...

080165b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80165ba:	2300      	movs	r3, #0
 80165bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80165be:	2300      	movs	r3, #0
 80165c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80165c2:	2300      	movs	r3, #0
 80165c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	885b      	ldrh	r3, [r3, #2]
 80165ca:	0a1b      	lsrs	r3, r3, #8
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	3b01      	subs	r3, #1
 80165d0:	2b0e      	cmp	r3, #14
 80165d2:	f200 8165 	bhi.w	80168a0 <USBD_GetDescriptor+0x2f0>
 80165d6:	a201      	add	r2, pc, #4	; (adr r2, 80165dc <USBD_GetDescriptor+0x2c>)
 80165d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165dc:	0801664d 	.word	0x0801664d
 80165e0:	08016665 	.word	0x08016665
 80165e4:	080166a5 	.word	0x080166a5
 80165e8:	080168a1 	.word	0x080168a1
 80165ec:	080168a1 	.word	0x080168a1
 80165f0:	08016841 	.word	0x08016841
 80165f4:	0801686d 	.word	0x0801686d
 80165f8:	080168a1 	.word	0x080168a1
 80165fc:	080168a1 	.word	0x080168a1
 8016600:	080168a1 	.word	0x080168a1
 8016604:	080168a1 	.word	0x080168a1
 8016608:	080168a1 	.word	0x080168a1
 801660c:	080168a1 	.word	0x080168a1
 8016610:	080168a1 	.word	0x080168a1
 8016614:	08016619 	.word	0x08016619
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801661e:	69db      	ldr	r3, [r3, #28]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d00b      	beq.n	801663c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801662a:	69db      	ldr	r3, [r3, #28]
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	7c12      	ldrb	r2, [r2, #16]
 8016630:	f107 0108 	add.w	r1, r7, #8
 8016634:	4610      	mov	r0, r2
 8016636:	4798      	blx	r3
 8016638:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801663a:	e139      	b.n	80168b0 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f000 fb18 	bl	8016c74 <USBD_CtlError>
      err++;
 8016644:	7afb      	ldrb	r3, [r7, #11]
 8016646:	3301      	adds	r3, #1
 8016648:	72fb      	strb	r3, [r7, #11]
    break;
 801664a:	e131      	b.n	80168b0 <USBD_GetDescriptor+0x300>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	687a      	ldr	r2, [r7, #4]
 8016656:	7c12      	ldrb	r2, [r2, #16]
 8016658:	f107 0108 	add.w	r1, r7, #8
 801665c:	4610      	mov	r0, r2
 801665e:	4798      	blx	r3
 8016660:	60f8      	str	r0, [r7, #12]
    break;
 8016662:	e125      	b.n	80168b0 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	7c1b      	ldrb	r3, [r3, #16]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d10d      	bne.n	8016688 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016674:	f107 0208 	add.w	r2, r7, #8
 8016678:	4610      	mov	r0, r2
 801667a:	4798      	blx	r3
 801667c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	3301      	adds	r3, #1
 8016682:	2202      	movs	r2, #2
 8016684:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8016686:	e113      	b.n	80168b0 <USBD_GetDescriptor+0x300>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016690:	f107 0208 	add.w	r2, r7, #8
 8016694:	4610      	mov	r0, r2
 8016696:	4798      	blx	r3
 8016698:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	3301      	adds	r3, #1
 801669e:	2202      	movs	r2, #2
 80166a0:	701a      	strb	r2, [r3, #0]
    break;
 80166a2:	e105      	b.n	80168b0 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	885b      	ldrh	r3, [r3, #2]
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	2b05      	cmp	r3, #5
 80166ac:	f200 80ac 	bhi.w	8016808 <USBD_GetDescriptor+0x258>
 80166b0:	a201      	add	r2, pc, #4	; (adr r2, 80166b8 <USBD_GetDescriptor+0x108>)
 80166b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166b6:	bf00      	nop
 80166b8:	080166d1 	.word	0x080166d1
 80166bc:	08016705 	.word	0x08016705
 80166c0:	08016739 	.word	0x08016739
 80166c4:	0801676d 	.word	0x0801676d
 80166c8:	080167a1 	.word	0x080167a1
 80166cc:	080167d5 	.word	0x080167d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00b      	beq.n	80166f4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	687a      	ldr	r2, [r7, #4]
 80166e6:	7c12      	ldrb	r2, [r2, #16]
 80166e8:	f107 0108 	add.w	r1, r7, #8
 80166ec:	4610      	mov	r0, r2
 80166ee:	4798      	blx	r3
 80166f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80166f2:	e0a4      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80166f4:	6839      	ldr	r1, [r7, #0]
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f000 fabc 	bl	8016c74 <USBD_CtlError>
        err++;
 80166fc:	7afb      	ldrb	r3, [r7, #11]
 80166fe:	3301      	adds	r3, #1
 8016700:	72fb      	strb	r3, [r7, #11]
      break;
 8016702:	e09c      	b.n	801683e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801670a:	689b      	ldr	r3, [r3, #8]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00b      	beq.n	8016728 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016716:	689b      	ldr	r3, [r3, #8]
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	7c12      	ldrb	r2, [r2, #16]
 801671c:	f107 0108 	add.w	r1, r7, #8
 8016720:	4610      	mov	r0, r2
 8016722:	4798      	blx	r3
 8016724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016726:	e08a      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f000 faa2 	bl	8016c74 <USBD_CtlError>
        err++;
 8016730:	7afb      	ldrb	r3, [r7, #11]
 8016732:	3301      	adds	r3, #1
 8016734:	72fb      	strb	r3, [r7, #11]
      break;
 8016736:	e082      	b.n	801683e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801673e:	68db      	ldr	r3, [r3, #12]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d00b      	beq.n	801675c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801674a:	68db      	ldr	r3, [r3, #12]
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	7c12      	ldrb	r2, [r2, #16]
 8016750:	f107 0108 	add.w	r1, r7, #8
 8016754:	4610      	mov	r0, r2
 8016756:	4798      	blx	r3
 8016758:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801675a:	e070      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 801675c:	6839      	ldr	r1, [r7, #0]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 fa88 	bl	8016c74 <USBD_CtlError>
        err++;
 8016764:	7afb      	ldrb	r3, [r7, #11]
 8016766:	3301      	adds	r3, #1
 8016768:	72fb      	strb	r3, [r7, #11]
      break;
 801676a:	e068      	b.n	801683e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016772:	691b      	ldr	r3, [r3, #16]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d00b      	beq.n	8016790 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801677e:	691b      	ldr	r3, [r3, #16]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	7c12      	ldrb	r2, [r2, #16]
 8016784:	f107 0108 	add.w	r1, r7, #8
 8016788:	4610      	mov	r0, r2
 801678a:	4798      	blx	r3
 801678c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801678e:	e056      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fa6e 	bl	8016c74 <USBD_CtlError>
        err++;
 8016798:	7afb      	ldrb	r3, [r7, #11]
 801679a:	3301      	adds	r3, #1
 801679c:	72fb      	strb	r3, [r7, #11]
      break;
 801679e:	e04e      	b.n	801683e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167a6:	695b      	ldr	r3, [r3, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00b      	beq.n	80167c4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167b2:	695b      	ldr	r3, [r3, #20]
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	7c12      	ldrb	r2, [r2, #16]
 80167b8:	f107 0108 	add.w	r1, r7, #8
 80167bc:	4610      	mov	r0, r2
 80167be:	4798      	blx	r3
 80167c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167c2:	e03c      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80167c4:	6839      	ldr	r1, [r7, #0]
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 fa54 	bl	8016c74 <USBD_CtlError>
        err++;
 80167cc:	7afb      	ldrb	r3, [r7, #11]
 80167ce:	3301      	adds	r3, #1
 80167d0:	72fb      	strb	r3, [r7, #11]
      break;
 80167d2:	e034      	b.n	801683e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167da:	699b      	ldr	r3, [r3, #24]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00b      	beq.n	80167f8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167e6:	699b      	ldr	r3, [r3, #24]
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	7c12      	ldrb	r2, [r2, #16]
 80167ec:	f107 0108 	add.w	r1, r7, #8
 80167f0:	4610      	mov	r0, r2
 80167f2:	4798      	blx	r3
 80167f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167f6:	e022      	b.n	801683e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80167f8:	6839      	ldr	r1, [r7, #0]
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f000 fa3a 	bl	8016c74 <USBD_CtlError>
        err++;
 8016800:	7afb      	ldrb	r3, [r7, #11]
 8016802:	3301      	adds	r3, #1
 8016804:	72fb      	strb	r3, [r7, #11]
      break;
 8016806:	e01a      	b.n	801683e <USBD_GetDescriptor+0x28e>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00c      	beq.n	801682e <USBD_GetDescriptor+0x27e>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801681c:	683a      	ldr	r2, [r7, #0]
 801681e:	8852      	ldrh	r2, [r2, #2]
 8016820:	b2d1      	uxtb	r1, r2
 8016822:	f107 0208 	add.w	r2, r7, #8
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	4798      	blx	r3
 801682a:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 801682c:	e006      	b.n	801683c <USBD_GetDescriptor+0x28c>
        USBD_CtlError(pdev, req);
 801682e:	6839      	ldr	r1, [r7, #0]
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f000 fa1f 	bl	8016c74 <USBD_CtlError>
        err++;
 8016836:	7afb      	ldrb	r3, [r7, #11]
 8016838:	3301      	adds	r3, #1
 801683a:	72fb      	strb	r3, [r7, #11]
      break;
 801683c:	bf00      	nop
    }
    break;
 801683e:	e037      	b.n	80168b0 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	7c1b      	ldrb	r3, [r3, #16]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d109      	bne.n	801685c <USBD_GetDescriptor+0x2ac>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016850:	f107 0208 	add.w	r2, r7, #8
 8016854:	4610      	mov	r0, r2
 8016856:	4798      	blx	r3
 8016858:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801685a:	e029      	b.n	80168b0 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 801685c:	6839      	ldr	r1, [r7, #0]
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f000 fa08 	bl	8016c74 <USBD_CtlError>
      err++;
 8016864:	7afb      	ldrb	r3, [r7, #11]
 8016866:	3301      	adds	r3, #1
 8016868:	72fb      	strb	r3, [r7, #11]
    break;
 801686a:	e021      	b.n	80168b0 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	7c1b      	ldrb	r3, [r3, #16]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d10d      	bne.n	8016890 <USBD_GetDescriptor+0x2e0>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801687c:	f107 0208 	add.w	r2, r7, #8
 8016880:	4610      	mov	r0, r2
 8016882:	4798      	blx	r3
 8016884:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3301      	adds	r3, #1
 801688a:	2207      	movs	r2, #7
 801688c:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801688e:	e00f      	b.n	80168b0 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8016890:	6839      	ldr	r1, [r7, #0]
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 f9ee 	bl	8016c74 <USBD_CtlError>
      err++;
 8016898:	7afb      	ldrb	r3, [r7, #11]
 801689a:	3301      	adds	r3, #1
 801689c:	72fb      	strb	r3, [r7, #11]
    break;
 801689e:	e007      	b.n	80168b0 <USBD_GetDescriptor+0x300>

  default:
    USBD_CtlError(pdev, req);
 80168a0:	6839      	ldr	r1, [r7, #0]
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f000 f9e6 	bl	8016c74 <USBD_CtlError>
    err++;
 80168a8:	7afb      	ldrb	r3, [r7, #11]
 80168aa:	3301      	adds	r3, #1
 80168ac:	72fb      	strb	r3, [r7, #11]
    break;
 80168ae:	bf00      	nop
  }

  if (err != 0U)
 80168b0:	7afb      	ldrb	r3, [r7, #11]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d11e      	bne.n	80168f4 <USBD_GetDescriptor+0x344>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	88db      	ldrh	r3, [r3, #6]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d016      	beq.n	80168ec <USBD_GetDescriptor+0x33c>
    {
      if (len != 0U)
 80168be:	893b      	ldrh	r3, [r7, #8]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d00e      	beq.n	80168e2 <USBD_GetDescriptor+0x332>
      {
        len = MIN(len, req->wLength);
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	88da      	ldrh	r2, [r3, #6]
 80168c8:	893b      	ldrh	r3, [r7, #8]
 80168ca:	4293      	cmp	r3, r2
 80168cc:	bf28      	it	cs
 80168ce:	4613      	movcs	r3, r2
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80168d4:	893b      	ldrh	r3, [r7, #8]
 80168d6:	461a      	mov	r2, r3
 80168d8:	68f9      	ldr	r1, [r7, #12]
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 fa3b 	bl	8016d56 <USBD_CtlSendData>
 80168e0:	e009      	b.n	80168f6 <USBD_GetDescriptor+0x346>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80168e2:	6839      	ldr	r1, [r7, #0]
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 f9c5 	bl	8016c74 <USBD_CtlError>
 80168ea:	e004      	b.n	80168f6 <USBD_GetDescriptor+0x346>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f000 fa8c 	bl	8016e0a <USBD_CtlSendStatus>
 80168f2:	e000      	b.n	80168f6 <USBD_GetDescriptor+0x346>
    return;
 80168f4:	bf00      	nop
    }
  }
}
 80168f6:	3710      	adds	r7, #16
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b084      	sub	sp, #16
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	889b      	ldrh	r3, [r3, #4]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d130      	bne.n	8016970 <USBD_SetAddress+0x74>
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	88db      	ldrh	r3, [r3, #6]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d12c      	bne.n	8016970 <USBD_SetAddress+0x74>
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	885b      	ldrh	r3, [r3, #2]
 801691a:	2b7f      	cmp	r3, #127	; 0x7f
 801691c:	d828      	bhi.n	8016970 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	885b      	ldrh	r3, [r3, #2]
 8016922:	b2db      	uxtb	r3, r3
 8016924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016930:	2b03      	cmp	r3, #3
 8016932:	d104      	bne.n	801693e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8016934:	6839      	ldr	r1, [r7, #0]
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 f99c 	bl	8016c74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801693c:	e01c      	b.n	8016978 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	7bfa      	ldrb	r2, [r7, #15]
 8016942:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016946:	7bfb      	ldrb	r3, [r7, #15]
 8016948:	4619      	mov	r1, r3
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f000 fe7c 	bl	8017648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f000 fa5a 	bl	8016e0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016956:	7bfb      	ldrb	r3, [r7, #15]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d004      	beq.n	8016966 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2202      	movs	r2, #2
 8016960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016964:	e008      	b.n	8016978 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2201      	movs	r2, #1
 801696a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801696e:	e003      	b.n	8016978 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016970:	6839      	ldr	r1, [r7, #0]
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f000 f97e 	bl	8016c74 <USBD_CtlError>
  }
}
 8016978:	bf00      	nop
 801697a:	3710      	adds	r7, #16
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801698a:	2300      	movs	r3, #0
 801698c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	885b      	ldrh	r3, [r3, #2]
 8016992:	b2da      	uxtb	r2, r3
 8016994:	4b4b      	ldr	r3, [pc, #300]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016996:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016998:	4b4a      	ldr	r3, [pc, #296]	; (8016ac4 <USBD_SetConfig+0x144>)
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b01      	cmp	r3, #1
 801699e:	d905      	bls.n	80169ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80169a0:	6839      	ldr	r1, [r7, #0]
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f000 f966 	bl	8016c74 <USBD_CtlError>
    return USBD_FAIL;
 80169a8:	2303      	movs	r3, #3
 80169aa:	e087      	b.n	8016abc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169b2:	2b02      	cmp	r3, #2
 80169b4:	d002      	beq.n	80169bc <USBD_SetConfig+0x3c>
 80169b6:	2b03      	cmp	r3, #3
 80169b8:	d025      	beq.n	8016a06 <USBD_SetConfig+0x86>
 80169ba:	e071      	b.n	8016aa0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80169bc:	4b41      	ldr	r3, [pc, #260]	; (8016ac4 <USBD_SetConfig+0x144>)
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d01c      	beq.n	80169fe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80169c4:	4b3f      	ldr	r3, [pc, #252]	; (8016ac4 <USBD_SetConfig+0x144>)
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	461a      	mov	r2, r3
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80169ce:	4b3d      	ldr	r3, [pc, #244]	; (8016ac4 <USBD_SetConfig+0x144>)
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	4619      	mov	r1, r3
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ff f96b 	bl	8015cb0 <USBD_SetClassConfig>
 80169da:	4603      	mov	r3, r0
 80169dc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80169de:	7bfb      	ldrb	r3, [r7, #15]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d004      	beq.n	80169ee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80169e4:	6839      	ldr	r1, [r7, #0]
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f000 f944 	bl	8016c74 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80169ec:	e065      	b.n	8016aba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fa0b 	bl	8016e0a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2203      	movs	r2, #3
 80169f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80169fc:	e05d      	b.n	8016aba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f000 fa03 	bl	8016e0a <USBD_CtlSendStatus>
    break;
 8016a04:	e059      	b.n	8016aba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8016a06:	4b2f      	ldr	r3, [pc, #188]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d112      	bne.n	8016a34 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2202      	movs	r2, #2
 8016a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8016a16:	4b2b      	ldr	r3, [pc, #172]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016a20:	4b28      	ldr	r3, [pc, #160]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	4619      	mov	r1, r3
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7ff f95e 	bl	8015ce8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f000 f9ec 	bl	8016e0a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016a32:	e042      	b.n	8016aba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016a34:	4b23      	ldr	r3, [pc, #140]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	461a      	mov	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d02a      	beq.n	8016a98 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	4619      	mov	r1, r3
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f7ff f94c 	bl	8015ce8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016a50:	4b1c      	ldr	r3, [pc, #112]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	461a      	mov	r2, r3
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016a5a:	4b1a      	ldr	r3, [pc, #104]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	4619      	mov	r1, r3
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7ff f925 	bl	8015cb0 <USBD_SetClassConfig>
 8016a66:	4603      	mov	r3, r0
 8016a68:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8016a6a:	7bfb      	ldrb	r3, [r7, #15]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d00f      	beq.n	8016a90 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016a70:	6839      	ldr	r1, [r7, #0]
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 f8fe 	bl	8016c74 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	4619      	mov	r1, r3
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f7ff f931 	bl	8015ce8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2202      	movs	r2, #2
 8016a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8016a8e:	e014      	b.n	8016aba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f000 f9ba 	bl	8016e0a <USBD_CtlSendStatus>
    break;
 8016a96:	e010      	b.n	8016aba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 f9b6 	bl	8016e0a <USBD_CtlSendStatus>
    break;
 8016a9e:	e00c      	b.n	8016aba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016aa0:	6839      	ldr	r1, [r7, #0]
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f000 f8e6 	bl	8016c74 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016aa8:	4b06      	ldr	r3, [pc, #24]	; (8016ac4 <USBD_SetConfig+0x144>)
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	4619      	mov	r1, r3
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f7ff f91a 	bl	8015ce8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016ab4:	2303      	movs	r3, #3
 8016ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab8:	bf00      	nop
  }

  return ret;
 8016aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3710      	adds	r7, #16
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	2000026f 	.word	0x2000026f

08016ac8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	88db      	ldrh	r3, [r3, #6]
 8016ad6:	2b01      	cmp	r3, #1
 8016ad8:	d004      	beq.n	8016ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016ada:	6839      	ldr	r1, [r7, #0]
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f000 f8c9 	bl	8016c74 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8016ae2:	e021      	b.n	8016b28 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	db17      	blt.n	8016b1e <USBD_GetConfig+0x56>
 8016aee:	2b02      	cmp	r3, #2
 8016af0:	dd02      	ble.n	8016af8 <USBD_GetConfig+0x30>
 8016af2:	2b03      	cmp	r3, #3
 8016af4:	d00b      	beq.n	8016b0e <USBD_GetConfig+0x46>
 8016af6:	e012      	b.n	8016b1e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2200      	movs	r2, #0
 8016afc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	3308      	adds	r3, #8
 8016b02:	2201      	movs	r2, #1
 8016b04:	4619      	mov	r1, r3
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f000 f925 	bl	8016d56 <USBD_CtlSendData>
      break;
 8016b0c:	e00c      	b.n	8016b28 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	3304      	adds	r3, #4
 8016b12:	2201      	movs	r2, #1
 8016b14:	4619      	mov	r1, r3
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f000 f91d 	bl	8016d56 <USBD_CtlSendData>
      break;
 8016b1c:	e004      	b.n	8016b28 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8016b1e:	6839      	ldr	r1, [r7, #0]
 8016b20:	6878      	ldr	r0, [r7, #4]
 8016b22:	f000 f8a7 	bl	8016c74 <USBD_CtlError>
      break;
 8016b26:	bf00      	nop
}
 8016b28:	bf00      	nop
 8016b2a:	3708      	adds	r7, #8
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b082      	sub	sp, #8
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b40:	3b01      	subs	r3, #1
 8016b42:	2b02      	cmp	r3, #2
 8016b44:	d81e      	bhi.n	8016b84 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8016b46:	683b      	ldr	r3, [r7, #0]
 8016b48:	88db      	ldrh	r3, [r3, #6]
 8016b4a:	2b02      	cmp	r3, #2
 8016b4c:	d004      	beq.n	8016b58 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8016b4e:	6839      	ldr	r1, [r7, #0]
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f000 f88f 	bl	8016c74 <USBD_CtlError>
      break;
 8016b56:	e01a      	b.n	8016b8e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d005      	beq.n	8016b74 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	68db      	ldr	r3, [r3, #12]
 8016b6c:	f043 0202 	orr.w	r2, r3, #2
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	330c      	adds	r3, #12
 8016b78:	2202      	movs	r2, #2
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f000 f8ea 	bl	8016d56 <USBD_CtlSendData>
    break;
 8016b82:	e004      	b.n	8016b8e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016b84:	6839      	ldr	r1, [r7, #0]
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f000 f874 	bl	8016c74 <USBD_CtlError>
    break;
 8016b8c:	bf00      	nop
  }
}
 8016b8e:	bf00      	nop
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b082      	sub	sp, #8
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
 8016b9e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	885b      	ldrh	r3, [r3, #2]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d106      	bne.n	8016bb6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2201      	movs	r2, #1
 8016bac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f000 f92a 	bl	8016e0a <USBD_CtlSendStatus>
  }
}
 8016bb6:	bf00      	nop
 8016bb8:	3708      	adds	r7, #8
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016bbe:	b580      	push	{r7, lr}
 8016bc0:	b082      	sub	sp, #8
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
 8016bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bce:	3b01      	subs	r3, #1
 8016bd0:	2b02      	cmp	r3, #2
 8016bd2:	d80b      	bhi.n	8016bec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	885b      	ldrh	r3, [r3, #2]
 8016bd8:	2b01      	cmp	r3, #1
 8016bda:	d10c      	bne.n	8016bf6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2200      	movs	r2, #0
 8016be0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f000 f910 	bl	8016e0a <USBD_CtlSendStatus>
      }
      break;
 8016bea:	e004      	b.n	8016bf6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8016bec:	6839      	ldr	r1, [r7, #0]
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f000 f840 	bl	8016c74 <USBD_CtlError>
      break;
 8016bf4:	e000      	b.n	8016bf8 <USBD_ClrFeature+0x3a>
      break;
 8016bf6:	bf00      	nop
  }
}
 8016bf8:	bf00      	nop
 8016bfa:	3708      	adds	r7, #8
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	781a      	ldrb	r2, [r3, #0]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	3301      	adds	r3, #1
 8016c1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	781a      	ldrb	r2, [r3, #0]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	3301      	adds	r3, #1
 8016c28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016c2a:	68f8      	ldr	r0, [r7, #12]
 8016c2c:	f7ff fa97 	bl	801615e <SWAPBYTE>
 8016c30:	4603      	mov	r3, r0
 8016c32:	461a      	mov	r2, r3
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3301      	adds	r3, #1
 8016c42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016c44:	68f8      	ldr	r0, [r7, #12]
 8016c46:	f7ff fa8a 	bl	801615e <SWAPBYTE>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	3301      	adds	r3, #1
 8016c56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	f7ff fa7d 	bl	801615e <SWAPBYTE>
 8016c64:	4603      	mov	r3, r0
 8016c66:	461a      	mov	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	80da      	strh	r2, [r3, #6]
}
 8016c6c:	bf00      	nop
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c7e:	2180      	movs	r1, #128	; 0x80
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f000 fc77 	bl	8017574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016c86:	2100      	movs	r1, #0
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f000 fc73 	bl	8017574 <USBD_LL_StallEP>
}
 8016c8e:	bf00      	nop
 8016c90:	3708      	adds	r7, #8
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}

08016c96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016c96:	b580      	push	{r7, lr}
 8016c98:	b086      	sub	sp, #24
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	60f8      	str	r0, [r7, #12]
 8016c9e:	60b9      	str	r1, [r7, #8]
 8016ca0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d036      	beq.n	8016d1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016cb0:	6938      	ldr	r0, [r7, #16]
 8016cb2:	f000 f836 	bl	8016d22 <USBD_GetLen>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	3301      	adds	r3, #1
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	005b      	lsls	r3, r3, #1
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016cc4:	7dfb      	ldrb	r3, [r7, #23]
 8016cc6:	68ba      	ldr	r2, [r7, #8]
 8016cc8:	4413      	add	r3, r2
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	7812      	ldrb	r2, [r2, #0]
 8016cce:	701a      	strb	r2, [r3, #0]
  idx++;
 8016cd0:	7dfb      	ldrb	r3, [r7, #23]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016cd6:	7dfb      	ldrb	r3, [r7, #23]
 8016cd8:	68ba      	ldr	r2, [r7, #8]
 8016cda:	4413      	add	r3, r2
 8016cdc:	2203      	movs	r2, #3
 8016cde:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ce0:	7dfb      	ldrb	r3, [r7, #23]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ce6:	e013      	b.n	8016d10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016ce8:	7dfb      	ldrb	r3, [r7, #23]
 8016cea:	68ba      	ldr	r2, [r7, #8]
 8016cec:	4413      	add	r3, r2
 8016cee:	693a      	ldr	r2, [r7, #16]
 8016cf0:	7812      	ldrb	r2, [r2, #0]
 8016cf2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	613b      	str	r3, [r7, #16]
    idx++;
 8016cfa:	7dfb      	ldrb	r3, [r7, #23]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016d00:	7dfb      	ldrb	r3, [r7, #23]
 8016d02:	68ba      	ldr	r2, [r7, #8]
 8016d04:	4413      	add	r3, r2
 8016d06:	2200      	movs	r2, #0
 8016d08:	701a      	strb	r2, [r3, #0]
    idx++;
 8016d0a:	7dfb      	ldrb	r3, [r7, #23]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d1e7      	bne.n	8016ce8 <USBD_GetString+0x52>
 8016d18:	e000      	b.n	8016d1c <USBD_GetString+0x86>
    return;
 8016d1a:	bf00      	nop
  }
}
 8016d1c:	3718      	adds	r7, #24
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}

08016d22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016d22:	b480      	push	{r7}
 8016d24:	b085      	sub	sp, #20
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016d32:	e005      	b.n	8016d40 <USBD_GetLen+0x1e>
  {
    len++;
 8016d34:	7bfb      	ldrb	r3, [r7, #15]
 8016d36:	3301      	adds	r3, #1
 8016d38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d1f5      	bne.n	8016d34 <USBD_GetLen+0x12>
  }

  return len;
 8016d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3714      	adds	r7, #20
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d54:	4770      	bx	lr

08016d56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b084      	sub	sp, #16
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	60f8      	str	r0, [r7, #12]
 8016d5e:	60b9      	str	r1, [r7, #8]
 8016d60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2202      	movs	r2, #2
 8016d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	687a      	ldr	r2, [r7, #4]
 8016d6e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	68ba      	ldr	r2, [r7, #8]
 8016d7a:	2100      	movs	r1, #0
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	f000 fc82 	bl	8017686 <USBD_LL_Transmit>

  return USBD_OK;
 8016d82:	2300      	movs	r3, #0
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3710      	adds	r7, #16
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b084      	sub	sp, #16
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	60b9      	str	r1, [r7, #8]
 8016d96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	68ba      	ldr	r2, [r7, #8]
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	68f8      	ldr	r0, [r7, #12]
 8016da0:	f000 fc71 	bl	8017686 <USBD_LL_Transmit>

  return USBD_OK;
 8016da4:	2300      	movs	r3, #0
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}

08016dae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016dae:	b580      	push	{r7, lr}
 8016db0:	b084      	sub	sp, #16
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	60f8      	str	r0, [r7, #12]
 8016db6:	60b9      	str	r1, [r7, #8]
 8016db8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2203      	movs	r2, #3
 8016dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	68ba      	ldr	r2, [r7, #8]
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f000 fc75 	bl	80176c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3710      	adds	r7, #16
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b084      	sub	sp, #16
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	68ba      	ldr	r2, [r7, #8]
 8016df8:	2100      	movs	r1, #0
 8016dfa:	68f8      	ldr	r0, [r7, #12]
 8016dfc:	f000 fc64 	bl	80176c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e00:	2300      	movs	r3, #0
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3710      	adds	r7, #16
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b082      	sub	sp, #8
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2204      	movs	r2, #4
 8016e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	2100      	movs	r1, #0
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 fc30 	bl	8017686 <USBD_LL_Transmit>

  return USBD_OK;
 8016e26:	2300      	movs	r3, #0
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2205      	movs	r2, #5
 8016e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e40:	2300      	movs	r3, #0
 8016e42:	2200      	movs	r2, #0
 8016e44:	2100      	movs	r1, #0
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f000 fc3e 	bl	80176c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e4c:	2300      	movs	r3, #0
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3708      	adds	r7, #8
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
	...

08016e58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	4912      	ldr	r1, [pc, #72]	; (8016ea8 <MX_USB_DEVICE_Init+0x50>)
 8016e60:	4812      	ldr	r0, [pc, #72]	; (8016eac <MX_USB_DEVICE_Init+0x54>)
 8016e62:	f7fe fe91 	bl	8015b88 <USBD_Init>
 8016e66:	4603      	mov	r3, r0
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d001      	beq.n	8016e70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016e6c:	f7f9 fcbe 	bl	80107ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8016e70:	490f      	ldr	r1, [pc, #60]	; (8016eb0 <MX_USB_DEVICE_Init+0x58>)
 8016e72:	480e      	ldr	r0, [pc, #56]	; (8016eac <MX_USB_DEVICE_Init+0x54>)
 8016e74:	f7fe febe 	bl	8015bf4 <USBD_RegisterClass>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d001      	beq.n	8016e82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016e7e:	f7f9 fcb5 	bl	80107ec <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8016e82:	490c      	ldr	r1, [pc, #48]	; (8016eb4 <MX_USB_DEVICE_Init+0x5c>)
 8016e84:	4809      	ldr	r0, [pc, #36]	; (8016eac <MX_USB_DEVICE_Init+0x54>)
 8016e86:	f7fe fb19 	bl	80154bc <USBD_DFU_RegisterMedia>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d001      	beq.n	8016e94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016e90:	f7f9 fcac 	bl	80107ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016e94:	4805      	ldr	r0, [pc, #20]	; (8016eac <MX_USB_DEVICE_Init+0x54>)
 8016e96:	f7fe fece 	bl	8015c36 <USBD_Start>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d001      	beq.n	8016ea4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ea0:	f7f9 fca4 	bl	80107ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ea4:	bf00      	nop
 8016ea6:	bd80      	pop	{r7, pc}
 8016ea8:	20000070 	.word	0x20000070
 8016eac:	200002bc 	.word	0x200002bc
 8016eb0:	2000000c 	.word	0x2000000c
 8016eb4:	200000d0 	.word	0x200000d0

08016eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eb8:	b480      	push	{r7}
 8016eba:	b083      	sub	sp, #12
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	6039      	str	r1, [r7, #0]
 8016ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	2212      	movs	r2, #18
 8016ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016eca:	4b03      	ldr	r3, [pc, #12]	; (8016ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr
 8016ed8:	20000090 	.word	0x20000090

08016edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016edc:	b480      	push	{r7}
 8016ede:	b083      	sub	sp, #12
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	6039      	str	r1, [r7, #0]
 8016ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	2204      	movs	r2, #4
 8016eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016eee:	4b03      	ldr	r3, [pc, #12]	; (8016efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	370c      	adds	r7, #12
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efa:	4770      	bx	lr
 8016efc:	200000b0 	.word	0x200000b0

08016f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	4603      	mov	r3, r0
 8016f08:	6039      	str	r1, [r7, #0]
 8016f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f0c:	79fb      	ldrb	r3, [r7, #7]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d105      	bne.n	8016f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f12:	683a      	ldr	r2, [r7, #0]
 8016f14:	4907      	ldr	r1, [pc, #28]	; (8016f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8016f16:	4808      	ldr	r0, [pc, #32]	; (8016f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8016f18:	f7ff febd 	bl	8016c96 <USBD_GetString>
 8016f1c:	e004      	b.n	8016f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	4904      	ldr	r1, [pc, #16]	; (8016f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8016f22:	4805      	ldr	r0, [pc, #20]	; (8016f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8016f24:	f7ff feb7 	bl	8016c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f28:	4b02      	ldr	r3, [pc, #8]	; (8016f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	2000058c 	.word	0x2000058c
 8016f38:	08018198 	.word	0x08018198

08016f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b082      	sub	sp, #8
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	4603      	mov	r3, r0
 8016f44:	6039      	str	r1, [r7, #0]
 8016f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	4904      	ldr	r1, [pc, #16]	; (8016f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016f4c:	4804      	ldr	r0, [pc, #16]	; (8016f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016f4e:	f7ff fea2 	bl	8016c96 <USBD_GetString>
  return USBD_StrDesc;
 8016f52:	4b02      	ldr	r3, [pc, #8]	; (8016f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3708      	adds	r7, #8
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	2000058c 	.word	0x2000058c
 8016f60:	080181b8 	.word	0x080181b8

08016f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	221a      	movs	r2, #26
 8016f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016f76:	f000 f855 	bl	8017024 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016f7a:	4b02      	ldr	r3, [pc, #8]	; (8016f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	3708      	adds	r7, #8
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	200000b4 	.word	0x200000b4

08016f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b082      	sub	sp, #8
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	6039      	str	r1, [r7, #0]
 8016f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f94:	79fb      	ldrb	r3, [r7, #7]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d105      	bne.n	8016fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f9a:	683a      	ldr	r2, [r7, #0]
 8016f9c:	4907      	ldr	r1, [pc, #28]	; (8016fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f9e:	4808      	ldr	r0, [pc, #32]	; (8016fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016fa0:	f7ff fe79 	bl	8016c96 <USBD_GetString>
 8016fa4:	e004      	b.n	8016fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016fa6:	683a      	ldr	r2, [r7, #0]
 8016fa8:	4904      	ldr	r1, [pc, #16]	; (8016fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8016faa:	4805      	ldr	r0, [pc, #20]	; (8016fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016fac:	f7ff fe73 	bl	8016c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fb0:	4b02      	ldr	r3, [pc, #8]	; (8016fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3708      	adds	r7, #8
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	2000058c 	.word	0x2000058c
 8016fc0:	080181cc 	.word	0x080181cc

08016fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	4603      	mov	r3, r0
 8016fcc:	6039      	str	r1, [r7, #0]
 8016fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016fd0:	79fb      	ldrb	r3, [r7, #7]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d105      	bne.n	8016fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016fd6:	683a      	ldr	r2, [r7, #0]
 8016fd8:	4907      	ldr	r1, [pc, #28]	; (8016ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016fda:	4808      	ldr	r0, [pc, #32]	; (8016ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016fdc:	f7ff fe5b 	bl	8016c96 <USBD_GetString>
 8016fe0:	e004      	b.n	8016fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016fe2:	683a      	ldr	r2, [r7, #0]
 8016fe4:	4904      	ldr	r1, [pc, #16]	; (8016ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016fe6:	4805      	ldr	r0, [pc, #20]	; (8016ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016fe8:	f7ff fe55 	bl	8016c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fec:	4b02      	ldr	r3, [pc, #8]	; (8016ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3708      	adds	r7, #8
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	bd80      	pop	{r7, pc}
 8016ff6:	bf00      	nop
 8016ff8:	2000058c 	.word	0x2000058c
 8016ffc:	080181d8 	.word	0x080181d8

08017000 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017000:	b480      	push	{r7}
 8017002:	b083      	sub	sp, #12
 8017004:	af00      	add	r7, sp, #0
 8017006:	4603      	mov	r3, r0
 8017008:	6039      	str	r1, [r7, #0]
 801700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	220c      	movs	r2, #12
 8017010:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017012:	4b03      	ldr	r3, [pc, #12]	; (8017020 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017014:	4618      	mov	r0, r3
 8017016:	370c      	adds	r7, #12
 8017018:	46bd      	mov	sp, r7
 801701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701e:	4770      	bx	lr
 8017020:	200000a4 	.word	0x200000a4

08017024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b084      	sub	sp, #16
 8017028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801702a:	4b0f      	ldr	r3, [pc, #60]	; (8017068 <Get_SerialNum+0x44>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017030:	4b0e      	ldr	r3, [pc, #56]	; (801706c <Get_SerialNum+0x48>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017036:	4b0e      	ldr	r3, [pc, #56]	; (8017070 <Get_SerialNum+0x4c>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801703c:	68fa      	ldr	r2, [r7, #12]
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	4413      	add	r3, r2
 8017042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d009      	beq.n	801705e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801704a:	2208      	movs	r2, #8
 801704c:	4909      	ldr	r1, [pc, #36]	; (8017074 <Get_SerialNum+0x50>)
 801704e:	68f8      	ldr	r0, [r7, #12]
 8017050:	f000 f814 	bl	801707c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017054:	2204      	movs	r2, #4
 8017056:	4908      	ldr	r1, [pc, #32]	; (8017078 <Get_SerialNum+0x54>)
 8017058:	68b8      	ldr	r0, [r7, #8]
 801705a:	f000 f80f 	bl	801707c <IntToUnicode>
  }
}
 801705e:	bf00      	nop
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	1fff7a10 	.word	0x1fff7a10
 801706c:	1fff7a14 	.word	0x1fff7a14
 8017070:	1fff7a18 	.word	0x1fff7a18
 8017074:	200000b6 	.word	0x200000b6
 8017078:	200000c6 	.word	0x200000c6

0801707c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801707c:	b480      	push	{r7}
 801707e:	b087      	sub	sp, #28
 8017080:	af00      	add	r7, sp, #0
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	4613      	mov	r3, r2
 8017088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801708a:	2300      	movs	r3, #0
 801708c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801708e:	2300      	movs	r3, #0
 8017090:	75fb      	strb	r3, [r7, #23]
 8017092:	e027      	b.n	80170e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	0f1b      	lsrs	r3, r3, #28
 8017098:	2b09      	cmp	r3, #9
 801709a:	d80b      	bhi.n	80170b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	0f1b      	lsrs	r3, r3, #28
 80170a0:	b2da      	uxtb	r2, r3
 80170a2:	7dfb      	ldrb	r3, [r7, #23]
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4619      	mov	r1, r3
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	440b      	add	r3, r1
 80170ac:	3230      	adds	r2, #48	; 0x30
 80170ae:	b2d2      	uxtb	r2, r2
 80170b0:	701a      	strb	r2, [r3, #0]
 80170b2:	e00a      	b.n	80170ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	0f1b      	lsrs	r3, r3, #28
 80170b8:	b2da      	uxtb	r2, r3
 80170ba:	7dfb      	ldrb	r3, [r7, #23]
 80170bc:	005b      	lsls	r3, r3, #1
 80170be:	4619      	mov	r1, r3
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	440b      	add	r3, r1
 80170c4:	3237      	adds	r2, #55	; 0x37
 80170c6:	b2d2      	uxtb	r2, r2
 80170c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	011b      	lsls	r3, r3, #4
 80170ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80170d0:	7dfb      	ldrb	r3, [r7, #23]
 80170d2:	005b      	lsls	r3, r3, #1
 80170d4:	3301      	adds	r3, #1
 80170d6:	68ba      	ldr	r2, [r7, #8]
 80170d8:	4413      	add	r3, r2
 80170da:	2200      	movs	r2, #0
 80170dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80170de:	7dfb      	ldrb	r3, [r7, #23]
 80170e0:	3301      	adds	r3, #1
 80170e2:	75fb      	strb	r3, [r7, #23]
 80170e4:	7dfa      	ldrb	r2, [r7, #23]
 80170e6:	79fb      	ldrb	r3, [r7, #7]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d3d3      	bcc.n	8017094 <IntToUnicode+0x18>
  }
}
 80170ec:	bf00      	nop
 80170ee:	371c      	adds	r7, #28
 80170f0:	46bd      	mov	sp, r7
 80170f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f6:	4770      	bx	lr

080170f8 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80170f8:	b480      	push	{r7}
 80170fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80170fc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80170fe:	4618      	mov	r0, r3
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr

08017108 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8017108:	b480      	push	{r7}
 801710a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 801710c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 801710e:	4618      	mov	r0, r3
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8017118:	b480      	push	{r7}
 801711a:	b083      	sub	sp, #12
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8017120:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017122:	4618      	mov	r0, r3
 8017124:	370c      	adds	r7, #12
 8017126:	46bd      	mov	sp, r7
 8017128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712c:	4770      	bx	lr

0801712e <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 801712e:	b480      	push	{r7}
 8017130:	b085      	sub	sp, #20
 8017132:	af00      	add	r7, sp, #0
 8017134:	60f8      	str	r0, [r7, #12]
 8017136:	60b9      	str	r1, [r7, #8]
 8017138:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 801713a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801713c:	4618      	mov	r0, r3
 801713e:	3714      	adds	r7, #20
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr

08017148 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017148:	b480      	push	{r7}
 801714a:	b085      	sub	sp, #20
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8017154:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017156:	4618      	mov	r0, r3
 8017158:	3714      	adds	r7, #20
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr

08017162 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8017162:	b480      	push	{r7}
 8017164:	b085      	sub	sp, #20
 8017166:	af00      	add	r7, sp, #0
 8017168:	60f8      	str	r0, [r7, #12]
 801716a:	460b      	mov	r3, r1
 801716c:	607a      	str	r2, [r7, #4]
 801716e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8017170:	7afb      	ldrb	r3, [r7, #11]
 8017172:	2b01      	cmp	r3, #1
 8017174:	d000      	beq.n	8017178 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8017176:	e000      	b.n	801717a <MEM_If_GetStatus_FS+0x18>
    break;
 8017178:	bf00      	nop
  }
  return (USBD_OK);
 801717a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801717c:	4618      	mov	r0, r3
 801717e:	3714      	adds	r7, #20
 8017180:	46bd      	mov	sp, r7
 8017182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017186:	4770      	bx	lr

08017188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b08a      	sub	sp, #40	; 0x28
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017190:	f107 0314 	add.w	r3, r7, #20
 8017194:	2200      	movs	r2, #0
 8017196:	601a      	str	r2, [r3, #0]
 8017198:	605a      	str	r2, [r3, #4]
 801719a:	609a      	str	r2, [r3, #8]
 801719c:	60da      	str	r2, [r3, #12]
 801719e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80171a8:	d147      	bne.n	801723a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171aa:	2300      	movs	r3, #0
 80171ac:	613b      	str	r3, [r7, #16]
 80171ae:	4b25      	ldr	r3, [pc, #148]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 80171b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171b2:	4a24      	ldr	r2, [pc, #144]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 80171b4:	f043 0301 	orr.w	r3, r3, #1
 80171b8:	6313      	str	r3, [r2, #48]	; 0x30
 80171ba:	4b22      	ldr	r3, [pc, #136]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 80171bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171be:	f003 0301 	and.w	r3, r3, #1
 80171c2:	613b      	str	r3, [r7, #16]
 80171c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80171c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80171ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171cc:	2302      	movs	r3, #2
 80171ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171d0:	2300      	movs	r3, #0
 80171d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80171d4:	2303      	movs	r3, #3
 80171d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80171d8:	230a      	movs	r3, #10
 80171da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80171dc:	f107 0314 	add.w	r3, r7, #20
 80171e0:	4619      	mov	r1, r3
 80171e2:	4819      	ldr	r0, [pc, #100]	; (8017248 <HAL_PCD_MspInit+0xc0>)
 80171e4:	f7f9 fe5e 	bl	8010ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80171e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80171ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80171ee:	2300      	movs	r3, #0
 80171f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171f2:	2300      	movs	r3, #0
 80171f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80171f6:	f107 0314 	add.w	r3, r7, #20
 80171fa:	4619      	mov	r1, r3
 80171fc:	4812      	ldr	r0, [pc, #72]	; (8017248 <HAL_PCD_MspInit+0xc0>)
 80171fe:	f7f9 fe51 	bl	8010ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017202:	4b10      	ldr	r3, [pc, #64]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 8017204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017206:	4a0f      	ldr	r2, [pc, #60]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 8017208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801720c:	6353      	str	r3, [r2, #52]	; 0x34
 801720e:	2300      	movs	r3, #0
 8017210:	60fb      	str	r3, [r7, #12]
 8017212:	4b0c      	ldr	r3, [pc, #48]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 8017214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017216:	4a0b      	ldr	r2, [pc, #44]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 8017218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801721c:	6453      	str	r3, [r2, #68]	; 0x44
 801721e:	4b09      	ldr	r3, [pc, #36]	; (8017244 <HAL_PCD_MspInit+0xbc>)
 8017220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017226:	60fb      	str	r3, [r7, #12]
 8017228:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801722a:	2200      	movs	r2, #0
 801722c:	2100      	movs	r1, #0
 801722e:	2043      	movs	r0, #67	; 0x43
 8017230:	f7f9 fe01 	bl	8010e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017234:	2043      	movs	r0, #67	; 0x43
 8017236:	f7f9 fe1a 	bl	8010e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801723a:	bf00      	nop
 801723c:	3728      	adds	r7, #40	; 0x28
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
 8017242:	bf00      	nop
 8017244:	40023800 	.word	0x40023800
 8017248:	40020000 	.word	0x40020000

0801724c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017260:	4619      	mov	r1, r3
 8017262:	4610      	mov	r0, r2
 8017264:	f7fe fd58 	bl	8015d18 <USBD_LL_SetupStage>
}
 8017268:	bf00      	nop
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}

08017270 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	460b      	mov	r3, r1
 801727a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017282:	78fa      	ldrb	r2, [r7, #3]
 8017284:	6879      	ldr	r1, [r7, #4]
 8017286:	4613      	mov	r3, r2
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	1a9b      	subs	r3, r3, r2
 801728c:	009b      	lsls	r3, r3, #2
 801728e:	440b      	add	r3, r1
 8017290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	78fb      	ldrb	r3, [r7, #3]
 8017298:	4619      	mov	r1, r3
 801729a:	f7fe fd90 	bl	8015dbe <USBD_LL_DataOutStage>
}
 801729e:	bf00      	nop
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b082      	sub	sp, #8
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
 80172ae:	460b      	mov	r3, r1
 80172b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80172b8:	78fa      	ldrb	r2, [r7, #3]
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4613      	mov	r3, r2
 80172be:	00db      	lsls	r3, r3, #3
 80172c0:	1a9b      	subs	r3, r3, r2
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	440b      	add	r3, r1
 80172c6:	3348      	adds	r3, #72	; 0x48
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	78fb      	ldrb	r3, [r7, #3]
 80172cc:	4619      	mov	r1, r3
 80172ce:	f7fe fdd9 	bl	8015e84 <USBD_LL_DataInStage>
}
 80172d2:	bf00      	nop
 80172d4:	3708      	adds	r7, #8
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b082      	sub	sp, #8
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7fe fedd 	bl	80160a8 <USBD_LL_SOF>
}
 80172ee:	bf00      	nop
 80172f0:	3708      	adds	r7, #8
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b084      	sub	sp, #16
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80172fe:	2301      	movs	r3, #1
 8017300:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	68db      	ldr	r3, [r3, #12]
 8017306:	2b02      	cmp	r3, #2
 8017308:	d001      	beq.n	801730e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801730a:	f7f9 fa6f 	bl	80107ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017314:	7bfa      	ldrb	r2, [r7, #15]
 8017316:	4611      	mov	r1, r2
 8017318:	4618      	mov	r0, r3
 801731a:	f7fe fe8a 	bl	8016032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017324:	4618      	mov	r0, r3
 8017326:	f7fe fe43 	bl	8015fb0 <USBD_LL_Reset>
}
 801732a:	bf00      	nop
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
	...

08017334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017342:	4618      	mov	r0, r3
 8017344:	f7fe fe85 	bl	8016052 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	687a      	ldr	r2, [r7, #4]
 8017354:	6812      	ldr	r2, [r2, #0]
 8017356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801735a:	f043 0301 	orr.w	r3, r3, #1
 801735e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6a1b      	ldr	r3, [r3, #32]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d005      	beq.n	8017374 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017368:	4b04      	ldr	r3, [pc, #16]	; (801737c <HAL_PCD_SuspendCallback+0x48>)
 801736a:	691b      	ldr	r3, [r3, #16]
 801736c:	4a03      	ldr	r2, [pc, #12]	; (801737c <HAL_PCD_SuspendCallback+0x48>)
 801736e:	f043 0306 	orr.w	r3, r3, #6
 8017372:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017374:	bf00      	nop
 8017376:	3708      	adds	r7, #8
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	e000ed00 	.word	0xe000ed00

08017380 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801738e:	4618      	mov	r0, r3
 8017390:	f7fe fe74 	bl	801607c <USBD_LL_Resume>
}
 8017394:	bf00      	nop
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	460b      	mov	r3, r1
 80173a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80173ae:	78fa      	ldrb	r2, [r7, #3]
 80173b0:	4611      	mov	r1, r2
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7fe fe9f 	bl	80160f6 <USBD_LL_IsoOUTIncomplete>
}
 80173b8:	bf00      	nop
 80173ba:	3708      	adds	r7, #8
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}

080173c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b082      	sub	sp, #8
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	460b      	mov	r3, r1
 80173ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80173d2:	78fa      	ldrb	r2, [r7, #3]
 80173d4:	4611      	mov	r1, r2
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fe fe80 	bl	80160dc <USBD_LL_IsoINIncomplete>
}
 80173dc:	bf00      	nop
 80173de:	3708      	adds	r7, #8
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7fe fe8c 	bl	8016110 <USBD_LL_DevConnected>
}
 80173f8:	bf00      	nop
 80173fa:	3708      	adds	r7, #8
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}

08017400 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b082      	sub	sp, #8
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801740e:	4618      	mov	r0, r3
 8017410:	f7fe fe89 	bl	8016126 <USBD_LL_DevDisconnected>
}
 8017414:	bf00      	nop
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	781b      	ldrb	r3, [r3, #0]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d13f      	bne.n	80174ac <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801742c:	4a22      	ldr	r2, [pc, #136]	; (80174b8 <USBD_LL_Init+0x9c>)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4a20      	ldr	r2, [pc, #128]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017438:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801743c:	4b1e      	ldr	r3, [pc, #120]	; (80174b8 <USBD_LL_Init+0x9c>)
 801743e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017442:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017444:	4b1c      	ldr	r3, [pc, #112]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017446:	2206      	movs	r2, #6
 8017448:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801744a:	4b1b      	ldr	r3, [pc, #108]	; (80174b8 <USBD_LL_Init+0x9c>)
 801744c:	2202      	movs	r2, #2
 801744e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017450:	4b19      	ldr	r3, [pc, #100]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017452:	2200      	movs	r2, #0
 8017454:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017456:	4b18      	ldr	r3, [pc, #96]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017458:	2202      	movs	r2, #2
 801745a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801745c:	4b16      	ldr	r3, [pc, #88]	; (80174b8 <USBD_LL_Init+0x9c>)
 801745e:	2201      	movs	r2, #1
 8017460:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017462:	4b15      	ldr	r3, [pc, #84]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017464:	2200      	movs	r2, #0
 8017466:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017468:	4b13      	ldr	r3, [pc, #76]	; (80174b8 <USBD_LL_Init+0x9c>)
 801746a:	2200      	movs	r2, #0
 801746c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 801746e:	4b12      	ldr	r3, [pc, #72]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017470:	2201      	movs	r2, #1
 8017472:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8017474:	4b10      	ldr	r3, [pc, #64]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017476:	2201      	movs	r2, #1
 8017478:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801747a:	4b0f      	ldr	r3, [pc, #60]	; (80174b8 <USBD_LL_Init+0x9c>)
 801747c:	2200      	movs	r2, #0
 801747e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017480:	480d      	ldr	r0, [pc, #52]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017482:	f7f9 feba 	bl	80111fa <HAL_PCD_Init>
 8017486:	4603      	mov	r3, r0
 8017488:	2b00      	cmp	r3, #0
 801748a:	d001      	beq.n	8017490 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 801748c:	f7f9 f9ae 	bl	80107ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017490:	2180      	movs	r1, #128	; 0x80
 8017492:	4809      	ldr	r0, [pc, #36]	; (80174b8 <USBD_LL_Init+0x9c>)
 8017494:	f7fb f823 	bl	80124de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017498:	2240      	movs	r2, #64	; 0x40
 801749a:	2100      	movs	r1, #0
 801749c:	4806      	ldr	r0, [pc, #24]	; (80174b8 <USBD_LL_Init+0x9c>)
 801749e:	f7fa ffd7 	bl	8012450 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80174a2:	2280      	movs	r2, #128	; 0x80
 80174a4:	2101      	movs	r1, #1
 80174a6:	4804      	ldr	r0, [pc, #16]	; (80174b8 <USBD_LL_Init+0x9c>)
 80174a8:	f7fa ffd2 	bl	8012450 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80174ac:	2300      	movs	r3, #0
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3708      	adds	r7, #8
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	2000078c 	.word	0x2000078c

080174bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174c4:	2300      	movs	r3, #0
 80174c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7f9 ffb5 	bl	8011442 <HAL_PCD_Start>
 80174d8:	4603      	mov	r3, r0
 80174da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174dc:	7bfb      	ldrb	r3, [r7, #15]
 80174de:	4618      	mov	r0, r3
 80174e0:	f000 f962 	bl	80177a8 <USBD_Get_USB_Status>
 80174e4:	4603      	mov	r3, r0
 80174e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3710      	adds	r7, #16
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}

080174f2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80174f2:	b580      	push	{r7, lr}
 80174f4:	b084      	sub	sp, #16
 80174f6:	af00      	add	r7, sp, #0
 80174f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174fa:	2300      	movs	r3, #0
 80174fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174fe:	2300      	movs	r3, #0
 8017500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017508:	4618      	mov	r0, r3
 801750a:	f7f9 ffcd 	bl	80114a8 <HAL_PCD_Stop>
 801750e:	4603      	mov	r3, r0
 8017510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017512:	7bfb      	ldrb	r3, [r7, #15]
 8017514:	4618      	mov	r0, r3
 8017516:	f000 f947 	bl	80177a8 <USBD_Get_USB_Status>
 801751a:	4603      	mov	r3, r0
 801751c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801751e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017520:	4618      	mov	r0, r3
 8017522:	3710      	adds	r7, #16
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b084      	sub	sp, #16
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
 8017530:	4608      	mov	r0, r1
 8017532:	4611      	mov	r1, r2
 8017534:	461a      	mov	r2, r3
 8017536:	4603      	mov	r3, r0
 8017538:	70fb      	strb	r3, [r7, #3]
 801753a:	460b      	mov	r3, r1
 801753c:	70bb      	strb	r3, [r7, #2]
 801753e:	4613      	mov	r3, r2
 8017540:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017542:	2300      	movs	r3, #0
 8017544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017546:	2300      	movs	r3, #0
 8017548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017550:	78bb      	ldrb	r3, [r7, #2]
 8017552:	883a      	ldrh	r2, [r7, #0]
 8017554:	78f9      	ldrb	r1, [r7, #3]
 8017556:	f7fa fbe4 	bl	8011d22 <HAL_PCD_EP_Open>
 801755a:	4603      	mov	r3, r0
 801755c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801755e:	7bfb      	ldrb	r3, [r7, #15]
 8017560:	4618      	mov	r0, r3
 8017562:	f000 f921 	bl	80177a8 <USBD_Get_USB_Status>
 8017566:	4603      	mov	r3, r0
 8017568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801756a:	7bbb      	ldrb	r3, [r7, #14]
}
 801756c:	4618      	mov	r0, r3
 801756e:	3710      	adds	r7, #16
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}

08017574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	460b      	mov	r3, r1
 801757e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017580:	2300      	movs	r3, #0
 8017582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017584:	2300      	movs	r3, #0
 8017586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801758e:	78fa      	ldrb	r2, [r7, #3]
 8017590:	4611      	mov	r1, r2
 8017592:	4618      	mov	r0, r3
 8017594:	f7fa fcc2 	bl	8011f1c <HAL_PCD_EP_SetStall>
 8017598:	4603      	mov	r3, r0
 801759a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801759c:	7bfb      	ldrb	r3, [r7, #15]
 801759e:	4618      	mov	r0, r3
 80175a0:	f000 f902 	bl	80177a8 <USBD_Get_USB_Status>
 80175a4:	4603      	mov	r3, r0
 80175a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3710      	adds	r7, #16
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b084      	sub	sp, #16
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	6078      	str	r0, [r7, #4]
 80175ba:	460b      	mov	r3, r1
 80175bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175be:	2300      	movs	r3, #0
 80175c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175c2:	2300      	movs	r3, #0
 80175c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80175cc:	78fa      	ldrb	r2, [r7, #3]
 80175ce:	4611      	mov	r1, r2
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7fa fd07 	bl	8011fe4 <HAL_PCD_EP_ClrStall>
 80175d6:	4603      	mov	r3, r0
 80175d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175da:	7bfb      	ldrb	r3, [r7, #15]
 80175dc:	4618      	mov	r0, r3
 80175de:	f000 f8e3 	bl	80177a8 <USBD_Get_USB_Status>
 80175e2:	4603      	mov	r3, r0
 80175e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b085      	sub	sp, #20
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017608:	2b00      	cmp	r3, #0
 801760a:	da0b      	bge.n	8017624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801760c:	78fb      	ldrb	r3, [r7, #3]
 801760e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017612:	68f9      	ldr	r1, [r7, #12]
 8017614:	4613      	mov	r3, r2
 8017616:	00db      	lsls	r3, r3, #3
 8017618:	1a9b      	subs	r3, r3, r2
 801761a:	009b      	lsls	r3, r3, #2
 801761c:	440b      	add	r3, r1
 801761e:	333e      	adds	r3, #62	; 0x3e
 8017620:	781b      	ldrb	r3, [r3, #0]
 8017622:	e00b      	b.n	801763c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017624:	78fb      	ldrb	r3, [r7, #3]
 8017626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801762a:	68f9      	ldr	r1, [r7, #12]
 801762c:	4613      	mov	r3, r2
 801762e:	00db      	lsls	r3, r3, #3
 8017630:	1a9b      	subs	r3, r3, r2
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	440b      	add	r3, r1
 8017636:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801763a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801763c:	4618      	mov	r0, r3
 801763e:	3714      	adds	r7, #20
 8017640:	46bd      	mov	sp, r7
 8017642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017646:	4770      	bx	lr

08017648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b084      	sub	sp, #16
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
 8017650:	460b      	mov	r3, r1
 8017652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017654:	2300      	movs	r3, #0
 8017656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017658:	2300      	movs	r3, #0
 801765a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017662:	78fa      	ldrb	r2, [r7, #3]
 8017664:	4611      	mov	r1, r2
 8017666:	4618      	mov	r0, r3
 8017668:	f7fa fb36 	bl	8011cd8 <HAL_PCD_SetAddress>
 801766c:	4603      	mov	r3, r0
 801766e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017670:	7bfb      	ldrb	r3, [r7, #15]
 8017672:	4618      	mov	r0, r3
 8017674:	f000 f898 	bl	80177a8 <USBD_Get_USB_Status>
 8017678:	4603      	mov	r3, r0
 801767a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801767c:	7bbb      	ldrb	r3, [r7, #14]
}
 801767e:	4618      	mov	r0, r3
 8017680:	3710      	adds	r7, #16
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}

08017686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017686:	b580      	push	{r7, lr}
 8017688:	b086      	sub	sp, #24
 801768a:	af00      	add	r7, sp, #0
 801768c:	60f8      	str	r0, [r7, #12]
 801768e:	607a      	str	r2, [r7, #4]
 8017690:	603b      	str	r3, [r7, #0]
 8017692:	460b      	mov	r3, r1
 8017694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017696:	2300      	movs	r3, #0
 8017698:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801769a:	2300      	movs	r3, #0
 801769c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80176a4:	7af9      	ldrb	r1, [r7, #11]
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	f7fa fbed 	bl	8011e88 <HAL_PCD_EP_Transmit>
 80176ae:	4603      	mov	r3, r0
 80176b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176b2:	7dfb      	ldrb	r3, [r7, #23]
 80176b4:	4618      	mov	r0, r3
 80176b6:	f000 f877 	bl	80177a8 <USBD_Get_USB_Status>
 80176ba:	4603      	mov	r3, r0
 80176bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80176be:	7dbb      	ldrb	r3, [r7, #22]
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	3718      	adds	r7, #24
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b086      	sub	sp, #24
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	60f8      	str	r0, [r7, #12]
 80176d0:	607a      	str	r2, [r7, #4]
 80176d2:	603b      	str	r3, [r7, #0]
 80176d4:	460b      	mov	r3, r1
 80176d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176d8:	2300      	movs	r3, #0
 80176da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176dc:	2300      	movs	r3, #0
 80176de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80176e6:	7af9      	ldrb	r1, [r7, #11]
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	f7fa fb81 	bl	8011df2 <HAL_PCD_EP_Receive>
 80176f0:	4603      	mov	r3, r0
 80176f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176f4:	7dfb      	ldrb	r3, [r7, #23]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f000 f856 	bl	80177a8 <USBD_Get_USB_Status>
 80176fc:	4603      	mov	r3, r0
 80176fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017700:	7dbb      	ldrb	r3, [r7, #22]
}
 8017702:	4618      	mov	r0, r3
 8017704:	3718      	adds	r7, #24
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
	...

0801770c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	460b      	mov	r3, r1
 8017716:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017718:	78fb      	ldrb	r3, [r7, #3]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d002      	beq.n	8017724 <HAL_PCDEx_LPM_Callback+0x18>
 801771e:	2b01      	cmp	r3, #1
 8017720:	d01f      	beq.n	8017762 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017722:	e03b      	b.n	801779c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6a1b      	ldr	r3, [r3, #32]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d007      	beq.n	801773c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 801772c:	f7f8 ffda 	bl	80106e4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017730:	4b1c      	ldr	r3, [pc, #112]	; (80177a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017732:	691b      	ldr	r3, [r3, #16]
 8017734:	4a1b      	ldr	r2, [pc, #108]	; (80177a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017736:	f023 0306 	bic.w	r3, r3, #6
 801773a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	6812      	ldr	r2, [r2, #0]
 801774a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801774e:	f023 0301 	bic.w	r3, r3, #1
 8017752:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801775a:	4618      	mov	r0, r3
 801775c:	f7fe fc8e 	bl	801607c <USBD_LL_Resume>
    break;
 8017760:	e01c      	b.n	801779c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	6812      	ldr	r2, [r2, #0]
 8017770:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017774:	f043 0301 	orr.w	r3, r3, #1
 8017778:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017780:	4618      	mov	r0, r3
 8017782:	f7fe fc66 	bl	8016052 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6a1b      	ldr	r3, [r3, #32]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d005      	beq.n	801779a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801778e:	4b05      	ldr	r3, [pc, #20]	; (80177a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017790:	691b      	ldr	r3, [r3, #16]
 8017792:	4a04      	ldr	r2, [pc, #16]	; (80177a4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017794:	f043 0306 	orr.w	r3, r3, #6
 8017798:	6113      	str	r3, [r2, #16]
    break;
 801779a:	bf00      	nop
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	e000ed00 	.word	0xe000ed00

080177a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b085      	sub	sp, #20
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177b2:	2300      	movs	r3, #0
 80177b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80177b6:	79fb      	ldrb	r3, [r7, #7]
 80177b8:	2b03      	cmp	r3, #3
 80177ba:	d817      	bhi.n	80177ec <USBD_Get_USB_Status+0x44>
 80177bc:	a201      	add	r2, pc, #4	; (adr r2, 80177c4 <USBD_Get_USB_Status+0x1c>)
 80177be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177c2:	bf00      	nop
 80177c4:	080177d5 	.word	0x080177d5
 80177c8:	080177db 	.word	0x080177db
 80177cc:	080177e1 	.word	0x080177e1
 80177d0:	080177e7 	.word	0x080177e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	73fb      	strb	r3, [r7, #15]
    break;
 80177d8:	e00b      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80177da:	2303      	movs	r3, #3
 80177dc:	73fb      	strb	r3, [r7, #15]
    break;
 80177de:	e008      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80177e0:	2301      	movs	r3, #1
 80177e2:	73fb      	strb	r3, [r7, #15]
    break;
 80177e4:	e005      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80177e6:	2303      	movs	r3, #3
 80177e8:	73fb      	strb	r3, [r7, #15]
    break;
 80177ea:	e002      	b.n	80177f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80177ec:	2303      	movs	r3, #3
 80177ee:	73fb      	strb	r3, [r7, #15]
    break;
 80177f0:	bf00      	nop
  }
  return usb_status;
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3714      	adds	r7, #20
 80177f8:	46bd      	mov	sp, r7
 80177fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fe:	4770      	bx	lr

08017800 <__errno>:
 8017800:	4b01      	ldr	r3, [pc, #4]	; (8017808 <__errno+0x8>)
 8017802:	6818      	ldr	r0, [r3, #0]
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop
 8017808:	200000ec 	.word	0x200000ec

0801780c <__libc_init_array>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	4e0d      	ldr	r6, [pc, #52]	; (8017844 <__libc_init_array+0x38>)
 8017810:	4c0d      	ldr	r4, [pc, #52]	; (8017848 <__libc_init_array+0x3c>)
 8017812:	1ba4      	subs	r4, r4, r6
 8017814:	10a4      	asrs	r4, r4, #2
 8017816:	2500      	movs	r5, #0
 8017818:	42a5      	cmp	r5, r4
 801781a:	d109      	bne.n	8017830 <__libc_init_array+0x24>
 801781c:	4e0b      	ldr	r6, [pc, #44]	; (801784c <__libc_init_array+0x40>)
 801781e:	4c0c      	ldr	r4, [pc, #48]	; (8017850 <__libc_init_array+0x44>)
 8017820:	f000 fc98 	bl	8018154 <_init>
 8017824:	1ba4      	subs	r4, r4, r6
 8017826:	10a4      	asrs	r4, r4, #2
 8017828:	2500      	movs	r5, #0
 801782a:	42a5      	cmp	r5, r4
 801782c:	d105      	bne.n	801783a <__libc_init_array+0x2e>
 801782e:	bd70      	pop	{r4, r5, r6, pc}
 8017830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017834:	4798      	blx	r3
 8017836:	3501      	adds	r5, #1
 8017838:	e7ee      	b.n	8017818 <__libc_init_array+0xc>
 801783a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801783e:	4798      	blx	r3
 8017840:	3501      	adds	r5, #1
 8017842:	e7f2      	b.n	801782a <__libc_init_array+0x1e>
 8017844:	080182a8 	.word	0x080182a8
 8017848:	080182a8 	.word	0x080182a8
 801784c:	080182a8 	.word	0x080182a8
 8017850:	080182ac 	.word	0x080182ac

08017854 <malloc>:
 8017854:	4b02      	ldr	r3, [pc, #8]	; (8017860 <malloc+0xc>)
 8017856:	4601      	mov	r1, r0
 8017858:	6818      	ldr	r0, [r3, #0]
 801785a:	f000 b861 	b.w	8017920 <_malloc_r>
 801785e:	bf00      	nop
 8017860:	200000ec 	.word	0x200000ec

08017864 <free>:
 8017864:	4b02      	ldr	r3, [pc, #8]	; (8017870 <free+0xc>)
 8017866:	4601      	mov	r1, r0
 8017868:	6818      	ldr	r0, [r3, #0]
 801786a:	f000 b80b 	b.w	8017884 <_free_r>
 801786e:	bf00      	nop
 8017870:	200000ec 	.word	0x200000ec

08017874 <memset>:
 8017874:	4402      	add	r2, r0
 8017876:	4603      	mov	r3, r0
 8017878:	4293      	cmp	r3, r2
 801787a:	d100      	bne.n	801787e <memset+0xa>
 801787c:	4770      	bx	lr
 801787e:	f803 1b01 	strb.w	r1, [r3], #1
 8017882:	e7f9      	b.n	8017878 <memset+0x4>

08017884 <_free_r>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	4605      	mov	r5, r0
 8017888:	2900      	cmp	r1, #0
 801788a:	d045      	beq.n	8017918 <_free_r+0x94>
 801788c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017890:	1f0c      	subs	r4, r1, #4
 8017892:	2b00      	cmp	r3, #0
 8017894:	bfb8      	it	lt
 8017896:	18e4      	addlt	r4, r4, r3
 8017898:	f000 fbae 	bl	8017ff8 <__malloc_lock>
 801789c:	4a1f      	ldr	r2, [pc, #124]	; (801791c <_free_r+0x98>)
 801789e:	6813      	ldr	r3, [r2, #0]
 80178a0:	4610      	mov	r0, r2
 80178a2:	b933      	cbnz	r3, 80178b2 <_free_r+0x2e>
 80178a4:	6063      	str	r3, [r4, #4]
 80178a6:	6014      	str	r4, [r2, #0]
 80178a8:	4628      	mov	r0, r5
 80178aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178ae:	f000 bba4 	b.w	8017ffa <__malloc_unlock>
 80178b2:	42a3      	cmp	r3, r4
 80178b4:	d90c      	bls.n	80178d0 <_free_r+0x4c>
 80178b6:	6821      	ldr	r1, [r4, #0]
 80178b8:	1862      	adds	r2, r4, r1
 80178ba:	4293      	cmp	r3, r2
 80178bc:	bf04      	itt	eq
 80178be:	681a      	ldreq	r2, [r3, #0]
 80178c0:	685b      	ldreq	r3, [r3, #4]
 80178c2:	6063      	str	r3, [r4, #4]
 80178c4:	bf04      	itt	eq
 80178c6:	1852      	addeq	r2, r2, r1
 80178c8:	6022      	streq	r2, [r4, #0]
 80178ca:	6004      	str	r4, [r0, #0]
 80178cc:	e7ec      	b.n	80178a8 <_free_r+0x24>
 80178ce:	4613      	mov	r3, r2
 80178d0:	685a      	ldr	r2, [r3, #4]
 80178d2:	b10a      	cbz	r2, 80178d8 <_free_r+0x54>
 80178d4:	42a2      	cmp	r2, r4
 80178d6:	d9fa      	bls.n	80178ce <_free_r+0x4a>
 80178d8:	6819      	ldr	r1, [r3, #0]
 80178da:	1858      	adds	r0, r3, r1
 80178dc:	42a0      	cmp	r0, r4
 80178de:	d10b      	bne.n	80178f8 <_free_r+0x74>
 80178e0:	6820      	ldr	r0, [r4, #0]
 80178e2:	4401      	add	r1, r0
 80178e4:	1858      	adds	r0, r3, r1
 80178e6:	4282      	cmp	r2, r0
 80178e8:	6019      	str	r1, [r3, #0]
 80178ea:	d1dd      	bne.n	80178a8 <_free_r+0x24>
 80178ec:	6810      	ldr	r0, [r2, #0]
 80178ee:	6852      	ldr	r2, [r2, #4]
 80178f0:	605a      	str	r2, [r3, #4]
 80178f2:	4401      	add	r1, r0
 80178f4:	6019      	str	r1, [r3, #0]
 80178f6:	e7d7      	b.n	80178a8 <_free_r+0x24>
 80178f8:	d902      	bls.n	8017900 <_free_r+0x7c>
 80178fa:	230c      	movs	r3, #12
 80178fc:	602b      	str	r3, [r5, #0]
 80178fe:	e7d3      	b.n	80178a8 <_free_r+0x24>
 8017900:	6820      	ldr	r0, [r4, #0]
 8017902:	1821      	adds	r1, r4, r0
 8017904:	428a      	cmp	r2, r1
 8017906:	bf04      	itt	eq
 8017908:	6811      	ldreq	r1, [r2, #0]
 801790a:	6852      	ldreq	r2, [r2, #4]
 801790c:	6062      	str	r2, [r4, #4]
 801790e:	bf04      	itt	eq
 8017910:	1809      	addeq	r1, r1, r0
 8017912:	6021      	streq	r1, [r4, #0]
 8017914:	605c      	str	r4, [r3, #4]
 8017916:	e7c7      	b.n	80178a8 <_free_r+0x24>
 8017918:	bd38      	pop	{r3, r4, r5, pc}
 801791a:	bf00      	nop
 801791c:	20000270 	.word	0x20000270

08017920 <_malloc_r>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	1ccd      	adds	r5, r1, #3
 8017924:	f025 0503 	bic.w	r5, r5, #3
 8017928:	3508      	adds	r5, #8
 801792a:	2d0c      	cmp	r5, #12
 801792c:	bf38      	it	cc
 801792e:	250c      	movcc	r5, #12
 8017930:	2d00      	cmp	r5, #0
 8017932:	4606      	mov	r6, r0
 8017934:	db01      	blt.n	801793a <_malloc_r+0x1a>
 8017936:	42a9      	cmp	r1, r5
 8017938:	d903      	bls.n	8017942 <_malloc_r+0x22>
 801793a:	230c      	movs	r3, #12
 801793c:	6033      	str	r3, [r6, #0]
 801793e:	2000      	movs	r0, #0
 8017940:	bd70      	pop	{r4, r5, r6, pc}
 8017942:	f000 fb59 	bl	8017ff8 <__malloc_lock>
 8017946:	4a21      	ldr	r2, [pc, #132]	; (80179cc <_malloc_r+0xac>)
 8017948:	6814      	ldr	r4, [r2, #0]
 801794a:	4621      	mov	r1, r4
 801794c:	b991      	cbnz	r1, 8017974 <_malloc_r+0x54>
 801794e:	4c20      	ldr	r4, [pc, #128]	; (80179d0 <_malloc_r+0xb0>)
 8017950:	6823      	ldr	r3, [r4, #0]
 8017952:	b91b      	cbnz	r3, 801795c <_malloc_r+0x3c>
 8017954:	4630      	mov	r0, r6
 8017956:	f000 f8a1 	bl	8017a9c <_sbrk_r>
 801795a:	6020      	str	r0, [r4, #0]
 801795c:	4629      	mov	r1, r5
 801795e:	4630      	mov	r0, r6
 8017960:	f000 f89c 	bl	8017a9c <_sbrk_r>
 8017964:	1c43      	adds	r3, r0, #1
 8017966:	d124      	bne.n	80179b2 <_malloc_r+0x92>
 8017968:	230c      	movs	r3, #12
 801796a:	6033      	str	r3, [r6, #0]
 801796c:	4630      	mov	r0, r6
 801796e:	f000 fb44 	bl	8017ffa <__malloc_unlock>
 8017972:	e7e4      	b.n	801793e <_malloc_r+0x1e>
 8017974:	680b      	ldr	r3, [r1, #0]
 8017976:	1b5b      	subs	r3, r3, r5
 8017978:	d418      	bmi.n	80179ac <_malloc_r+0x8c>
 801797a:	2b0b      	cmp	r3, #11
 801797c:	d90f      	bls.n	801799e <_malloc_r+0x7e>
 801797e:	600b      	str	r3, [r1, #0]
 8017980:	50cd      	str	r5, [r1, r3]
 8017982:	18cc      	adds	r4, r1, r3
 8017984:	4630      	mov	r0, r6
 8017986:	f000 fb38 	bl	8017ffa <__malloc_unlock>
 801798a:	f104 000b 	add.w	r0, r4, #11
 801798e:	1d23      	adds	r3, r4, #4
 8017990:	f020 0007 	bic.w	r0, r0, #7
 8017994:	1ac3      	subs	r3, r0, r3
 8017996:	d0d3      	beq.n	8017940 <_malloc_r+0x20>
 8017998:	425a      	negs	r2, r3
 801799a:	50e2      	str	r2, [r4, r3]
 801799c:	e7d0      	b.n	8017940 <_malloc_r+0x20>
 801799e:	428c      	cmp	r4, r1
 80179a0:	684b      	ldr	r3, [r1, #4]
 80179a2:	bf16      	itet	ne
 80179a4:	6063      	strne	r3, [r4, #4]
 80179a6:	6013      	streq	r3, [r2, #0]
 80179a8:	460c      	movne	r4, r1
 80179aa:	e7eb      	b.n	8017984 <_malloc_r+0x64>
 80179ac:	460c      	mov	r4, r1
 80179ae:	6849      	ldr	r1, [r1, #4]
 80179b0:	e7cc      	b.n	801794c <_malloc_r+0x2c>
 80179b2:	1cc4      	adds	r4, r0, #3
 80179b4:	f024 0403 	bic.w	r4, r4, #3
 80179b8:	42a0      	cmp	r0, r4
 80179ba:	d005      	beq.n	80179c8 <_malloc_r+0xa8>
 80179bc:	1a21      	subs	r1, r4, r0
 80179be:	4630      	mov	r0, r6
 80179c0:	f000 f86c 	bl	8017a9c <_sbrk_r>
 80179c4:	3001      	adds	r0, #1
 80179c6:	d0cf      	beq.n	8017968 <_malloc_r+0x48>
 80179c8:	6025      	str	r5, [r4, #0]
 80179ca:	e7db      	b.n	8017984 <_malloc_r+0x64>
 80179cc:	20000270 	.word	0x20000270
 80179d0:	20000274 	.word	0x20000274

080179d4 <_puts_r>:
 80179d4:	b570      	push	{r4, r5, r6, lr}
 80179d6:	460e      	mov	r6, r1
 80179d8:	4605      	mov	r5, r0
 80179da:	b118      	cbz	r0, 80179e4 <_puts_r+0x10>
 80179dc:	6983      	ldr	r3, [r0, #24]
 80179de:	b90b      	cbnz	r3, 80179e4 <_puts_r+0x10>
 80179e0:	f000 fa1c 	bl	8017e1c <__sinit>
 80179e4:	69ab      	ldr	r3, [r5, #24]
 80179e6:	68ac      	ldr	r4, [r5, #8]
 80179e8:	b913      	cbnz	r3, 80179f0 <_puts_r+0x1c>
 80179ea:	4628      	mov	r0, r5
 80179ec:	f000 fa16 	bl	8017e1c <__sinit>
 80179f0:	4b23      	ldr	r3, [pc, #140]	; (8017a80 <_puts_r+0xac>)
 80179f2:	429c      	cmp	r4, r3
 80179f4:	d117      	bne.n	8017a26 <_puts_r+0x52>
 80179f6:	686c      	ldr	r4, [r5, #4]
 80179f8:	89a3      	ldrh	r3, [r4, #12]
 80179fa:	071b      	lsls	r3, r3, #28
 80179fc:	d51d      	bpl.n	8017a3a <_puts_r+0x66>
 80179fe:	6923      	ldr	r3, [r4, #16]
 8017a00:	b1db      	cbz	r3, 8017a3a <_puts_r+0x66>
 8017a02:	3e01      	subs	r6, #1
 8017a04:	68a3      	ldr	r3, [r4, #8]
 8017a06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	60a3      	str	r3, [r4, #8]
 8017a0e:	b9e9      	cbnz	r1, 8017a4c <_puts_r+0x78>
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	da2e      	bge.n	8017a72 <_puts_r+0x9e>
 8017a14:	4622      	mov	r2, r4
 8017a16:	210a      	movs	r1, #10
 8017a18:	4628      	mov	r0, r5
 8017a1a:	f000 f84f 	bl	8017abc <__swbuf_r>
 8017a1e:	3001      	adds	r0, #1
 8017a20:	d011      	beq.n	8017a46 <_puts_r+0x72>
 8017a22:	200a      	movs	r0, #10
 8017a24:	e011      	b.n	8017a4a <_puts_r+0x76>
 8017a26:	4b17      	ldr	r3, [pc, #92]	; (8017a84 <_puts_r+0xb0>)
 8017a28:	429c      	cmp	r4, r3
 8017a2a:	d101      	bne.n	8017a30 <_puts_r+0x5c>
 8017a2c:	68ac      	ldr	r4, [r5, #8]
 8017a2e:	e7e3      	b.n	80179f8 <_puts_r+0x24>
 8017a30:	4b15      	ldr	r3, [pc, #84]	; (8017a88 <_puts_r+0xb4>)
 8017a32:	429c      	cmp	r4, r3
 8017a34:	bf08      	it	eq
 8017a36:	68ec      	ldreq	r4, [r5, #12]
 8017a38:	e7de      	b.n	80179f8 <_puts_r+0x24>
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	4628      	mov	r0, r5
 8017a3e:	f000 f88f 	bl	8017b60 <__swsetup_r>
 8017a42:	2800      	cmp	r0, #0
 8017a44:	d0dd      	beq.n	8017a02 <_puts_r+0x2e>
 8017a46:	f04f 30ff 	mov.w	r0, #4294967295
 8017a4a:	bd70      	pop	{r4, r5, r6, pc}
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	da04      	bge.n	8017a5a <_puts_r+0x86>
 8017a50:	69a2      	ldr	r2, [r4, #24]
 8017a52:	429a      	cmp	r2, r3
 8017a54:	dc06      	bgt.n	8017a64 <_puts_r+0x90>
 8017a56:	290a      	cmp	r1, #10
 8017a58:	d004      	beq.n	8017a64 <_puts_r+0x90>
 8017a5a:	6823      	ldr	r3, [r4, #0]
 8017a5c:	1c5a      	adds	r2, r3, #1
 8017a5e:	6022      	str	r2, [r4, #0]
 8017a60:	7019      	strb	r1, [r3, #0]
 8017a62:	e7cf      	b.n	8017a04 <_puts_r+0x30>
 8017a64:	4622      	mov	r2, r4
 8017a66:	4628      	mov	r0, r5
 8017a68:	f000 f828 	bl	8017abc <__swbuf_r>
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	d1c9      	bne.n	8017a04 <_puts_r+0x30>
 8017a70:	e7e9      	b.n	8017a46 <_puts_r+0x72>
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	200a      	movs	r0, #10
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	6022      	str	r2, [r4, #0]
 8017a7a:	7018      	strb	r0, [r3, #0]
 8017a7c:	e7e5      	b.n	8017a4a <_puts_r+0x76>
 8017a7e:	bf00      	nop
 8017a80:	08018260 	.word	0x08018260
 8017a84:	08018280 	.word	0x08018280
 8017a88:	08018240 	.word	0x08018240

08017a8c <puts>:
 8017a8c:	4b02      	ldr	r3, [pc, #8]	; (8017a98 <puts+0xc>)
 8017a8e:	4601      	mov	r1, r0
 8017a90:	6818      	ldr	r0, [r3, #0]
 8017a92:	f7ff bf9f 	b.w	80179d4 <_puts_r>
 8017a96:	bf00      	nop
 8017a98:	200000ec 	.word	0x200000ec

08017a9c <_sbrk_r>:
 8017a9c:	b538      	push	{r3, r4, r5, lr}
 8017a9e:	4c06      	ldr	r4, [pc, #24]	; (8017ab8 <_sbrk_r+0x1c>)
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4605      	mov	r5, r0
 8017aa4:	4608      	mov	r0, r1
 8017aa6:	6023      	str	r3, [r4, #0]
 8017aa8:	f7f8 ff6e 	bl	8010988 <_sbrk>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_sbrk_r+0x1a>
 8017ab0:	6823      	ldr	r3, [r4, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_sbrk_r+0x1a>
 8017ab4:	602b      	str	r3, [r5, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	20000b94 	.word	0x20000b94

08017abc <__swbuf_r>:
 8017abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017abe:	460e      	mov	r6, r1
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	4605      	mov	r5, r0
 8017ac4:	b118      	cbz	r0, 8017ace <__swbuf_r+0x12>
 8017ac6:	6983      	ldr	r3, [r0, #24]
 8017ac8:	b90b      	cbnz	r3, 8017ace <__swbuf_r+0x12>
 8017aca:	f000 f9a7 	bl	8017e1c <__sinit>
 8017ace:	4b21      	ldr	r3, [pc, #132]	; (8017b54 <__swbuf_r+0x98>)
 8017ad0:	429c      	cmp	r4, r3
 8017ad2:	d12a      	bne.n	8017b2a <__swbuf_r+0x6e>
 8017ad4:	686c      	ldr	r4, [r5, #4]
 8017ad6:	69a3      	ldr	r3, [r4, #24]
 8017ad8:	60a3      	str	r3, [r4, #8]
 8017ada:	89a3      	ldrh	r3, [r4, #12]
 8017adc:	071a      	lsls	r2, r3, #28
 8017ade:	d52e      	bpl.n	8017b3e <__swbuf_r+0x82>
 8017ae0:	6923      	ldr	r3, [r4, #16]
 8017ae2:	b363      	cbz	r3, 8017b3e <__swbuf_r+0x82>
 8017ae4:	6923      	ldr	r3, [r4, #16]
 8017ae6:	6820      	ldr	r0, [r4, #0]
 8017ae8:	1ac0      	subs	r0, r0, r3
 8017aea:	6963      	ldr	r3, [r4, #20]
 8017aec:	b2f6      	uxtb	r6, r6
 8017aee:	4283      	cmp	r3, r0
 8017af0:	4637      	mov	r7, r6
 8017af2:	dc04      	bgt.n	8017afe <__swbuf_r+0x42>
 8017af4:	4621      	mov	r1, r4
 8017af6:	4628      	mov	r0, r5
 8017af8:	f000 f926 	bl	8017d48 <_fflush_r>
 8017afc:	bb28      	cbnz	r0, 8017b4a <__swbuf_r+0x8e>
 8017afe:	68a3      	ldr	r3, [r4, #8]
 8017b00:	3b01      	subs	r3, #1
 8017b02:	60a3      	str	r3, [r4, #8]
 8017b04:	6823      	ldr	r3, [r4, #0]
 8017b06:	1c5a      	adds	r2, r3, #1
 8017b08:	6022      	str	r2, [r4, #0]
 8017b0a:	701e      	strb	r6, [r3, #0]
 8017b0c:	6963      	ldr	r3, [r4, #20]
 8017b0e:	3001      	adds	r0, #1
 8017b10:	4283      	cmp	r3, r0
 8017b12:	d004      	beq.n	8017b1e <__swbuf_r+0x62>
 8017b14:	89a3      	ldrh	r3, [r4, #12]
 8017b16:	07db      	lsls	r3, r3, #31
 8017b18:	d519      	bpl.n	8017b4e <__swbuf_r+0x92>
 8017b1a:	2e0a      	cmp	r6, #10
 8017b1c:	d117      	bne.n	8017b4e <__swbuf_r+0x92>
 8017b1e:	4621      	mov	r1, r4
 8017b20:	4628      	mov	r0, r5
 8017b22:	f000 f911 	bl	8017d48 <_fflush_r>
 8017b26:	b190      	cbz	r0, 8017b4e <__swbuf_r+0x92>
 8017b28:	e00f      	b.n	8017b4a <__swbuf_r+0x8e>
 8017b2a:	4b0b      	ldr	r3, [pc, #44]	; (8017b58 <__swbuf_r+0x9c>)
 8017b2c:	429c      	cmp	r4, r3
 8017b2e:	d101      	bne.n	8017b34 <__swbuf_r+0x78>
 8017b30:	68ac      	ldr	r4, [r5, #8]
 8017b32:	e7d0      	b.n	8017ad6 <__swbuf_r+0x1a>
 8017b34:	4b09      	ldr	r3, [pc, #36]	; (8017b5c <__swbuf_r+0xa0>)
 8017b36:	429c      	cmp	r4, r3
 8017b38:	bf08      	it	eq
 8017b3a:	68ec      	ldreq	r4, [r5, #12]
 8017b3c:	e7cb      	b.n	8017ad6 <__swbuf_r+0x1a>
 8017b3e:	4621      	mov	r1, r4
 8017b40:	4628      	mov	r0, r5
 8017b42:	f000 f80d 	bl	8017b60 <__swsetup_r>
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d0cc      	beq.n	8017ae4 <__swbuf_r+0x28>
 8017b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b4e:	4638      	mov	r0, r7
 8017b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b52:	bf00      	nop
 8017b54:	08018260 	.word	0x08018260
 8017b58:	08018280 	.word	0x08018280
 8017b5c:	08018240 	.word	0x08018240

08017b60 <__swsetup_r>:
 8017b60:	4b32      	ldr	r3, [pc, #200]	; (8017c2c <__swsetup_r+0xcc>)
 8017b62:	b570      	push	{r4, r5, r6, lr}
 8017b64:	681d      	ldr	r5, [r3, #0]
 8017b66:	4606      	mov	r6, r0
 8017b68:	460c      	mov	r4, r1
 8017b6a:	b125      	cbz	r5, 8017b76 <__swsetup_r+0x16>
 8017b6c:	69ab      	ldr	r3, [r5, #24]
 8017b6e:	b913      	cbnz	r3, 8017b76 <__swsetup_r+0x16>
 8017b70:	4628      	mov	r0, r5
 8017b72:	f000 f953 	bl	8017e1c <__sinit>
 8017b76:	4b2e      	ldr	r3, [pc, #184]	; (8017c30 <__swsetup_r+0xd0>)
 8017b78:	429c      	cmp	r4, r3
 8017b7a:	d10f      	bne.n	8017b9c <__swsetup_r+0x3c>
 8017b7c:	686c      	ldr	r4, [r5, #4]
 8017b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b82:	b29a      	uxth	r2, r3
 8017b84:	0715      	lsls	r5, r2, #28
 8017b86:	d42c      	bmi.n	8017be2 <__swsetup_r+0x82>
 8017b88:	06d0      	lsls	r0, r2, #27
 8017b8a:	d411      	bmi.n	8017bb0 <__swsetup_r+0x50>
 8017b8c:	2209      	movs	r2, #9
 8017b8e:	6032      	str	r2, [r6, #0]
 8017b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b94:	81a3      	strh	r3, [r4, #12]
 8017b96:	f04f 30ff 	mov.w	r0, #4294967295
 8017b9a:	e03e      	b.n	8017c1a <__swsetup_r+0xba>
 8017b9c:	4b25      	ldr	r3, [pc, #148]	; (8017c34 <__swsetup_r+0xd4>)
 8017b9e:	429c      	cmp	r4, r3
 8017ba0:	d101      	bne.n	8017ba6 <__swsetup_r+0x46>
 8017ba2:	68ac      	ldr	r4, [r5, #8]
 8017ba4:	e7eb      	b.n	8017b7e <__swsetup_r+0x1e>
 8017ba6:	4b24      	ldr	r3, [pc, #144]	; (8017c38 <__swsetup_r+0xd8>)
 8017ba8:	429c      	cmp	r4, r3
 8017baa:	bf08      	it	eq
 8017bac:	68ec      	ldreq	r4, [r5, #12]
 8017bae:	e7e6      	b.n	8017b7e <__swsetup_r+0x1e>
 8017bb0:	0751      	lsls	r1, r2, #29
 8017bb2:	d512      	bpl.n	8017bda <__swsetup_r+0x7a>
 8017bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bb6:	b141      	cbz	r1, 8017bca <__swsetup_r+0x6a>
 8017bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bbc:	4299      	cmp	r1, r3
 8017bbe:	d002      	beq.n	8017bc6 <__swsetup_r+0x66>
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f7ff fe5f 	bl	8017884 <_free_r>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8017bca:	89a3      	ldrh	r3, [r4, #12]
 8017bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017bd0:	81a3      	strh	r3, [r4, #12]
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	6063      	str	r3, [r4, #4]
 8017bd6:	6923      	ldr	r3, [r4, #16]
 8017bd8:	6023      	str	r3, [r4, #0]
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	f043 0308 	orr.w	r3, r3, #8
 8017be0:	81a3      	strh	r3, [r4, #12]
 8017be2:	6923      	ldr	r3, [r4, #16]
 8017be4:	b94b      	cbnz	r3, 8017bfa <__swsetup_r+0x9a>
 8017be6:	89a3      	ldrh	r3, [r4, #12]
 8017be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017bf0:	d003      	beq.n	8017bfa <__swsetup_r+0x9a>
 8017bf2:	4621      	mov	r1, r4
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	f000 f9bf 	bl	8017f78 <__smakebuf_r>
 8017bfa:	89a2      	ldrh	r2, [r4, #12]
 8017bfc:	f012 0301 	ands.w	r3, r2, #1
 8017c00:	d00c      	beq.n	8017c1c <__swsetup_r+0xbc>
 8017c02:	2300      	movs	r3, #0
 8017c04:	60a3      	str	r3, [r4, #8]
 8017c06:	6963      	ldr	r3, [r4, #20]
 8017c08:	425b      	negs	r3, r3
 8017c0a:	61a3      	str	r3, [r4, #24]
 8017c0c:	6923      	ldr	r3, [r4, #16]
 8017c0e:	b953      	cbnz	r3, 8017c26 <__swsetup_r+0xc6>
 8017c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017c18:	d1ba      	bne.n	8017b90 <__swsetup_r+0x30>
 8017c1a:	bd70      	pop	{r4, r5, r6, pc}
 8017c1c:	0792      	lsls	r2, r2, #30
 8017c1e:	bf58      	it	pl
 8017c20:	6963      	ldrpl	r3, [r4, #20]
 8017c22:	60a3      	str	r3, [r4, #8]
 8017c24:	e7f2      	b.n	8017c0c <__swsetup_r+0xac>
 8017c26:	2000      	movs	r0, #0
 8017c28:	e7f7      	b.n	8017c1a <__swsetup_r+0xba>
 8017c2a:	bf00      	nop
 8017c2c:	200000ec 	.word	0x200000ec
 8017c30:	08018260 	.word	0x08018260
 8017c34:	08018280 	.word	0x08018280
 8017c38:	08018240 	.word	0x08018240

08017c3c <__sflush_r>:
 8017c3c:	898a      	ldrh	r2, [r1, #12]
 8017c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c42:	4605      	mov	r5, r0
 8017c44:	0710      	lsls	r0, r2, #28
 8017c46:	460c      	mov	r4, r1
 8017c48:	d458      	bmi.n	8017cfc <__sflush_r+0xc0>
 8017c4a:	684b      	ldr	r3, [r1, #4]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	dc05      	bgt.n	8017c5c <__sflush_r+0x20>
 8017c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	dc02      	bgt.n	8017c5c <__sflush_r+0x20>
 8017c56:	2000      	movs	r0, #0
 8017c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017c5e:	2e00      	cmp	r6, #0
 8017c60:	d0f9      	beq.n	8017c56 <__sflush_r+0x1a>
 8017c62:	2300      	movs	r3, #0
 8017c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017c68:	682f      	ldr	r7, [r5, #0]
 8017c6a:	6a21      	ldr	r1, [r4, #32]
 8017c6c:	602b      	str	r3, [r5, #0]
 8017c6e:	d032      	beq.n	8017cd6 <__sflush_r+0x9a>
 8017c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017c72:	89a3      	ldrh	r3, [r4, #12]
 8017c74:	075a      	lsls	r2, r3, #29
 8017c76:	d505      	bpl.n	8017c84 <__sflush_r+0x48>
 8017c78:	6863      	ldr	r3, [r4, #4]
 8017c7a:	1ac0      	subs	r0, r0, r3
 8017c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c7e:	b10b      	cbz	r3, 8017c84 <__sflush_r+0x48>
 8017c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017c82:	1ac0      	subs	r0, r0, r3
 8017c84:	2300      	movs	r3, #0
 8017c86:	4602      	mov	r2, r0
 8017c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017c8a:	6a21      	ldr	r1, [r4, #32]
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	47b0      	blx	r6
 8017c90:	1c43      	adds	r3, r0, #1
 8017c92:	89a3      	ldrh	r3, [r4, #12]
 8017c94:	d106      	bne.n	8017ca4 <__sflush_r+0x68>
 8017c96:	6829      	ldr	r1, [r5, #0]
 8017c98:	291d      	cmp	r1, #29
 8017c9a:	d848      	bhi.n	8017d2e <__sflush_r+0xf2>
 8017c9c:	4a29      	ldr	r2, [pc, #164]	; (8017d44 <__sflush_r+0x108>)
 8017c9e:	40ca      	lsrs	r2, r1
 8017ca0:	07d6      	lsls	r6, r2, #31
 8017ca2:	d544      	bpl.n	8017d2e <__sflush_r+0xf2>
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	6062      	str	r2, [r4, #4]
 8017ca8:	04d9      	lsls	r1, r3, #19
 8017caa:	6922      	ldr	r2, [r4, #16]
 8017cac:	6022      	str	r2, [r4, #0]
 8017cae:	d504      	bpl.n	8017cba <__sflush_r+0x7e>
 8017cb0:	1c42      	adds	r2, r0, #1
 8017cb2:	d101      	bne.n	8017cb8 <__sflush_r+0x7c>
 8017cb4:	682b      	ldr	r3, [r5, #0]
 8017cb6:	b903      	cbnz	r3, 8017cba <__sflush_r+0x7e>
 8017cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8017cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cbc:	602f      	str	r7, [r5, #0]
 8017cbe:	2900      	cmp	r1, #0
 8017cc0:	d0c9      	beq.n	8017c56 <__sflush_r+0x1a>
 8017cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cc6:	4299      	cmp	r1, r3
 8017cc8:	d002      	beq.n	8017cd0 <__sflush_r+0x94>
 8017cca:	4628      	mov	r0, r5
 8017ccc:	f7ff fdda 	bl	8017884 <_free_r>
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8017cd4:	e7c0      	b.n	8017c58 <__sflush_r+0x1c>
 8017cd6:	2301      	movs	r3, #1
 8017cd8:	4628      	mov	r0, r5
 8017cda:	47b0      	blx	r6
 8017cdc:	1c41      	adds	r1, r0, #1
 8017cde:	d1c8      	bne.n	8017c72 <__sflush_r+0x36>
 8017ce0:	682b      	ldr	r3, [r5, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d0c5      	beq.n	8017c72 <__sflush_r+0x36>
 8017ce6:	2b1d      	cmp	r3, #29
 8017ce8:	d001      	beq.n	8017cee <__sflush_r+0xb2>
 8017cea:	2b16      	cmp	r3, #22
 8017cec:	d101      	bne.n	8017cf2 <__sflush_r+0xb6>
 8017cee:	602f      	str	r7, [r5, #0]
 8017cf0:	e7b1      	b.n	8017c56 <__sflush_r+0x1a>
 8017cf2:	89a3      	ldrh	r3, [r4, #12]
 8017cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017cf8:	81a3      	strh	r3, [r4, #12]
 8017cfa:	e7ad      	b.n	8017c58 <__sflush_r+0x1c>
 8017cfc:	690f      	ldr	r7, [r1, #16]
 8017cfe:	2f00      	cmp	r7, #0
 8017d00:	d0a9      	beq.n	8017c56 <__sflush_r+0x1a>
 8017d02:	0793      	lsls	r3, r2, #30
 8017d04:	680e      	ldr	r6, [r1, #0]
 8017d06:	bf08      	it	eq
 8017d08:	694b      	ldreq	r3, [r1, #20]
 8017d0a:	600f      	str	r7, [r1, #0]
 8017d0c:	bf18      	it	ne
 8017d0e:	2300      	movne	r3, #0
 8017d10:	eba6 0807 	sub.w	r8, r6, r7
 8017d14:	608b      	str	r3, [r1, #8]
 8017d16:	f1b8 0f00 	cmp.w	r8, #0
 8017d1a:	dd9c      	ble.n	8017c56 <__sflush_r+0x1a>
 8017d1c:	4643      	mov	r3, r8
 8017d1e:	463a      	mov	r2, r7
 8017d20:	6a21      	ldr	r1, [r4, #32]
 8017d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017d24:	4628      	mov	r0, r5
 8017d26:	47b0      	blx	r6
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	dc06      	bgt.n	8017d3a <__sflush_r+0xfe>
 8017d2c:	89a3      	ldrh	r3, [r4, #12]
 8017d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d32:	81a3      	strh	r3, [r4, #12]
 8017d34:	f04f 30ff 	mov.w	r0, #4294967295
 8017d38:	e78e      	b.n	8017c58 <__sflush_r+0x1c>
 8017d3a:	4407      	add	r7, r0
 8017d3c:	eba8 0800 	sub.w	r8, r8, r0
 8017d40:	e7e9      	b.n	8017d16 <__sflush_r+0xda>
 8017d42:	bf00      	nop
 8017d44:	20400001 	.word	0x20400001

08017d48 <_fflush_r>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	690b      	ldr	r3, [r1, #16]
 8017d4c:	4605      	mov	r5, r0
 8017d4e:	460c      	mov	r4, r1
 8017d50:	b1db      	cbz	r3, 8017d8a <_fflush_r+0x42>
 8017d52:	b118      	cbz	r0, 8017d5c <_fflush_r+0x14>
 8017d54:	6983      	ldr	r3, [r0, #24]
 8017d56:	b90b      	cbnz	r3, 8017d5c <_fflush_r+0x14>
 8017d58:	f000 f860 	bl	8017e1c <__sinit>
 8017d5c:	4b0c      	ldr	r3, [pc, #48]	; (8017d90 <_fflush_r+0x48>)
 8017d5e:	429c      	cmp	r4, r3
 8017d60:	d109      	bne.n	8017d76 <_fflush_r+0x2e>
 8017d62:	686c      	ldr	r4, [r5, #4]
 8017d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d68:	b17b      	cbz	r3, 8017d8a <_fflush_r+0x42>
 8017d6a:	4621      	mov	r1, r4
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d72:	f7ff bf63 	b.w	8017c3c <__sflush_r>
 8017d76:	4b07      	ldr	r3, [pc, #28]	; (8017d94 <_fflush_r+0x4c>)
 8017d78:	429c      	cmp	r4, r3
 8017d7a:	d101      	bne.n	8017d80 <_fflush_r+0x38>
 8017d7c:	68ac      	ldr	r4, [r5, #8]
 8017d7e:	e7f1      	b.n	8017d64 <_fflush_r+0x1c>
 8017d80:	4b05      	ldr	r3, [pc, #20]	; (8017d98 <_fflush_r+0x50>)
 8017d82:	429c      	cmp	r4, r3
 8017d84:	bf08      	it	eq
 8017d86:	68ec      	ldreq	r4, [r5, #12]
 8017d88:	e7ec      	b.n	8017d64 <_fflush_r+0x1c>
 8017d8a:	2000      	movs	r0, #0
 8017d8c:	bd38      	pop	{r3, r4, r5, pc}
 8017d8e:	bf00      	nop
 8017d90:	08018260 	.word	0x08018260
 8017d94:	08018280 	.word	0x08018280
 8017d98:	08018240 	.word	0x08018240

08017d9c <std>:
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	b510      	push	{r4, lr}
 8017da0:	4604      	mov	r4, r0
 8017da2:	e9c0 3300 	strd	r3, r3, [r0]
 8017da6:	6083      	str	r3, [r0, #8]
 8017da8:	8181      	strh	r1, [r0, #12]
 8017daa:	6643      	str	r3, [r0, #100]	; 0x64
 8017dac:	81c2      	strh	r2, [r0, #14]
 8017dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017db2:	6183      	str	r3, [r0, #24]
 8017db4:	4619      	mov	r1, r3
 8017db6:	2208      	movs	r2, #8
 8017db8:	305c      	adds	r0, #92	; 0x5c
 8017dba:	f7ff fd5b 	bl	8017874 <memset>
 8017dbe:	4b05      	ldr	r3, [pc, #20]	; (8017dd4 <std+0x38>)
 8017dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8017dc2:	4b05      	ldr	r3, [pc, #20]	; (8017dd8 <std+0x3c>)
 8017dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8017dc6:	4b05      	ldr	r3, [pc, #20]	; (8017ddc <std+0x40>)
 8017dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017dca:	4b05      	ldr	r3, [pc, #20]	; (8017de0 <std+0x44>)
 8017dcc:	6224      	str	r4, [r4, #32]
 8017dce:	6323      	str	r3, [r4, #48]	; 0x30
 8017dd0:	bd10      	pop	{r4, pc}
 8017dd2:	bf00      	nop
 8017dd4:	08017ffd 	.word	0x08017ffd
 8017dd8:	0801801f 	.word	0x0801801f
 8017ddc:	08018057 	.word	0x08018057
 8017de0:	0801807b 	.word	0x0801807b

08017de4 <_cleanup_r>:
 8017de4:	4901      	ldr	r1, [pc, #4]	; (8017dec <_cleanup_r+0x8>)
 8017de6:	f000 b885 	b.w	8017ef4 <_fwalk_reent>
 8017dea:	bf00      	nop
 8017dec:	08017d49 	.word	0x08017d49

08017df0 <__sfmoreglue>:
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	1e4a      	subs	r2, r1, #1
 8017df4:	2568      	movs	r5, #104	; 0x68
 8017df6:	4355      	muls	r5, r2
 8017df8:	460e      	mov	r6, r1
 8017dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017dfe:	f7ff fd8f 	bl	8017920 <_malloc_r>
 8017e02:	4604      	mov	r4, r0
 8017e04:	b140      	cbz	r0, 8017e18 <__sfmoreglue+0x28>
 8017e06:	2100      	movs	r1, #0
 8017e08:	e9c0 1600 	strd	r1, r6, [r0]
 8017e0c:	300c      	adds	r0, #12
 8017e0e:	60a0      	str	r0, [r4, #8]
 8017e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017e14:	f7ff fd2e 	bl	8017874 <memset>
 8017e18:	4620      	mov	r0, r4
 8017e1a:	bd70      	pop	{r4, r5, r6, pc}

08017e1c <__sinit>:
 8017e1c:	6983      	ldr	r3, [r0, #24]
 8017e1e:	b510      	push	{r4, lr}
 8017e20:	4604      	mov	r4, r0
 8017e22:	bb33      	cbnz	r3, 8017e72 <__sinit+0x56>
 8017e24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017e28:	6503      	str	r3, [r0, #80]	; 0x50
 8017e2a:	4b12      	ldr	r3, [pc, #72]	; (8017e74 <__sinit+0x58>)
 8017e2c:	4a12      	ldr	r2, [pc, #72]	; (8017e78 <__sinit+0x5c>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	6282      	str	r2, [r0, #40]	; 0x28
 8017e32:	4298      	cmp	r0, r3
 8017e34:	bf04      	itt	eq
 8017e36:	2301      	moveq	r3, #1
 8017e38:	6183      	streq	r3, [r0, #24]
 8017e3a:	f000 f81f 	bl	8017e7c <__sfp>
 8017e3e:	6060      	str	r0, [r4, #4]
 8017e40:	4620      	mov	r0, r4
 8017e42:	f000 f81b 	bl	8017e7c <__sfp>
 8017e46:	60a0      	str	r0, [r4, #8]
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f000 f817 	bl	8017e7c <__sfp>
 8017e4e:	2200      	movs	r2, #0
 8017e50:	60e0      	str	r0, [r4, #12]
 8017e52:	2104      	movs	r1, #4
 8017e54:	6860      	ldr	r0, [r4, #4]
 8017e56:	f7ff ffa1 	bl	8017d9c <std>
 8017e5a:	2201      	movs	r2, #1
 8017e5c:	2109      	movs	r1, #9
 8017e5e:	68a0      	ldr	r0, [r4, #8]
 8017e60:	f7ff ff9c 	bl	8017d9c <std>
 8017e64:	2202      	movs	r2, #2
 8017e66:	2112      	movs	r1, #18
 8017e68:	68e0      	ldr	r0, [r4, #12]
 8017e6a:	f7ff ff97 	bl	8017d9c <std>
 8017e6e:	2301      	movs	r3, #1
 8017e70:	61a3      	str	r3, [r4, #24]
 8017e72:	bd10      	pop	{r4, pc}
 8017e74:	0801823c 	.word	0x0801823c
 8017e78:	08017de5 	.word	0x08017de5

08017e7c <__sfp>:
 8017e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e7e:	4b1b      	ldr	r3, [pc, #108]	; (8017eec <__sfp+0x70>)
 8017e80:	681e      	ldr	r6, [r3, #0]
 8017e82:	69b3      	ldr	r3, [r6, #24]
 8017e84:	4607      	mov	r7, r0
 8017e86:	b913      	cbnz	r3, 8017e8e <__sfp+0x12>
 8017e88:	4630      	mov	r0, r6
 8017e8a:	f7ff ffc7 	bl	8017e1c <__sinit>
 8017e8e:	3648      	adds	r6, #72	; 0x48
 8017e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e94:	3b01      	subs	r3, #1
 8017e96:	d503      	bpl.n	8017ea0 <__sfp+0x24>
 8017e98:	6833      	ldr	r3, [r6, #0]
 8017e9a:	b133      	cbz	r3, 8017eaa <__sfp+0x2e>
 8017e9c:	6836      	ldr	r6, [r6, #0]
 8017e9e:	e7f7      	b.n	8017e90 <__sfp+0x14>
 8017ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017ea4:	b16d      	cbz	r5, 8017ec2 <__sfp+0x46>
 8017ea6:	3468      	adds	r4, #104	; 0x68
 8017ea8:	e7f4      	b.n	8017e94 <__sfp+0x18>
 8017eaa:	2104      	movs	r1, #4
 8017eac:	4638      	mov	r0, r7
 8017eae:	f7ff ff9f 	bl	8017df0 <__sfmoreglue>
 8017eb2:	6030      	str	r0, [r6, #0]
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	d1f1      	bne.n	8017e9c <__sfp+0x20>
 8017eb8:	230c      	movs	r3, #12
 8017eba:	603b      	str	r3, [r7, #0]
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ec2:	4b0b      	ldr	r3, [pc, #44]	; (8017ef0 <__sfp+0x74>)
 8017ec4:	6665      	str	r5, [r4, #100]	; 0x64
 8017ec6:	e9c4 5500 	strd	r5, r5, [r4]
 8017eca:	60a5      	str	r5, [r4, #8]
 8017ecc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017ed0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017ed4:	2208      	movs	r2, #8
 8017ed6:	4629      	mov	r1, r5
 8017ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017edc:	f7ff fcca 	bl	8017874 <memset>
 8017ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017ee8:	e7e9      	b.n	8017ebe <__sfp+0x42>
 8017eea:	bf00      	nop
 8017eec:	0801823c 	.word	0x0801823c
 8017ef0:	ffff0001 	.word	0xffff0001

08017ef4 <_fwalk_reent>:
 8017ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ef8:	4680      	mov	r8, r0
 8017efa:	4689      	mov	r9, r1
 8017efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017f00:	2600      	movs	r6, #0
 8017f02:	b914      	cbnz	r4, 8017f0a <_fwalk_reent+0x16>
 8017f04:	4630      	mov	r0, r6
 8017f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017f0e:	3f01      	subs	r7, #1
 8017f10:	d501      	bpl.n	8017f16 <_fwalk_reent+0x22>
 8017f12:	6824      	ldr	r4, [r4, #0]
 8017f14:	e7f5      	b.n	8017f02 <_fwalk_reent+0xe>
 8017f16:	89ab      	ldrh	r3, [r5, #12]
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d907      	bls.n	8017f2c <_fwalk_reent+0x38>
 8017f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f20:	3301      	adds	r3, #1
 8017f22:	d003      	beq.n	8017f2c <_fwalk_reent+0x38>
 8017f24:	4629      	mov	r1, r5
 8017f26:	4640      	mov	r0, r8
 8017f28:	47c8      	blx	r9
 8017f2a:	4306      	orrs	r6, r0
 8017f2c:	3568      	adds	r5, #104	; 0x68
 8017f2e:	e7ee      	b.n	8017f0e <_fwalk_reent+0x1a>

08017f30 <__swhatbuf_r>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	460e      	mov	r6, r1
 8017f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f38:	2900      	cmp	r1, #0
 8017f3a:	b096      	sub	sp, #88	; 0x58
 8017f3c:	4614      	mov	r4, r2
 8017f3e:	461d      	mov	r5, r3
 8017f40:	da07      	bge.n	8017f52 <__swhatbuf_r+0x22>
 8017f42:	2300      	movs	r3, #0
 8017f44:	602b      	str	r3, [r5, #0]
 8017f46:	89b3      	ldrh	r3, [r6, #12]
 8017f48:	061a      	lsls	r2, r3, #24
 8017f4a:	d410      	bmi.n	8017f6e <__swhatbuf_r+0x3e>
 8017f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f50:	e00e      	b.n	8017f70 <__swhatbuf_r+0x40>
 8017f52:	466a      	mov	r2, sp
 8017f54:	f000 f8b8 	bl	80180c8 <_fstat_r>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	dbf2      	blt.n	8017f42 <__swhatbuf_r+0x12>
 8017f5c:	9a01      	ldr	r2, [sp, #4]
 8017f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f66:	425a      	negs	r2, r3
 8017f68:	415a      	adcs	r2, r3
 8017f6a:	602a      	str	r2, [r5, #0]
 8017f6c:	e7ee      	b.n	8017f4c <__swhatbuf_r+0x1c>
 8017f6e:	2340      	movs	r3, #64	; 0x40
 8017f70:	2000      	movs	r0, #0
 8017f72:	6023      	str	r3, [r4, #0]
 8017f74:	b016      	add	sp, #88	; 0x58
 8017f76:	bd70      	pop	{r4, r5, r6, pc}

08017f78 <__smakebuf_r>:
 8017f78:	898b      	ldrh	r3, [r1, #12]
 8017f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f7c:	079d      	lsls	r5, r3, #30
 8017f7e:	4606      	mov	r6, r0
 8017f80:	460c      	mov	r4, r1
 8017f82:	d507      	bpl.n	8017f94 <__smakebuf_r+0x1c>
 8017f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f88:	6023      	str	r3, [r4, #0]
 8017f8a:	6123      	str	r3, [r4, #16]
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	6163      	str	r3, [r4, #20]
 8017f90:	b002      	add	sp, #8
 8017f92:	bd70      	pop	{r4, r5, r6, pc}
 8017f94:	ab01      	add	r3, sp, #4
 8017f96:	466a      	mov	r2, sp
 8017f98:	f7ff ffca 	bl	8017f30 <__swhatbuf_r>
 8017f9c:	9900      	ldr	r1, [sp, #0]
 8017f9e:	4605      	mov	r5, r0
 8017fa0:	4630      	mov	r0, r6
 8017fa2:	f7ff fcbd 	bl	8017920 <_malloc_r>
 8017fa6:	b948      	cbnz	r0, 8017fbc <__smakebuf_r+0x44>
 8017fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fac:	059a      	lsls	r2, r3, #22
 8017fae:	d4ef      	bmi.n	8017f90 <__smakebuf_r+0x18>
 8017fb0:	f023 0303 	bic.w	r3, r3, #3
 8017fb4:	f043 0302 	orr.w	r3, r3, #2
 8017fb8:	81a3      	strh	r3, [r4, #12]
 8017fba:	e7e3      	b.n	8017f84 <__smakebuf_r+0xc>
 8017fbc:	4b0d      	ldr	r3, [pc, #52]	; (8017ff4 <__smakebuf_r+0x7c>)
 8017fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017fc0:	89a3      	ldrh	r3, [r4, #12]
 8017fc2:	6020      	str	r0, [r4, #0]
 8017fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fc8:	81a3      	strh	r3, [r4, #12]
 8017fca:	9b00      	ldr	r3, [sp, #0]
 8017fcc:	6163      	str	r3, [r4, #20]
 8017fce:	9b01      	ldr	r3, [sp, #4]
 8017fd0:	6120      	str	r0, [r4, #16]
 8017fd2:	b15b      	cbz	r3, 8017fec <__smakebuf_r+0x74>
 8017fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f000 f887 	bl	80180ec <_isatty_r>
 8017fde:	b128      	cbz	r0, 8017fec <__smakebuf_r+0x74>
 8017fe0:	89a3      	ldrh	r3, [r4, #12]
 8017fe2:	f023 0303 	bic.w	r3, r3, #3
 8017fe6:	f043 0301 	orr.w	r3, r3, #1
 8017fea:	81a3      	strh	r3, [r4, #12]
 8017fec:	89a3      	ldrh	r3, [r4, #12]
 8017fee:	431d      	orrs	r5, r3
 8017ff0:	81a5      	strh	r5, [r4, #12]
 8017ff2:	e7cd      	b.n	8017f90 <__smakebuf_r+0x18>
 8017ff4:	08017de5 	.word	0x08017de5

08017ff8 <__malloc_lock>:
 8017ff8:	4770      	bx	lr

08017ffa <__malloc_unlock>:
 8017ffa:	4770      	bx	lr

08017ffc <__sread>:
 8017ffc:	b510      	push	{r4, lr}
 8017ffe:	460c      	mov	r4, r1
 8018000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018004:	f000 f894 	bl	8018130 <_read_r>
 8018008:	2800      	cmp	r0, #0
 801800a:	bfab      	itete	ge
 801800c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801800e:	89a3      	ldrhlt	r3, [r4, #12]
 8018010:	181b      	addge	r3, r3, r0
 8018012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018016:	bfac      	ite	ge
 8018018:	6563      	strge	r3, [r4, #84]	; 0x54
 801801a:	81a3      	strhlt	r3, [r4, #12]
 801801c:	bd10      	pop	{r4, pc}

0801801e <__swrite>:
 801801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018022:	461f      	mov	r7, r3
 8018024:	898b      	ldrh	r3, [r1, #12]
 8018026:	05db      	lsls	r3, r3, #23
 8018028:	4605      	mov	r5, r0
 801802a:	460c      	mov	r4, r1
 801802c:	4616      	mov	r6, r2
 801802e:	d505      	bpl.n	801803c <__swrite+0x1e>
 8018030:	2302      	movs	r3, #2
 8018032:	2200      	movs	r2, #0
 8018034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018038:	f000 f868 	bl	801810c <_lseek_r>
 801803c:	89a3      	ldrh	r3, [r4, #12]
 801803e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018046:	81a3      	strh	r3, [r4, #12]
 8018048:	4632      	mov	r2, r6
 801804a:	463b      	mov	r3, r7
 801804c:	4628      	mov	r0, r5
 801804e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018052:	f000 b817 	b.w	8018084 <_write_r>

08018056 <__sseek>:
 8018056:	b510      	push	{r4, lr}
 8018058:	460c      	mov	r4, r1
 801805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801805e:	f000 f855 	bl	801810c <_lseek_r>
 8018062:	1c43      	adds	r3, r0, #1
 8018064:	89a3      	ldrh	r3, [r4, #12]
 8018066:	bf15      	itete	ne
 8018068:	6560      	strne	r0, [r4, #84]	; 0x54
 801806a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801806e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018072:	81a3      	strheq	r3, [r4, #12]
 8018074:	bf18      	it	ne
 8018076:	81a3      	strhne	r3, [r4, #12]
 8018078:	bd10      	pop	{r4, pc}

0801807a <__sclose>:
 801807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801807e:	f000 b813 	b.w	80180a8 <_close_r>
	...

08018084 <_write_r>:
 8018084:	b538      	push	{r3, r4, r5, lr}
 8018086:	4c07      	ldr	r4, [pc, #28]	; (80180a4 <_write_r+0x20>)
 8018088:	4605      	mov	r5, r0
 801808a:	4608      	mov	r0, r1
 801808c:	4611      	mov	r1, r2
 801808e:	2200      	movs	r2, #0
 8018090:	6022      	str	r2, [r4, #0]
 8018092:	461a      	mov	r2, r3
 8018094:	f7f8 fc27 	bl	80108e6 <_write>
 8018098:	1c43      	adds	r3, r0, #1
 801809a:	d102      	bne.n	80180a2 <_write_r+0x1e>
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	b103      	cbz	r3, 80180a2 <_write_r+0x1e>
 80180a0:	602b      	str	r3, [r5, #0]
 80180a2:	bd38      	pop	{r3, r4, r5, pc}
 80180a4:	20000b94 	.word	0x20000b94

080180a8 <_close_r>:
 80180a8:	b538      	push	{r3, r4, r5, lr}
 80180aa:	4c06      	ldr	r4, [pc, #24]	; (80180c4 <_close_r+0x1c>)
 80180ac:	2300      	movs	r3, #0
 80180ae:	4605      	mov	r5, r0
 80180b0:	4608      	mov	r0, r1
 80180b2:	6023      	str	r3, [r4, #0]
 80180b4:	f7f8 fc33 	bl	801091e <_close>
 80180b8:	1c43      	adds	r3, r0, #1
 80180ba:	d102      	bne.n	80180c2 <_close_r+0x1a>
 80180bc:	6823      	ldr	r3, [r4, #0]
 80180be:	b103      	cbz	r3, 80180c2 <_close_r+0x1a>
 80180c0:	602b      	str	r3, [r5, #0]
 80180c2:	bd38      	pop	{r3, r4, r5, pc}
 80180c4:	20000b94 	.word	0x20000b94

080180c8 <_fstat_r>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	4c07      	ldr	r4, [pc, #28]	; (80180e8 <_fstat_r+0x20>)
 80180cc:	2300      	movs	r3, #0
 80180ce:	4605      	mov	r5, r0
 80180d0:	4608      	mov	r0, r1
 80180d2:	4611      	mov	r1, r2
 80180d4:	6023      	str	r3, [r4, #0]
 80180d6:	f7f8 fc2e 	bl	8010936 <_fstat>
 80180da:	1c43      	adds	r3, r0, #1
 80180dc:	d102      	bne.n	80180e4 <_fstat_r+0x1c>
 80180de:	6823      	ldr	r3, [r4, #0]
 80180e0:	b103      	cbz	r3, 80180e4 <_fstat_r+0x1c>
 80180e2:	602b      	str	r3, [r5, #0]
 80180e4:	bd38      	pop	{r3, r4, r5, pc}
 80180e6:	bf00      	nop
 80180e8:	20000b94 	.word	0x20000b94

080180ec <_isatty_r>:
 80180ec:	b538      	push	{r3, r4, r5, lr}
 80180ee:	4c06      	ldr	r4, [pc, #24]	; (8018108 <_isatty_r+0x1c>)
 80180f0:	2300      	movs	r3, #0
 80180f2:	4605      	mov	r5, r0
 80180f4:	4608      	mov	r0, r1
 80180f6:	6023      	str	r3, [r4, #0]
 80180f8:	f7f8 fc2d 	bl	8010956 <_isatty>
 80180fc:	1c43      	adds	r3, r0, #1
 80180fe:	d102      	bne.n	8018106 <_isatty_r+0x1a>
 8018100:	6823      	ldr	r3, [r4, #0]
 8018102:	b103      	cbz	r3, 8018106 <_isatty_r+0x1a>
 8018104:	602b      	str	r3, [r5, #0]
 8018106:	bd38      	pop	{r3, r4, r5, pc}
 8018108:	20000b94 	.word	0x20000b94

0801810c <_lseek_r>:
 801810c:	b538      	push	{r3, r4, r5, lr}
 801810e:	4c07      	ldr	r4, [pc, #28]	; (801812c <_lseek_r+0x20>)
 8018110:	4605      	mov	r5, r0
 8018112:	4608      	mov	r0, r1
 8018114:	4611      	mov	r1, r2
 8018116:	2200      	movs	r2, #0
 8018118:	6022      	str	r2, [r4, #0]
 801811a:	461a      	mov	r2, r3
 801811c:	f7f8 fc26 	bl	801096c <_lseek>
 8018120:	1c43      	adds	r3, r0, #1
 8018122:	d102      	bne.n	801812a <_lseek_r+0x1e>
 8018124:	6823      	ldr	r3, [r4, #0]
 8018126:	b103      	cbz	r3, 801812a <_lseek_r+0x1e>
 8018128:	602b      	str	r3, [r5, #0]
 801812a:	bd38      	pop	{r3, r4, r5, pc}
 801812c:	20000b94 	.word	0x20000b94

08018130 <_read_r>:
 8018130:	b538      	push	{r3, r4, r5, lr}
 8018132:	4c07      	ldr	r4, [pc, #28]	; (8018150 <_read_r+0x20>)
 8018134:	4605      	mov	r5, r0
 8018136:	4608      	mov	r0, r1
 8018138:	4611      	mov	r1, r2
 801813a:	2200      	movs	r2, #0
 801813c:	6022      	str	r2, [r4, #0]
 801813e:	461a      	mov	r2, r3
 8018140:	f7f8 fbb4 	bl	80108ac <_read>
 8018144:	1c43      	adds	r3, r0, #1
 8018146:	d102      	bne.n	801814e <_read_r+0x1e>
 8018148:	6823      	ldr	r3, [r4, #0]
 801814a:	b103      	cbz	r3, 801814e <_read_r+0x1e>
 801814c:	602b      	str	r3, [r5, #0]
 801814e:	bd38      	pop	{r3, r4, r5, pc}
 8018150:	20000b94 	.word	0x20000b94

08018154 <_init>:
 8018154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018156:	bf00      	nop
 8018158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801815a:	bc08      	pop	{r3}
 801815c:	469e      	mov	lr, r3
 801815e:	4770      	bx	lr

08018160 <_fini>:
 8018160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018162:	bf00      	nop
 8018164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018166:	bc08      	pop	{r3}
 8018168:	469e      	mov	lr, r3
 801816a:	4770      	bx	lr
