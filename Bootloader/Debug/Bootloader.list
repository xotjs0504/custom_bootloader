
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd4  08008bd4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bdc  08008bdc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08008be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  20000150  08008d34  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  08008d34  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cf3  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003418  00000000  00000000  00035e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00039290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  0003a138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230cc  00000000  00000000  0003ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5b5  00000000  00000000  0005df14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf239  00000000  00000000  0006d4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  0012c780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089e4 	.word	0x080089e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	080089e4 	.word	0x080089e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <MX_GPIO_Init+0x16c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a53      	ldr	r2, [pc, #332]	; (800071c <MX_GPIO_Init+0x16c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_GPIO_Init+0x16c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_GPIO_Init+0x16c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a4c      	ldr	r2, [pc, #304]	; (800071c <MX_GPIO_Init+0x16c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_GPIO_Init+0x16c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <MX_GPIO_Init+0x16c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a45      	ldr	r2, [pc, #276]	; (800071c <MX_GPIO_Init+0x16c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_GPIO_Init+0x16c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_GPIO_Init+0x16c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3e      	ldr	r2, [pc, #248]	; (800071c <MX_GPIO_Init+0x16c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_GPIO_Init+0x16c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_GPIO_Init+0x16c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a37      	ldr	r2, [pc, #220]	; (800071c <MX_GPIO_Init+0x16c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_GPIO_Init+0x16c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_GPIO_Init+0x16c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <MX_GPIO_Init+0x16c>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_GPIO_Init+0x16c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f244 0181 	movw	r1, #16513	; 0x4081
 8000674:	482a      	ldr	r0, [pc, #168]	; (8000720 <MX_GPIO_Init+0x170>)
 8000676:	f000 fe43 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	4829      	ldr	r0, [pc, #164]	; (8000724 <MX_GPIO_Init+0x174>)
 8000680:	f000 fe3e 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_GPIO_Init+0x178>)
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4824      	ldr	r0, [pc, #144]	; (800072c <MX_GPIO_Init+0x17c>)
 800069a:	f000 fc9f 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800069e:	f244 0381 	movw	r3, #16513	; 0x4081
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <MX_GPIO_Init+0x170>)
 80006b8:	f000 fc90 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ce:	2307      	movs	r3, #7
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4815      	ldr	r0, [pc, #84]	; (8000730 <MX_GPIO_Init+0x180>)
 80006da:	f000 fc7f 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x174>)
 80006f6:	f000 fc71 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_GPIO_Init+0x174>)
 800070e:	f000 fc65 	bl	8000fdc <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020400 	.word	0x40020400
 8000724:	40021800 	.word	0x40021800
 8000728:	10110000 	.word	0x10110000
 800072c:	40020800 	.word	0x40020800
 8000730:	40020c00 	.word	0x40020c00

08000734 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 800073c:	1d39      	adds	r1, r7, #4
 800073e:	2301      	movs	r3, #1
 8000740:	2201      	movs	r2, #1
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <__io_putchar+0x20>)
 8000744:	f002 feb7 	bl	80034b6 <HAL_UART_Transmit>
	return ch;
 8000748:	687b      	ldr	r3, [r7, #4]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000278 	.word	0x20000278

08000758 <go2APP>:

void go2APP(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
  uint32_t JumpAddress;
  pFunction Jump_To_Application;

  printf("BOOTLOADER Start ! \r\n");
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <go2APP+0x78>)
 8000760:	f007 fb14 	bl	8007d8c <puts>

  //check if there is something "installed" in the app FLASH region
  if (((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD - 1) & 0x2FFC0000) == 0x20000000)
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <go2APP+0x7c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <go2APP+0x80>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d126      	bne.n	80007c2 <go2APP+0x6a>
  {
    printf("APP Start... \r\n");
 8000774:	4819      	ldr	r0, [pc, #100]	; (80007dc <go2APP+0x84>)
 8000776:	f007 fb09 	bl	8007d8c <puts>
    HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 fafa 	bl	8000d74 <HAL_Delay>
    // Jump to user application
    JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <go2APP+0x88>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
    Jump_To_Application = (pFunction) JumpAddress;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	60bb      	str	r3, [r7, #8]

    printf("USBD DFU APP DEFAULT ADD - 1 : %x \r\n", (*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD - 1));
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <go2APP+0x7c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3b01      	subs	r3, #1
 8000790:	4619      	mov	r1, r3
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <go2APP+0x8c>)
 8000794:	f007 fa86 	bl	8007ca4 <iprintf>
    printf("USBD DFU APP DEFAULT ADD + 4 : %x \r\n", (*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD + 4));
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <go2APP+0x7c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3304      	adds	r3, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <go2APP+0x90>)
 80007a2:	f007 fa7f 	bl	8007ca4 <iprintf>
    /* initialize peripheral, clock, hal etc. */
//    HAL_UART_MspDeInit(&huart2);
//    MX_GPIO_DeInit();
    HAL_RCC_DeInit();
 80007a6:	f002 fb2b 	bl	8002e00 <HAL_RCC_DeInit>
//    SysTick->CTRL = 0;
//    SysTick->LOAD = 0;
//    SysTick->VAL  = 0;

    // Initialize user application's Stack Pointer
    __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <go2APP+0x7c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f383 8808 	msr	MSP, r3
    Jump_To_Application();
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4798      	blx	r3
    printf("test final ! \r\n");
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <go2APP+0x94>)
 80007bc:	f007 fae6 	bl	8007d8c <puts>
  else
  {
    // there is no application installed
    printf("No APP found!! \r\n");
  }
}
 80007c0:	e002      	b.n	80007c8 <go2APP+0x70>
    printf("No APP found!! \r\n");
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <go2APP+0x98>)
 80007c4:	f007 fae2 	bl	8007d8c <puts>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	080089fc 	.word	0x080089fc
 80007d4:	08010000 	.word	0x08010000
 80007d8:	2ffc0000 	.word	0x2ffc0000
 80007dc:	08008a14 	.word	0x08008a14
 80007e0:	08010004 	.word	0x08010004
 80007e4:	08008a24 	.word	0x08008a24
 80007e8:	08008a4c 	.word	0x08008a4c
 80007ec:	08008a74 	.word	0x08008a74
 80007f0:	08008a84 	.word	0x08008a84

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fa4a 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f80e 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff fed6 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000804:	f000 f9a8 	bl	8000b58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000808:	f006 fc8e 	bl	8007128 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  go2APP();
 800080c:	f7ff ffa4 	bl	8000758 <go2APP>
	  HAL_Delay(1000);
 8000810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000814:	f000 faae 	bl	8000d74 <HAL_Delay>
	  go2APP();
 8000818:	e7f8      	b.n	800080c <main+0x18>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0a4      	sub	sp, #144	; 0x90
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000826:	2234      	movs	r2, #52	; 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f007 f98a 	bl	8007b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	223c      	movs	r2, #60	; 0x3c
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f007 f97b 	bl	8007b44 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <SystemClock_Config+0x100>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a31      	ldr	r2, [pc, #196]	; (800091c <SystemClock_Config+0x100>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <SystemClock_Config+0x100>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <SystemClock_Config+0x104>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <SystemClock_Config+0x104>)
 8000874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <SystemClock_Config+0x104>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000898:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800089a:	2308      	movs	r3, #8
 800089c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800089e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008ac:	2308      	movs	r3, #8
 80008ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fb6b 	bl	8002f98 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c8:	f000 f82c 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e6:	2103      	movs	r1, #3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fec9 	bl	8002680 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008f4:	f000 f816 	bl	8000924 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80008f8:	2320      	movs	r3, #32
 80008fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f8ad 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000910:	f000 f808 	bl	8000924 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3790      	adds	r7, #144	; 0x90
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092a:	e7fe      	b.n	800092a <Error_Handler+0x6>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f9b4 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <OTG_FS_IRQHandler+0x10>)
 80009d6:	f000 fe3c 	bl	8001652 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000078c 	.word	0x2000078c

080009e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
	}

return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe7b 	bl	8000734 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
	}
	return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f006 ffee 	bl	8007ad0 <__errno>
 8000af4:	4602      	mov	r2, r0
 8000af6:	230c      	movs	r3, #12
 8000af8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20040000 	.word	0x20040000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	2000016c 	.word	0x2000016c
 8000b28:	20000b98 	.word	0x20000b98

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SystemInit+0x28>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <SystemInit+0x28>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SystemInit+0x28>)
 8000b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b46:	609a      	str	r2, [r3, #8]
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f002 fc44 	bl	800341c <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f7ff fec3 	bl	8000924 <Error_Handler>
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	40004400 	.word	0x40004400

08000bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c06:	230c      	movs	r3, #12
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_UART_MspInit+0x8c>)
 8000c22:	f000 f9db 	bl	8000fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c42:	e003      	b.n	8000c4c <LoopCopyDataInit>

08000c44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c4a:	3104      	adds	r1, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c54:	d3f6      	bcc.n	8000c44 <CopyDataInit>
  ldr  r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c58:	e002      	b.n	8000c60 <LoopFillZerobss>

08000c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c5c:	f842 3b04 	str.w	r3, [r2], #4

08000c60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c64:	d3f9      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c66:	f7ff ff61 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f006 ff37 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fdc1 	bl	80007f4 <main>
  bx  lr
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c74:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8000c78:	08008be4 	.word	0x08008be4
  ldr  r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c80:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8000c84:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8000c88:	20000b98 	.word	0x20000b98

08000c8c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f94d 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe32 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f965 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f92d 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200002b8 	.word	0x200002b8

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200002b8 	.word	0x200002b8

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_Delay+0x40>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e165      	b.n	80012c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8154 	bne.w	80012be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00b      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102a:	2b11      	cmp	r3, #17
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0xfc>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80ae 	beq.w	80012be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x304>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x308>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x310>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x202>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x300>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_GPIO_Init+0x320>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_GPIO_Init+0x320>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_GPIO_Init+0x320>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae96 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001334:	b08f      	sub	sp, #60	; 0x3c
 8001336:	af0a      	add	r7, sp, #40	; 0x28
 8001338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e116      	b.n	8001572 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f006 f87a 	bl	8007458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fe0b 	bl	8003f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	687e      	ldr	r6, [r7, #4]
 8001390:	466d      	mov	r5, sp
 8001392:	f106 0410 	add.w	r4, r6, #16
 8001396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a6:	1d33      	adds	r3, r6, #4
 80013a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f002 fce2 	bl	8003d74 <USB_CoreInit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2202      	movs	r2, #2
 80013ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0d7      	b.n	8001572 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fdf9 	bl	8003fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e04a      	b.n	800146a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	333d      	adds	r3, #61	; 0x3d
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	333c      	adds	r3, #60	; 0x3c
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	b298      	uxth	r0, r3
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	4602      	mov	r2, r0
 8001412:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	333f      	adds	r3, #63	; 0x3f
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3344      	adds	r3, #68	; 0x44
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3348      	adds	r3, #72	; 0x48
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	3350      	adds	r3, #80	; 0x50
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3af      	bcc.n	80013d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e044      	b.n	8001504 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	1a9b      	subs	r3, r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	3301      	adds	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3b5      	bcc.n	800147a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	687e      	ldr	r6, [r7, #4]
 8001516:	466d      	mov	r5, sp
 8001518:	f106 0410 	add.w	r4, r6, #16
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001528:	e885 0003 	stmia.w	r5, {r0, r1}
 800152c:	1d33      	adds	r3, r6, #4
 800152e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f002 fd6f 	bl	8004014 <USB_DevInit>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e014      	b.n	8001572 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f001 f869 	bl	8002638 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fcce 	bl	8004f0c <USB_DevDisconnect>

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_PCD_Start+0x1c>
 8001592:	2302      	movs	r3, #2
 8001594:	e020      	b.n	80015d8 <HAL_PCD_Start+0x5e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d109      	bne.n	80015ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fcdc 	bl	8003f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fc7e 	bl	8004eca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_PCD_Stop+0x1c>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e026      	b.n	800164a <HAL_PCD_Stop+0x6a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fcc8 	bl	8003f9e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fc7a 	bl	8004f0c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2110      	movs	r1, #16
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fe56 	bl	80042d0 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b01      	cmp	r3, #1
 800162a:	d109      	bne.n	8001640 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b08d      	sub	sp, #52	; 0x34
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fd03 	bl	8005074 <USB_GetMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 83ca 	bne.w	8001e0a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fc67 	bl	8004f4e <USB_ReadInterrupts>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 83c0 	beq.w	8001e08 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fc5e 	bl	8004f4e <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d107      	bne.n	80016ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f002 0202 	and.w	r2, r2, #2
 80016aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fc4c 	bl	8004f4e <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b10      	cmp	r3, #16
 80016be:	d161      	bne.n	8001784 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0210 	bic.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 020f 	and.w	r2, r3, #15
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d124      	bne.n	8001746 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d035      	beq.n	8001774 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	6a38      	ldr	r0, [r7, #32]
 800171c:	f003 fab2 	bl	8004c84 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800172c:	441a      	add	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173e:	441a      	add	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	e016      	b.n	8001774 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	2b06      	cmp	r3, #6
 8001750:	d110      	bne.n	8001774 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001758:	2208      	movs	r2, #8
 800175a:	4619      	mov	r1, r3
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f003 fa91 	bl	8004c84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176e:	441a      	add	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fbe0 	bl	8004f4e <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001798:	d16e      	bne.n	8001878 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fbe6 	bl	8004f74 <USB_ReadDevAllOutEpInterrupt>
 80017a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017aa:	e062      	b.n	8001872 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d057      	beq.n	8001866 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fc0b 	bl	8004fdc <USB_ReadDevOutEPInterrupt>
 80017c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	2301      	movs	r3, #1
 80017e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fd7c 	bl	80022e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	2308      	movs	r3, #8
 8001806:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fe76 	bl	80024fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	461a      	mov	r2, r3
 8001828:	2310      	movs	r3, #16
 800182a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	2320      	movs	r3, #32
 8001846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	461a      	mov	r2, r3
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d199      	bne.n	80017ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fb66 	bl	8004f4e <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800188c:	f040 80c0 	bne.w	8001a10 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fb87 	bl	8004fa8 <USB_ReadDevAllInEpInterrupt>
 800189a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018a0:	e0b2      	b.n	8001a08 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a7 	beq.w	80019fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fbad 	bl	8005018 <USB_ReadDevInEPInterrupt>
 80018be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d057      	beq.n	800197a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2201      	movs	r2, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018ea:	4013      	ands	r3, r2
 80018ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fa:	461a      	mov	r2, r3
 80018fc:	2301      	movs	r3, #1
 80018fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d132      	bne.n	800196e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3348      	adds	r3, #72	; 0x48
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	3344      	adds	r3, #68	; 0x44
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4419      	add	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4403      	add	r3, r0
 800193c:	3348      	adds	r3, #72	; 0x48
 800193e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <HAL_PCD_IRQHandler+0x31c>
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3350      	adds	r3, #80	; 0x50
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d108      	bne.n	800196e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001966:	461a      	mov	r2, r3
 8001968:	2101      	movs	r1, #1
 800196a:	f003 fbb5 	bl	80050d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f005 fdfe 	bl	8007576 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2308      	movs	r3, #8
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2310      	movs	r3, #16
 80019b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e4:	461a      	mov	r2, r3
 80019e6:	2302      	movs	r3, #2
 80019e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fbe6 	bl	80021c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f af49 	bne.w	80018a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fa9a 	bl	8004f4e <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a24:	d122      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f005 ffc4 	bl	80079dc <HAL_PCDEx_LPM_Callback>
 8001a54:	e002      	b.n	8001a5c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f005 fdfa 	bl	8007650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fa6c 	bl	8004f4e <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a80:	d112      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f005 fdb6 	bl	8007604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001aa6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fa4e 	bl	8004f4e <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001abc:	d121      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001acc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d111      	bne.n	8001afc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f005 ff71 	bl	80079dc <HAL_PCDEx_LPM_Callback>
 8001afa:	e002      	b.n	8001b02 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 fd81 	bl	8007604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fa21 	bl	8004f4e <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b16:	f040 80c7 	bne.w	8001ca8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2110      	movs	r1, #16
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fbcb 	bl	80042d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3e:	e056      	b.n	8001bee <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b64:	0151      	lsls	r1, r2, #5
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	440a      	add	r2, r1
 8001b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b72:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b84:	0151      	lsls	r1, r2, #5
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	440a      	add	r2, r1
 8001b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ba6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb8:	0151      	lsls	r1, r2, #5
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	440a      	add	r2, r1
 8001bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	0151      	lsls	r1, r2, #5
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	440a      	add	r2, r1
 8001bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001be6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	3301      	adds	r3, #1
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3a3      	bcc.n	8001b40 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d016      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f043 030b 	orr.w	r3, r3, #11
 8001c28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3a:	f043 030b 	orr.w	r3, r3, #11
 8001c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c40:	e015      	b.n	8001c6e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c68:	f043 030b 	orr.w	r3, r3, #11
 8001c6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c92:	461a      	mov	r2, r3
 8001c94:	f003 fa20 	bl	80050d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 f94e 	bl	8004f4e <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbc:	d124      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 f9e4 	bl	8005090 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fb60 	bl	8004392 <USB_GetDevSpeed>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681c      	ldr	r4, [r3, #0]
 8001cde:	f000 fe8d 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8001ce2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4620      	mov	r0, r4
 8001cee:	f002 f8a3 	bl	8003e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 fc67 	bl	80075c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 f91e 	bl	8004f4e <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d10a      	bne.n	8001d32 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 fc44 	bl	80075aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f002 0208 	and.w	r2, r2, #8
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 f909 	bl	8004f4e <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d46:	d10f      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f005 fc9c 	bl	8007690 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f8ee 	bl	8004f4e <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d7c:	d10f      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f005 fc6f 	bl	800766c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 f8d3 	bl	8004f4e <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d10a      	bne.n	8001dca <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f005 fc7d 	bl	80076b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f8bd 	bl	8004f4e <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d115      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f005 fc6d 	bl	80076d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e000      	b.n	8001e0a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001e08:	bf00      	nop
    }
  }
}
 8001e0a:	3734      	adds	r7, #52	; 0x34
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}

08001e10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_PCD_SetAddress+0x1a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e013      	b.n	8001e52 <HAL_PCD_SetAddress+0x42>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f81b 	bl	8004e7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	461a      	mov	r2, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	70fb      	strb	r3, [r7, #3]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	803b      	strh	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da0f      	bge.n	8001ea0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 020f 	and.w	r2, r3, #15
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	3338      	adds	r3, #56	; 0x38
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	705a      	strb	r2, [r3, #1]
 8001e9e:	e00f      	b.n	8001ec0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 020f 	and.w	r2, r3, #15
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ecc:	883a      	ldrh	r2, [r7, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	78ba      	ldrb	r2, [r7, #2]
 8001ed6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	785b      	ldrb	r3, [r3, #1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d102      	bne.n	8001ef6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_EP_Open+0xaa>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e00e      	b.n	8001f22 <HAL_PCD_EP_Open+0xc8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fa62 	bl	80043dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	460b      	mov	r3, r1
 8001f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d102      	bne.n	8001f86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6979      	ldr	r1, [r7, #20]
 8001f9e:	f002 fce9 	bl	8004974 <USB_EP0StartXfer>
 8001fa2:	e008      	b.n	8001fb6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	f002 fa9b 	bl	80044ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	3338      	adds	r3, #56	; 0x38
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	b2da      	uxtb	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	f002 fc9f 	bl	8004974 <USB_EP0StartXfer>
 8002036:	e008      	b.n	800204a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	f002 fa51 	bl	80044ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d901      	bls.n	8002072 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e050      	b.n	8002114 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00d      	b.n	80020b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PCD_EP_SetStall+0x82>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01e      	b.n	8002114 <HAL_PCD_EP_SetStall+0xc0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fdf6 	bl	8004cd6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002104:	461a      	mov	r2, r3
 8002106:	f002 ffe7 	bl	80050d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	d901      	bls.n	800213a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e042      	b.n	80021c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800213a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da0f      	bge.n	8002162 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	705a      	strb	r2, [r3, #1]
 8002160:	e00f      	b.n	8002182 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	3304      	adds	r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_PCD_EP_ClrStall+0x86>
 800219e:	2302      	movs	r3, #2
 80021a0:	e00e      	b.n	80021c0 <HAL_PCD_EP_ClrStall+0xa4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fdfe 	bl	8004db2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	3338      	adds	r3, #56	; 0x38
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	3304      	adds	r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d901      	bls.n	8002200 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e06c      	b.n	80022da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	429a      	cmp	r2, r3
 8002214:	d902      	bls.n	800221c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3303      	adds	r3, #3
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002224:	e02b      	b.n	800227e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	429a      	cmp	r2, r3
 800223a:	d902      	bls.n	8002242 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3303      	adds	r3, #3
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68d9      	ldr	r1, [r3, #12]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800225a:	b2db      	uxtb	r3, r3
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4603      	mov	r3, r0
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f002 fcda 	bl	8004c1a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	441a      	add	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	441a      	add	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	b29b      	uxth	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d809      	bhi.n	80022a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800229c:	429a      	cmp	r2, r3
 800229e:	d203      	bcs.n	80022a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1be      	bne.n	8002226 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d811      	bhi.n	80022d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d4:	4013      	ands	r3, r2
 80022d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	333c      	adds	r3, #60	; 0x3c
 80022fc:	3304      	adds	r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b01      	cmp	r3, #1
 8002318:	f040 80a0 	bne.w	800245c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a72      	ldr	r2, [pc, #456]	; (80024f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800232a:	4293      	cmp	r3, r2
 800232c:	f240 80dd 	bls.w	80024ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80d7 	beq.w	80024ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234e:	6093      	str	r3, [r2, #8]
 8002350:	e0cb      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002368:	461a      	mov	r2, r3
 800236a:	2320      	movs	r3, #32
 800236c:	6093      	str	r3, [r2, #8]
 800236e:	e0bc      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80b7 	bne.w	80024ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d90f      	bls.n	80023a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	e0a2      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	0159      	lsls	r1, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	440b      	add	r3, r1
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4403      	add	r3, r0
 80023da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4403      	add	r3, r0
 8002402:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4419      	add	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4403      	add	r3, r0
 8002418:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800241c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d114      	bne.n	800244e <PCD_EP_OutXfrComplete_int+0x16a>
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d108      	bne.n	800244e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002446:	461a      	mov	r2, r3
 8002448:	2101      	movs	r1, #1
 800244a:	f002 fe45 	bl	80050d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f005 f873 	bl	8007540 <HAL_PCD_DataOutStageCallback>
 800245a:	e046      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d124      	bne.n	80024ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002480:	6093      	str	r3, [r2, #8]
 8002482:	e032      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	461a      	mov	r2, r3
 800249c:	2320      	movs	r3, #32
 800249e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f005 f84a 	bl	8007540 <HAL_PCD_DataOutStageCallback>
 80024ac:	e01d      	b.n	80024ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d114      	bne.n	80024de <PCD_EP_OutXfrComplete_int+0x1fa>
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d108      	bne.n	80024de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d6:	461a      	mov	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f002 fdfd 	bl	80050d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f005 f82b 	bl	8007540 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	4f54300a 	.word	0x4f54300a
 80024f8:	4f54310a 	.word	0x4f54310a

080024fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	333c      	adds	r3, #60	; 0x3c
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <PCD_EP_OutSetupPacket_int+0x88>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d90e      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f004 ffe3 	bl	800751c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <PCD_EP_OutSetupPacket_int+0x88>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d90c      	bls.n	8002578 <PCD_EP_OutSetupPacket_int+0x7c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002570:	461a      	mov	r2, r3
 8002572:	2101      	movs	r1, #1
 8002574:	f002 fdb0 	bl	80050d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	4f54300a 	.word	0x4f54300a

08002588 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025a6:	883b      	ldrh	r3, [r7, #0]
 80025a8:	0419      	lsls	r1, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
 80025b4:	e028      	b.n	8002608 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e00d      	b.n	80025e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d3ec      	bcc.n	80025ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025f0:	883b      	ldrh	r3, [r7, #0]
 80025f2:	0418      	lsls	r0, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	4302      	orrs	r2, r0
 8002600:	3340      	adds	r3, #64	; 0x40
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	f043 0303 	orr.w	r3, r3, #3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cc      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d90c      	bls.n	80026bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d044      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e067      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4934      	ldr	r1, [pc, #208]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe faf4 	bl	8000d5c <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe faf0 	bl	8000d5c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20c      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f821 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800280a:	4601      	mov	r1, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	fa21 f303 	lsr.w	r3, r1, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa54 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	08008b24 	.word	0x08008b24
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d007      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x32>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d008      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x38>
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80b4 	bne.w	80029e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800287a:	60bb      	str	r3, [r7, #8]
       break;
 800287c:	e0b3      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002880:	60bb      	str	r3, [r7, #8]
      break;
 8002882:	e0b0      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d04a      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	f04f 0400 	mov.w	r4, #0
 80028a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	ea03 0501 	and.w	r5, r3, r1
 80028b0:	ea04 0602 	and.w	r6, r4, r2
 80028b4:	4629      	mov	r1, r5
 80028b6:	4632      	mov	r2, r6
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	f04f 0400 	mov.w	r4, #0
 80028c0:	0154      	lsls	r4, r2, #5
 80028c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c6:	014b      	lsls	r3, r1, #5
 80028c8:	4619      	mov	r1, r3
 80028ca:	4622      	mov	r2, r4
 80028cc:	1b49      	subs	r1, r1, r5
 80028ce:	eb62 0206 	sbc.w	r2, r2, r6
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	f04f 0400 	mov.w	r4, #0
 80028da:	0194      	lsls	r4, r2, #6
 80028dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e0:	018b      	lsls	r3, r1, #6
 80028e2:	1a5b      	subs	r3, r3, r1
 80028e4:	eb64 0402 	sbc.w	r4, r4, r2
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	00e2      	lsls	r2, r4, #3
 80028f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f6:	00d9      	lsls	r1, r3, #3
 80028f8:	460b      	mov	r3, r1
 80028fa:	4614      	mov	r4, r2
 80028fc:	195b      	adds	r3, r3, r5
 80028fe:	eb44 0406 	adc.w	r4, r4, r6
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	0262      	lsls	r2, r4, #9
 800290c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002910:	0259      	lsls	r1, r3, #9
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	4618      	mov	r0, r3
 8002918:	4621      	mov	r1, r4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	461a      	mov	r2, r3
 8002922:	4623      	mov	r3, r4
 8002924:	f7fd fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8002928:	4603      	mov	r3, r0
 800292a:	460c      	mov	r4, r1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e049      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	f04f 0400 	mov.w	r4, #0
 800293a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	ea03 0501 	and.w	r5, r3, r1
 8002946:	ea04 0602 	and.w	r6, r4, r2
 800294a:	4629      	mov	r1, r5
 800294c:	4632      	mov	r2, r6
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	0154      	lsls	r4, r2, #5
 8002958:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800295c:	014b      	lsls	r3, r1, #5
 800295e:	4619      	mov	r1, r3
 8002960:	4622      	mov	r2, r4
 8002962:	1b49      	subs	r1, r1, r5
 8002964:	eb62 0206 	sbc.w	r2, r2, r6
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	0194      	lsls	r4, r2, #6
 8002972:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002976:	018b      	lsls	r3, r1, #6
 8002978:	1a5b      	subs	r3, r3, r1
 800297a:	eb64 0402 	sbc.w	r4, r4, r2
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800298c:	00d9      	lsls	r1, r3, #3
 800298e:	460b      	mov	r3, r1
 8002990:	4614      	mov	r4, r2
 8002992:	195b      	adds	r3, r3, r5
 8002994:	eb44 0406 	adc.w	r4, r4, r6
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	02a2      	lsls	r2, r4, #10
 80029a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029a6:	0299      	lsls	r1, r3, #10
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	4621      	mov	r1, r4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fd fc79 	bl	80002b0 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	60bb      	str	r3, [r7, #8]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029e2:	60bb      	str	r3, [r7, #8]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	68bb      	ldr	r3, [r7, #8]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000000 	.word	0x20000000

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff0 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08008b34 	.word	0x08008b34

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffdc 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a44:	4601      	mov	r1, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08008b34 	.word	0x08008b34

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002a84:	4b87      	ldr	r3, [pc, #540]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	4984      	ldr	r1, [pc, #528]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d010      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ab2:	4b7c      	ldr	r3, [pc, #496]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4978      	ldr	r1, [pc, #480]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8083 	beq.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002afe:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a69      	ldr	r2, [pc, #420]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f927 	bl	8000d5c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe f923 	bl	8000d5c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e162      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b24:	4b60      	ldr	r3, [pc, #384]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b30:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02f      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4e:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5e:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b64:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe f8f1 	bl	8000d5c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe f8ed 	bl	8000d5c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e12a      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bac:	d10d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	4938      	ldr	r1, [pc, #224]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	4930      	ldr	r1, [pc, #192]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	4922      	ldr	r1, [pc, #136]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c32:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	491a      	ldr	r1, [pc, #104]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d004      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	f040 8091 	bne.w	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe f868 	bl	8000d5c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c8e:	e013      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c90:	f7fe f864 	bl	8000d5c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0a3      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	42470e40 	.word	0x42470e40
 8002cb0:	424711e0 	.word	0x424711e0
 8002cb4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d019      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d08:	d00e      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d019      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d26:	d110      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	492c      	ldr	r1, [pc, #176]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	4920      	ldr	r1, [pc, #128]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7e:	f7fd ffed 	bl	8000d5c <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d86:	f7fd ffe9 	bl	8000d5c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e028      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	424710d8 	.word	0x424710d8
 8002dfc:	42470068 	.word	0x42470068

08002e00 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e06:	f7fd ffa9 	bl	8000d5c <HAL_GetTick>
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e0c:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5c      	ldr	r2, [pc, #368]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fd ff9f 	bl	8000d5c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0a7      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e2c:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002e38:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e44:	f7fd ff8a 	bl	8000d5c <HAL_GetTick>
 8002e48:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e4a:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fd ff83 	bl	8000d5c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e089      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e74:	f7fd ff72 	bl	8000d5c <HAL_GetTick>
 8002e78:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002e7a:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e80:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002e84:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fd ff68 	bl	8000d5c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e070      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ea6:	f7fd ff59 	bl	8000d5c <HAL_GetTick>
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fd ff4f 	bl	8000d5c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e057      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ed8:	f7fd ff40 	bl	8000d5c <HAL_GetTick>
 8002edc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eec:	f7fd ff36 	bl	8000d5c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e03e      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f0c:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_RCC_DeInit+0x188>)
 8002f0e:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_RCC_DeInit+0x188>)
 8002f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f22:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f2e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f36:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002f3a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f46:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_RCC_DeInit+0x184>)
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_DeInit+0x18c>)
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <HAL_RCC_DeInit+0x190>)
 8002f64:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_DeInit+0x194>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd feb2 	bl	8000cd4 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	24003010 	.word	0x24003010
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d075      	beq.n	800309c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fb0:	4ba2      	ldr	r3, [pc, #648]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d00c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbc:	4b9f      	ldr	r3, [pc, #636]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d112      	bne.n	8002fee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc8:	4b9c      	ldr	r3, [pc, #624]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	4b99      	ldr	r3, [pc, #612]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d05b      	beq.n	800309a <HAL_RCC_OscConfig+0x102>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d157      	bne.n	800309a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e20b      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x6e>
 8002ff8:	4b90      	ldr	r3, [pc, #576]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a8f      	ldr	r2, [pc, #572]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e01d      	b.n	8003042 <HAL_RCC_OscConfig+0xaa>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x92>
 8003010:	4b8a      	ldr	r3, [pc, #552]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a89      	ldr	r2, [pc, #548]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b87      	ldr	r3, [pc, #540]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a86      	ldr	r2, [pc, #536]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0xaa>
 800302a:	4b84      	ldr	r3, [pc, #528]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a83      	ldr	r2, [pc, #524]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b81      	ldr	r3, [pc, #516]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a80      	ldr	r2, [pc, #512]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800303c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d013      	beq.n	8003072 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fd fe87 	bl	8000d5c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003052:	f7fd fe83 	bl	8000d5c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1d0      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0xba>
 8003070:	e014      	b.n	800309c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd fe73 	bl	8000d5c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307a:	f7fd fe6f 	bl	8000d5c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b64      	cmp	r3, #100	; 0x64
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1bc      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308c:	4b6b      	ldr	r3, [pc, #428]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0xe2>
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d063      	beq.n	8003170 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11c      	bne.n	80030fa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c0:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x14c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e190      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4952      	ldr	r1, [pc, #328]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f8:	e03a      	b.n	8003170 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003102:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_RCC_OscConfig+0x2a8>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fd fe28 	bl	8000d5c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fd fe24 	bl	8000d5c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e171      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	493f      	ldr	r1, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
 8003142:	e015      	b.n	8003170 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x2a8>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fd fe07 	bl	8000d5c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7fd fe03 	bl	8000d5c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e150      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003164:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d030      	beq.n	80031de <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d016      	beq.n	80031b2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003184:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fd fde7 	bl	8000d5c <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003192:	f7fd fde3 	bl	8000d5c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e130      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x1fa>
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fd fdd0 	bl	8000d5c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fd fdcc 	bl	8000d5c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e119      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 809f 	beq.w	800332a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10f      	bne.n	800321c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	; 0x40
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_OscConfig+0x2a4>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_RCC_OscConfig+0x2b0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d120      	bne.n	800326a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <HAL_RCC_OscConfig+0x2b0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_RCC_OscConfig+0x2b0>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003234:	f7fd fd92 	bl	8000d5c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	e010      	b.n	800325e <HAL_RCC_OscConfig+0x2c6>
 800323c:	40023800 	.word	0x40023800
 8003240:	42470000 	.word	0x42470000
 8003244:	42470e80 	.word	0x42470e80
 8003248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fd fd86 	bl	8000d5c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0d3      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b6c      	ldr	r3, [pc, #432]	; (8003410 <HAL_RCC_OscConfig+0x478>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x2e8>
 8003272:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a67      	ldr	r2, [pc, #412]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
 800327e:	e01c      	b.n	80032ba <HAL_RCC_OscConfig+0x322>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0x30a>
 8003288:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a61      	ldr	r2, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	4b5f      	ldr	r3, [pc, #380]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0x322>
 80032a2:	4b5c      	ldr	r3, [pc, #368]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	4b59      	ldr	r3, [pc, #356]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d015      	beq.n	80032ee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fd fd4b 	bl	8000d5c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fd47 	bl	8000d5c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e092      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCC_OscConfig+0x332>
 80032ec:	e014      	b.n	8003318 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd fd35 	bl	8000d5c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fd31 	bl	8000d5c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e07c      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ee      	bne.n	80032f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d068      	beq.n	8003404 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b08      	cmp	r3, #8
 800333c:	d060      	beq.n	8003400 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d145      	bne.n	80033d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCC_OscConfig+0x480>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd fd06 	bl	8000d5c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fd fd02 	bl	8000d5c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e04f      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	019b      	lsls	r3, r3, #6
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	491d      	ldr	r1, [pc, #116]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_RCC_OscConfig+0x480>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd fcd7 	bl	8000d5c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fd fcd3 	bl	8000d5c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e020      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x41a>
 80033d0:	e018      	b.n	8003404 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCC_OscConfig+0x480>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fcc0 	bl	8000d5c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fd fcbc 	bl	8000d5c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e009      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RCC_OscConfig+0x47c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x448>
 80033fe:	e001      	b.n	8003404 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000
 8003414:	40023800 	.word	0x40023800
 8003418:	42470060 	.word	0x42470060

0800341c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e03f      	b.n	80034ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fbb2 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f90b 	bl	800367c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	f040 8083 	bne.w	80035de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2e>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e07b      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Transmit+0x40>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e074      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2221      	movs	r2, #33	; 0x21
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800350c:	f7fd fc26 	bl	8000d5c <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003526:	e042      	b.n	80035ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d122      	bne.n	8003586 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f84c 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e042      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3302      	adds	r3, #2
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	e017      	b.n	80035ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	e013      	b.n	80035ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f829 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e01f      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	60ba      	str	r2, [r7, #8]
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1b7      	bne.n	8003528 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f810 	bl	80035e8 <UART_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e006      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f8:	e02c      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d028      	beq.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x30>
 8003608:	f7fd fba8 	bl	8000d5c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	429a      	cmp	r2, r3
 8003616:	d21d      	bcs.n	8003654 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003626:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e00f      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d0c3      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036be:	f023 030c 	bic.w	r3, r3, #12
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ea:	f040 818b 	bne.w	8003a04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4ac1      	ldr	r2, [pc, #772]	; (80039f8 <UART_SetConfig+0x37c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d005      	beq.n	8003704 <UART_SetConfig+0x88>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4abf      	ldr	r2, [pc, #764]	; (80039fc <UART_SetConfig+0x380>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 80bd 	bne.w	800387e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff f99a 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	461d      	mov	r5, r3
 800370e:	f04f 0600 	mov.w	r6, #0
 8003712:	46a8      	mov	r8, r5
 8003714:	46b1      	mov	r9, r6
 8003716:	eb18 0308 	adds.w	r3, r8, r8
 800371a:	eb49 0409 	adc.w	r4, r9, r9
 800371e:	4698      	mov	r8, r3
 8003720:	46a1      	mov	r9, r4
 8003722:	eb18 0805 	adds.w	r8, r8, r5
 8003726:	eb49 0906 	adc.w	r9, r9, r6
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800373a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800373e:	4688      	mov	r8, r1
 8003740:	4691      	mov	r9, r2
 8003742:	eb18 0005 	adds.w	r0, r8, r5
 8003746:	eb49 0106 	adc.w	r1, r9, r6
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	461d      	mov	r5, r3
 8003750:	f04f 0600 	mov.w	r6, #0
 8003754:	196b      	adds	r3, r5, r5
 8003756:	eb46 0406 	adc.w	r4, r6, r6
 800375a:	461a      	mov	r2, r3
 800375c:	4623      	mov	r3, r4
 800375e:	f7fc fda7 	bl	80002b0 <__aeabi_uldivmod>
 8003762:	4603      	mov	r3, r0
 8003764:	460c      	mov	r4, r1
 8003766:	461a      	mov	r2, r3
 8003768:	4ba5      	ldr	r3, [pc, #660]	; (8003a00 <UART_SetConfig+0x384>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	461d      	mov	r5, r3
 8003778:	f04f 0600 	mov.w	r6, #0
 800377c:	46a9      	mov	r9, r5
 800377e:	46b2      	mov	sl, r6
 8003780:	eb19 0309 	adds.w	r3, r9, r9
 8003784:	eb4a 040a 	adc.w	r4, sl, sl
 8003788:	4699      	mov	r9, r3
 800378a:	46a2      	mov	sl, r4
 800378c:	eb19 0905 	adds.w	r9, r9, r5
 8003790:	eb4a 0a06 	adc.w	sl, sl, r6
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037a8:	4689      	mov	r9, r1
 80037aa:	4692      	mov	sl, r2
 80037ac:	eb19 0005 	adds.w	r0, r9, r5
 80037b0:	eb4a 0106 	adc.w	r1, sl, r6
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	461d      	mov	r5, r3
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	196b      	adds	r3, r5, r5
 80037c0:	eb46 0406 	adc.w	r4, r6, r6
 80037c4:	461a      	mov	r2, r3
 80037c6:	4623      	mov	r3, r4
 80037c8:	f7fc fd72 	bl	80002b0 <__aeabi_uldivmod>
 80037cc:	4603      	mov	r3, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <UART_SetConfig+0x384>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a86      	ldr	r2, [pc, #536]	; (8003a00 <UART_SetConfig+0x384>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037f4:	4498      	add	r8, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	461d      	mov	r5, r3
 80037fa:	f04f 0600 	mov.w	r6, #0
 80037fe:	46a9      	mov	r9, r5
 8003800:	46b2      	mov	sl, r6
 8003802:	eb19 0309 	adds.w	r3, r9, r9
 8003806:	eb4a 040a 	adc.w	r4, sl, sl
 800380a:	4699      	mov	r9, r3
 800380c:	46a2      	mov	sl, r4
 800380e:	eb19 0905 	adds.w	r9, r9, r5
 8003812:	eb4a 0a06 	adc.w	sl, sl, r6
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800382a:	4689      	mov	r9, r1
 800382c:	4692      	mov	sl, r2
 800382e:	eb19 0005 	adds.w	r0, r9, r5
 8003832:	eb4a 0106 	adc.w	r1, sl, r6
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	461d      	mov	r5, r3
 800383c:	f04f 0600 	mov.w	r6, #0
 8003840:	196b      	adds	r3, r5, r5
 8003842:	eb46 0406 	adc.w	r4, r6, r6
 8003846:	461a      	mov	r2, r3
 8003848:	4623      	mov	r3, r4
 800384a:	f7fc fd31 	bl	80002b0 <__aeabi_uldivmod>
 800384e:	4603      	mov	r3, r0
 8003850:	460c      	mov	r4, r1
 8003852:	461a      	mov	r2, r3
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <UART_SetConfig+0x384>)
 8003856:	fba3 1302 	umull	r1, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2164      	movs	r1, #100	; 0x64
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <UART_SetConfig+0x384>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 0207 	and.w	r2, r3, #7
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4442      	add	r2, r8
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e26f      	b.n	8003d5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387e:	f7ff f8c9 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 8003882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	461d      	mov	r5, r3
 8003888:	f04f 0600 	mov.w	r6, #0
 800388c:	46a8      	mov	r8, r5
 800388e:	46b1      	mov	r9, r6
 8003890:	eb18 0308 	adds.w	r3, r8, r8
 8003894:	eb49 0409 	adc.w	r4, r9, r9
 8003898:	4698      	mov	r8, r3
 800389a:	46a1      	mov	r9, r4
 800389c:	eb18 0805 	adds.w	r8, r8, r5
 80038a0:	eb49 0906 	adc.w	r9, r9, r6
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038b8:	4688      	mov	r8, r1
 80038ba:	4691      	mov	r9, r2
 80038bc:	eb18 0005 	adds.w	r0, r8, r5
 80038c0:	eb49 0106 	adc.w	r1, r9, r6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	461d      	mov	r5, r3
 80038ca:	f04f 0600 	mov.w	r6, #0
 80038ce:	196b      	adds	r3, r5, r5
 80038d0:	eb46 0406 	adc.w	r4, r6, r6
 80038d4:	461a      	mov	r2, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	f7fc fcea 	bl	80002b0 <__aeabi_uldivmod>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <UART_SetConfig+0x384>)
 80038e4:	fba3 2302 	umull	r2, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	461d      	mov	r5, r3
 80038f2:	f04f 0600 	mov.w	r6, #0
 80038f6:	46a9      	mov	r9, r5
 80038f8:	46b2      	mov	sl, r6
 80038fa:	eb19 0309 	adds.w	r3, r9, r9
 80038fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003902:	4699      	mov	r9, r3
 8003904:	46a2      	mov	sl, r4
 8003906:	eb19 0905 	adds.w	r9, r9, r5
 800390a:	eb4a 0a06 	adc.w	sl, sl, r6
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800391a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800391e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003922:	4689      	mov	r9, r1
 8003924:	4692      	mov	sl, r2
 8003926:	eb19 0005 	adds.w	r0, r9, r5
 800392a:	eb4a 0106 	adc.w	r1, sl, r6
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	461d      	mov	r5, r3
 8003934:	f04f 0600 	mov.w	r6, #0
 8003938:	196b      	adds	r3, r5, r5
 800393a:	eb46 0406 	adc.w	r4, r6, r6
 800393e:	461a      	mov	r2, r3
 8003940:	4623      	mov	r3, r4
 8003942:	f7fc fcb5 	bl	80002b0 <__aeabi_uldivmod>
 8003946:	4603      	mov	r3, r0
 8003948:	460c      	mov	r4, r1
 800394a:	461a      	mov	r2, r3
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <UART_SetConfig+0x384>)
 800394e:	fba3 1302 	umull	r1, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2164      	movs	r1, #100	; 0x64
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <UART_SetConfig+0x384>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396e:	4498      	add	r8, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	461d      	mov	r5, r3
 8003974:	f04f 0600 	mov.w	r6, #0
 8003978:	46a9      	mov	r9, r5
 800397a:	46b2      	mov	sl, r6
 800397c:	eb19 0309 	adds.w	r3, r9, r9
 8003980:	eb4a 040a 	adc.w	r4, sl, sl
 8003984:	4699      	mov	r9, r3
 8003986:	46a2      	mov	sl, r4
 8003988:	eb19 0905 	adds.w	r9, r9, r5
 800398c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800399c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a4:	4689      	mov	r9, r1
 80039a6:	4692      	mov	sl, r2
 80039a8:	eb19 0005 	adds.w	r0, r9, r5
 80039ac:	eb4a 0106 	adc.w	r1, sl, r6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	461d      	mov	r5, r3
 80039b6:	f04f 0600 	mov.w	r6, #0
 80039ba:	196b      	adds	r3, r5, r5
 80039bc:	eb46 0406 	adc.w	r4, r6, r6
 80039c0:	461a      	mov	r2, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	f7fc fc74 	bl	80002b0 <__aeabi_uldivmod>
 80039c8:	4603      	mov	r3, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <UART_SetConfig+0x384>)
 80039d0:	fba3 1302 	umull	r1, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	2164      	movs	r1, #100	; 0x64
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	3332      	adds	r3, #50	; 0x32
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <UART_SetConfig+0x384>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 0207 	and.w	r2, r3, #7
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4442      	add	r2, r8
 80039f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039f6:	e1b2      	b.n	8003d5e <UART_SetConfig+0x6e2>
 80039f8:	40011000 	.word	0x40011000
 80039fc:	40011400 	.word	0x40011400
 8003a00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4ad7      	ldr	r2, [pc, #860]	; (8003d68 <UART_SetConfig+0x6ec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d005      	beq.n	8003a1a <UART_SetConfig+0x39e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4ad6      	ldr	r2, [pc, #856]	; (8003d6c <UART_SetConfig+0x6f0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f040 80d1 	bne.w	8003bbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a1a:	f7ff f80f 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	469a      	mov	sl, r3
 8003a24:	f04f 0b00 	mov.w	fp, #0
 8003a28:	46d0      	mov	r8, sl
 8003a2a:	46d9      	mov	r9, fp
 8003a2c:	eb18 0308 	adds.w	r3, r8, r8
 8003a30:	eb49 0409 	adc.w	r4, r9, r9
 8003a34:	4698      	mov	r8, r3
 8003a36:	46a1      	mov	r9, r4
 8003a38:	eb18 080a 	adds.w	r8, r8, sl
 8003a3c:	eb49 090b 	adc.w	r9, r9, fp
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a54:	4688      	mov	r8, r1
 8003a56:	4691      	mov	r9, r2
 8003a58:	eb1a 0508 	adds.w	r5, sl, r8
 8003a5c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4619      	mov	r1, r3
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	f04f 0400 	mov.w	r4, #0
 8003a72:	0094      	lsls	r4, r2, #2
 8003a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a78:	008b      	lsls	r3, r1, #2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	4628      	mov	r0, r5
 8003a80:	4631      	mov	r1, r6
 8003a82:	f7fc fc15 	bl	80002b0 <__aeabi_uldivmod>
 8003a86:	4603      	mov	r3, r0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4bb8      	ldr	r3, [pc, #736]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	469b      	mov	fp, r3
 8003a9c:	f04f 0c00 	mov.w	ip, #0
 8003aa0:	46d9      	mov	r9, fp
 8003aa2:	46e2      	mov	sl, ip
 8003aa4:	eb19 0309 	adds.w	r3, r9, r9
 8003aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8003aac:	4699      	mov	r9, r3
 8003aae:	46a2      	mov	sl, r4
 8003ab0:	eb19 090b 	adds.w	r9, r9, fp
 8003ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003acc:	4689      	mov	r9, r1
 8003ace:	4692      	mov	sl, r2
 8003ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f04f 0400 	mov.w	r4, #0
 8003aea:	0094      	lsls	r4, r2, #2
 8003aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003af0:	008b      	lsls	r3, r1, #2
 8003af2:	461a      	mov	r2, r3
 8003af4:	4623      	mov	r3, r4
 8003af6:	4628      	mov	r0, r5
 8003af8:	4631      	mov	r1, r6
 8003afa:	f7fc fbd9 	bl	80002b0 <__aeabi_uldivmod>
 8003afe:	4603      	mov	r3, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b9a      	ldr	r3, [pc, #616]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003b06:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2164      	movs	r1, #100	; 0x64
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a95      	ldr	r2, [pc, #596]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	4498      	add	r8, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	469b      	mov	fp, r3
 8003b2a:	f04f 0c00 	mov.w	ip, #0
 8003b2e:	46d9      	mov	r9, fp
 8003b30:	46e2      	mov	sl, ip
 8003b32:	eb19 0309 	adds.w	r3, r9, r9
 8003b36:	eb4a 040a 	adc.w	r4, sl, sl
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	46a2      	mov	sl, r4
 8003b3e:	eb19 090b 	adds.w	r9, r9, fp
 8003b42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b5a:	4689      	mov	r9, r1
 8003b5c:	4692      	mov	sl, r2
 8003b5e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b62:	eb4c 060a 	adc.w	r6, ip, sl
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	f04f 0400 	mov.w	r4, #0
 8003b78:	0094      	lsls	r4, r2, #2
 8003b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b7e:	008b      	lsls	r3, r1, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4623      	mov	r3, r4
 8003b84:	4628      	mov	r0, r5
 8003b86:	4631      	mov	r1, r6
 8003b88:	f7fc fb92 	bl	80002b0 <__aeabi_uldivmod>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b77      	ldr	r3, [pc, #476]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4442      	add	r2, r8
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	e0d0      	b.n	8003d5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7fe ff2a 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	469a      	mov	sl, r3
 8003bc6:	f04f 0b00 	mov.w	fp, #0
 8003bca:	46d0      	mov	r8, sl
 8003bcc:	46d9      	mov	r9, fp
 8003bce:	eb18 0308 	adds.w	r3, r8, r8
 8003bd2:	eb49 0409 	adc.w	r4, r9, r9
 8003bd6:	4698      	mov	r8, r3
 8003bd8:	46a1      	mov	r9, r4
 8003bda:	eb18 080a 	adds.w	r8, r8, sl
 8003bde:	eb49 090b 	adc.w	r9, r9, fp
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bf6:	4688      	mov	r8, r1
 8003bf8:	4691      	mov	r9, r2
 8003bfa:	eb1a 0508 	adds.w	r5, sl, r8
 8003bfe:	eb4b 0609 	adc.w	r6, fp, r9
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	0094      	lsls	r4, r2, #2
 8003c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c1a:	008b      	lsls	r3, r1, #2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	4631      	mov	r1, r6
 8003c24:	f7fc fb44 	bl	80002b0 <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003c30:	fba3 2302 	umull	r2, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	469b      	mov	fp, r3
 8003c3e:	f04f 0c00 	mov.w	ip, #0
 8003c42:	46d9      	mov	r9, fp
 8003c44:	46e2      	mov	sl, ip
 8003c46:	eb19 0309 	adds.w	r3, r9, r9
 8003c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c4e:	4699      	mov	r9, r3
 8003c50:	46a2      	mov	sl, r4
 8003c52:	eb19 090b 	adds.w	r9, r9, fp
 8003c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c6e:	4689      	mov	r9, r1
 8003c70:	4692      	mov	sl, r2
 8003c72:	eb1b 0509 	adds.w	r5, fp, r9
 8003c76:	eb4c 060a 	adc.w	r6, ip, sl
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	0094      	lsls	r4, r2, #2
 8003c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c92:	008b      	lsls	r3, r1, #2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	4628      	mov	r0, r5
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	f7fc fb08 	bl	80002b0 <__aeabi_uldivmod>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a2d      	ldr	r2, [pc, #180]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc6:	4498      	add	r8, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	469b      	mov	fp, r3
 8003ccc:	f04f 0c00 	mov.w	ip, #0
 8003cd0:	46d9      	mov	r9, fp
 8003cd2:	46e2      	mov	sl, ip
 8003cd4:	eb19 0309 	adds.w	r3, r9, r9
 8003cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cdc:	4699      	mov	r9, r3
 8003cde:	46a2      	mov	sl, r4
 8003ce0:	eb19 090b 	adds.w	r9, r9, fp
 8003ce4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cfc:	4689      	mov	r9, r1
 8003cfe:	4692      	mov	sl, r2
 8003d00:	eb1b 0509 	adds.w	r5, fp, r9
 8003d04:	eb4c 060a 	adc.w	r6, ip, sl
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	0094      	lsls	r4, r2, #2
 8003d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d20:	008b      	lsls	r3, r1, #2
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	4628      	mov	r0, r5
 8003d28:	4631      	mov	r1, r6
 8003d2a:	f7fc fac1 	bl	80002b0 <__aeabi_uldivmod>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003d36:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2164      	movs	r1, #100	; 0x64
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <UART_SetConfig+0x6f4>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4442      	add	r2, r8
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	e7ff      	b.n	8003d5e <UART_SetConfig+0x6e2>
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	40011000 	.word	0x40011000
 8003d6c:	40011400 	.word	0x40011400
 8003d70:	51eb851f 	.word	0x51eb851f

08003d74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d74:	b084      	sub	sp, #16
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	f107 001c 	add.w	r0, r7, #28
 8003d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d122      	bne.n	8003dd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f001 f9e4 	bl	8005194 <USB_CoreReset>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e01a      	b.n	8003e08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f001 f9d8 	bl	8005194 <USB_CoreReset>
 8003de4:	4603      	mov	r3, r0
 8003de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dfa:	e005      	b.n	8003e08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10b      	bne.n	8003e26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f043 0206 	orr.w	r2, r3, #6
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e32:	b004      	add	sp, #16
 8003e34:	4770      	bx	lr
	...

08003e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d165      	bne.n	8003f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <USB_SetTurnaroundTime+0x11c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d906      	bls.n	8003e62 <USB_SetTurnaroundTime+0x2a>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <USB_SetTurnaroundTime+0x120>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d802      	bhi.n	8003e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e062      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <USB_SetTurnaroundTime+0x120>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d906      	bls.n	8003e78 <USB_SetTurnaroundTime+0x40>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a3b      	ldr	r2, [pc, #236]	; (8003f5c <USB_SetTurnaroundTime+0x124>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d802      	bhi.n	8003e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e72:	230e      	movs	r3, #14
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e057      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <USB_SetTurnaroundTime+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d906      	bls.n	8003e8e <USB_SetTurnaroundTime+0x56>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4a37      	ldr	r2, [pc, #220]	; (8003f60 <USB_SetTurnaroundTime+0x128>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d802      	bhi.n	8003e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e88:	230d      	movs	r3, #13
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e04c      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a33      	ldr	r2, [pc, #204]	; (8003f60 <USB_SetTurnaroundTime+0x128>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d906      	bls.n	8003ea4 <USB_SetTurnaroundTime+0x6c>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a32      	ldr	r2, [pc, #200]	; (8003f64 <USB_SetTurnaroundTime+0x12c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d802      	bhi.n	8003ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e041      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a2f      	ldr	r2, [pc, #188]	; (8003f64 <USB_SetTurnaroundTime+0x12c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d906      	bls.n	8003eba <USB_SetTurnaroundTime+0x82>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <USB_SetTurnaroundTime+0x130>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d802      	bhi.n	8003eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003eb4:	230b      	movs	r3, #11
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e036      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <USB_SetTurnaroundTime+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d906      	bls.n	8003ed0 <USB_SetTurnaroundTime+0x98>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <USB_SetTurnaroundTime+0x134>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d802      	bhi.n	8003ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003eca:	230a      	movs	r3, #10
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e02b      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <USB_SetTurnaroundTime+0x134>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d906      	bls.n	8003ee6 <USB_SetTurnaroundTime+0xae>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <USB_SetTurnaroundTime+0x138>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d802      	bhi.n	8003ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ee0:	2309      	movs	r3, #9
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e020      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <USB_SetTurnaroundTime+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d906      	bls.n	8003efc <USB_SetTurnaroundTime+0xc4>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <USB_SetTurnaroundTime+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d802      	bhi.n	8003efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e015      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <USB_SetTurnaroundTime+0x13c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d906      	bls.n	8003f12 <USB_SetTurnaroundTime+0xda>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <USB_SetTurnaroundTime+0x140>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d802      	bhi.n	8003f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e00a      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f12:	2306      	movs	r3, #6
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e007      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f1e:	2309      	movs	r3, #9
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e001      	b.n	8003f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f24:	2309      	movs	r3, #9
 8003f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	029b      	lsls	r3, r3, #10
 8003f3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	00d8acbf 	.word	0x00d8acbf
 8003f58:	00e4e1bf 	.word	0x00e4e1bf
 8003f5c:	00f423ff 	.word	0x00f423ff
 8003f60:	0106737f 	.word	0x0106737f
 8003f64:	011a499f 	.word	0x011a499f
 8003f68:	01312cff 	.word	0x01312cff
 8003f6c:	014ca43f 	.word	0x014ca43f
 8003f70:	016e35ff 	.word	0x016e35ff
 8003f74:	01a6ab1f 	.word	0x01a6ab1f
 8003f78:	01e847ff 	.word	0x01e847ff

08003f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d106      	bne.n	8003fec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e00b      	b.n	8004004 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	e001      	b.n	8004004 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e003      	b.n	800400c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004004:	2032      	movs	r0, #50	; 0x32
 8004006:	f7fc feb5 	bl	8000d74 <HAL_Delay>

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004014:	b084      	sub	sp, #16
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e009      	b.n	8004048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3340      	adds	r3, #64	; 0x40
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	2200      	movs	r2, #0
 8004040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	3301      	adds	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b0e      	cmp	r3, #14
 800404c:	d9f2      	bls.n	8004034 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800404e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11c      	bne.n	800408e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e005      	b.n	800409a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a0:	461a      	mov	r2, r3
 80040a2:	2300      	movs	r3, #0
 80040a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ac:	4619      	mov	r1, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	461a      	mov	r2, r3
 80040b6:	680b      	ldr	r3, [r1, #0]
 80040b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10c      	bne.n	80040da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f949 	bl	8004360 <USB_SetDevSpeed>
 80040ce:	e008      	b.n	80040e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040d0:	2101      	movs	r1, #1
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f944 	bl	8004360 <USB_SetDevSpeed>
 80040d8:	e003      	b.n	80040e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040da:	2103      	movs	r1, #3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f93f 	bl	8004360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040e2:	2110      	movs	r1, #16
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f8f3 	bl	80042d0 <USB_FlushTxFifo>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f911 	bl	800431c <USB_FlushRxFifo>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e043      	b.n	80041b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d118      	bne.n	8004178 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e013      	b.n	800418a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	461a      	mov	r2, r3
 8004170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e008      	b.n	800418a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	461a      	mov	r2, r3
 8004186:	2300      	movs	r3, #0
 8004188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3301      	adds	r3, #1
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d3b7      	bcc.n	800412e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e043      	b.n	800424c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041da:	d118      	bne.n	800420e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e013      	b.n	8004220 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e008      	b.n	8004220 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3301      	adds	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d3b7      	bcc.n	80041c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004266:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004274:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <USB_DevInit+0x2b8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042c8:	b004      	add	sp, #16
 80042ca:	4770      	bx	lr
 80042cc:	803c3800 	.word	0x803c3800

080042d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <USB_FlushTxFifo+0x48>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b20      	cmp	r3, #32
 8004306:	d0f0      	beq.n	80042ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2210      	movs	r2, #16
 800432c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <USB_FlushRxFifo+0x40>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e006      	b.n	800434e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d0f0      	beq.n	800432e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	00030d40 	.word	0x00030d40

08004360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
 80043b6:	e00a      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d002      	beq.n	80043c4 <USB_GetDevSpeed+0x32>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d102      	bne.n	80043ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043c4:	2302      	movs	r3, #2
 80043c6:	75fb      	strb	r3, [r7, #23]
 80043c8:	e001      	b.n	80043ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043ca:	230f      	movs	r3, #15
 80043cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d13a      	bne.n	800446e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004416:	4313      	orrs	r3, r2
 8004418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d155      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800444c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	059b      	lsls	r3, r3, #22
 8004452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004454:	4313      	orrs	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e036      	b.n	80044dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448c:	4313      	orrs	r3, r2
 800448e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	78db      	ldrb	r3, [r3, #3]
 80044c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c2:	430b      	orrs	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 815c 	bne.w	80047c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d132      	bne.n	800457c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	0cdb      	lsrs	r3, r3, #19
 8004576:	04db      	lsls	r3, r3, #19
 8004578:	6113      	str	r3, [r2, #16]
 800457a:	e074      	b.n	8004666 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	440a      	add	r2, r1
 8004592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004596:	0cdb      	lsrs	r3, r3, #19
 8004598:	04db      	lsls	r3, r3, #19
 800459a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6959      	ldr	r1, [r3, #20]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	440b      	add	r3, r1
 80045d8:	1e59      	subs	r1, r3, #1
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e2:	04d9      	lsls	r1, r3, #19
 80045e4:	4b9d      	ldr	r3, [pc, #628]	; (800485c <USB_EPStartXfer+0x370>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	0148      	lsls	r0, r1, #5
 80045ec:	69f9      	ldr	r1, [r7, #28]
 80045ee:	4401      	add	r1, r0
 80045f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	0148      	lsls	r0, r1, #5
 8004612:	69f9      	ldr	r1, [r7, #28]
 8004614:	4401      	add	r1, r0
 8004616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	78db      	ldrb	r3, [r3, #3]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d11f      	bne.n	8004666 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004644:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004664:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d14b      	bne.n	8004704 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	78db      	ldrb	r3, [r3, #3]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d128      	bne.n	80046e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d110      	bne.n	80046c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e00f      	b.n	80046e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e12f      	b.n	8004964 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004722:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	78db      	ldrb	r3, [r3, #3]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d015      	beq.n	8004758 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8117 	beq.w	8004964 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004752:	4313      	orrs	r3, r2
 8004754:	634b      	str	r3, [r1, #52]	; 0x34
 8004756:	e105      	b.n	8004964 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d110      	bne.n	800478a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e00f      	b.n	80047aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68d9      	ldr	r1, [r3, #12]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	b298      	uxth	r0, r3
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa2b 	bl	8004c1a <USB_WritePacket>
 80047c4:	e0ce      	b.n	8004964 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e0:	0cdb      	lsrs	r3, r3, #19
 80047e2:	04db      	lsls	r3, r3, #19
 80047e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004800:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004804:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004808:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d126      	bne.n	8004860 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	0148      	lsls	r0, r1, #5
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	4401      	add	r1, r0
 8004830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004834:	4313      	orrs	r3, r2
 8004836:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004856:	6113      	str	r3, [r2, #16]
 8004858:	e036      	b.n	80048c8 <USB_EPStartXfer+0x3dc>
 800485a:	bf00      	nop
 800485c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4413      	add	r3, r2
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	8afb      	ldrh	r3, [r7, #22]
 8004886:	04d9      	lsls	r1, r3, #19
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <USB_EPStartXfer+0x484>)
 800488a:	400b      	ands	r3, r1
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	0148      	lsls	r0, r1, #5
 8004890:	69f9      	ldr	r1, [r7, #28]
 8004892:	4401      	add	r1, r0
 8004894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	8af9      	ldrh	r1, [r7, #22]
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b8:	69b9      	ldr	r1, [r7, #24]
 80048ba:	0148      	lsls	r0, r1, #5
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	4401      	add	r1, r0
 80048c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c4:	4313      	orrs	r3, r2
 80048c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10d      	bne.n	80048ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68d9      	ldr	r1, [r3, #12]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	460a      	mov	r2, r1
 80048e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	78db      	ldrb	r3, [r3, #3]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d128      	bne.n	8004944 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d110      	bne.n	8004924 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00f      	b.n	8004944 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004962:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	1ff80000 	.word	0x1ff80000

08004974 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 80cd 	bne.w	8004b30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d132      	bne.n	8004a04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	0cdb      	lsrs	r3, r3, #19
 80049fe:	04db      	lsls	r3, r3, #19
 8004a00:	6113      	str	r3, [r2, #16]
 8004a02:	e04e      	b.n	8004aa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1e:	0cdb      	lsrs	r3, r3, #19
 8004a20:	04db      	lsls	r3, r3, #19
 8004a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d903      	bls.n	8004a5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	0148      	lsls	r0, r1, #5
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	4401      	add	r1, r0
 8004a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d11e      	bne.n	8004ae6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e092      	b.n	8004c0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d07e      	beq.n	8004c0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	2101      	movs	r1, #1
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b2e:	e06d      	b.n	8004c0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4a:	0cdb      	lsrs	r3, r3, #19
 8004b4c:	04db      	lsls	r3, r3, #19
 8004b4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b72:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	0148      	lsls	r0, r1, #5
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	4401      	add	r1, r0
 8004bc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10d      	bne.n	8004bec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	68d9      	ldr	r1, [r3, #12]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	460a      	mov	r2, r1
 8004bea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b089      	sub	sp, #36	; 0x24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	4611      	mov	r1, r2
 8004c26:	461a      	mov	r2, r3
 8004c28:	460b      	mov	r3, r1
 8004c2a:	71fb      	strb	r3, [r7, #7]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11a      	bne.n	8004c76 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c40:	88bb      	ldrh	r3, [r7, #4]
 8004c42:	3303      	adds	r3, #3
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e00f      	b.n	8004c6e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	031a      	lsls	r2, r3, #12
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3304      	adds	r3, #4
 8004c66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d3eb      	bcc.n	8004c4e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3724      	adds	r7, #36	; 0x24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	3303      	adds	r3, #3
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e00b      	b.n	8004cc0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3ef      	bcc.n	8004ca8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d12c      	bne.n	8004d4c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db12      	blt.n	8004d2a <USB_EPSetStall+0x54>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00f      	beq.n	8004d2a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d28:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e02b      	b.n	8004da4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db12      	blt.n	8004d84 <USB_EPSetStall+0xae>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00f      	beq.n	8004d84 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d82:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d128      	bne.n	8004e20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	78db      	ldrb	r3, [r3, #3]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d003      	beq.n	8004dfe <USB_EPClearStall+0x4c>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	78db      	ldrb	r3, [r3, #3]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d138      	bne.n	8004e70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e027      	b.n	8004e70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	78db      	ldrb	r3, [r3, #3]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <USB_EPClearStall+0x9e>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d10f      	bne.n	8004e70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ea0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3a:	f043 0302 	orr.w	r3, r3, #2
 8004f3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4013      	ands	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	b29b      	uxth	r3, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800500a:	68bb      	ldr	r3, [r7, #8]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	01db      	lsls	r3, r3, #7
 800504a:	b2db      	uxtb	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005066:	68bb      	ldr	r3, [r7, #8]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0301 	and.w	r3, r3, #1
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	460b      	mov	r3, r1
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	333c      	adds	r3, #60	; 0x3c
 80050ee:	3304      	adds	r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <USB_EP0_OutStart+0xb8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d90a      	bls.n	8005112 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510c:	d101      	bne.n	8005112 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e037      	b.n	8005182 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	2300      	movs	r3, #0
 800511c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	f043 0318 	orr.w	r3, r3, #24
 8005144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005154:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005158:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10f      	bne.n	8005180 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800517e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	4f54300a 	.word	0x4f54300a

08005194 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_CoreReset+0x64>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e01b      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	daf2      	bge.n	80051a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <USB_CoreReset+0x64>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d0f0      	beq.n	80051ca <USB_CoreReset+0x36>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	00030d40 	.word	0x00030d40

080051fc <__NVIC_SystemReset>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005200:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <__NVIC_SystemReset+0x20>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <__NVIC_SystemReset+0x20>)
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <__NVIC_SystemReset+0x24>)
 8005210:	4313      	orrs	r3, r2
 8005212:	60cb      	str	r3, [r1, #12]
 8005214:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <__NVIC_SystemReset+0x1c>
 800521c:	e000ed00 	.word	0xe000ed00
 8005220:	05fa0004 	.word	0x05fa0004

08005224 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005230:	f240 401c 	movw	r0, #1052	; 0x41c
 8005234:	f002 fc76 	bl	8007b24 <malloc>
 8005238:	4603      	mov	r3, r0
 800523a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800524a:	2302      	movs	r3, #2
 800524c:	e03e      	b.n	80052cc <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <USBD_DFU_Init+0xb0>)
 8005262:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4798      	blx	r3
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e000      	b.n	80052cc <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	08010000 	.word	0x08010000

080052d8 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80052ee:	2302      	movs	r3, #2
 80052f0:	e027      	b.n	8005342 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f8:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005332:	4618      	mov	r0, r3
 8005334:	f002 fbfe 	bl	8007b34 <free>
  pdev->pClassData = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800535c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03f      	beq.n	80053fa <USBD_DFU_Setup+0xae>
 800537a:	2b20      	cmp	r3, #32
 800537c:	f040 80c3 	bne.w	8005506 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b06      	cmp	r3, #6
 8005386:	d830      	bhi.n	80053ea <USBD_DFU_Setup+0x9e>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <USBD_DFU_Setup+0x44>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053e1 	.word	0x080053e1
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b7 	.word	0x080053b7
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053d9 	.word	0x080053d9
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa62 	bl	8005878 <DFU_Download>
      break;
 80053b4:	e020      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fac7 	bl	800594c <DFU_Upload>
      break;
 80053be:	e01b      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fb9b 	bl	8005afc <DFU_GetStatus>
      break;
 80053c6:	e017      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fc49 	bl	8005c60 <DFU_ClearStatus>
      break;
 80053ce:	e013      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fc95 	bl	8005d00 <DFU_GetState>
      break;
 80053d6:	e00f      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fca5 	bl	8005d28 <DFU_Abort>
      break;
 80053de:	e00b      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9e8 	bl	80057b8 <DFU_Detach>
      break;
 80053e8:	e006      	b.n	80053f8 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fda9 	bl	8006f44 <USBD_CtlError>
      ret = USBD_FAIL;
 80053f2:	2303      	movs	r3, #3
 80053f4:	77fb      	strb	r3, [r7, #31]
      break;
 80053f6:	bf00      	nop
    }
    break;
 80053f8:	e08c      	b.n	8005514 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b0b      	cmp	r3, #11
 8005400:	d878      	bhi.n	80054f4 <USBD_DFU_Setup+0x1a8>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <USBD_DFU_Setup+0xbc>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	08005439 	.word	0x08005439
 800540c:	08005503 	.word	0x08005503
 8005410:	080054f5 	.word	0x080054f5
 8005414:	080054f5 	.word	0x080054f5
 8005418:	080054f5 	.word	0x080054f5
 800541c:	080054f5 	.word	0x080054f5
 8005420:	08005461 	.word	0x08005461
 8005424:	080054f5 	.word	0x080054f5
 8005428:	080054f5 	.word	0x080054f5
 800542c:	080054f5 	.word	0x080054f5
 8005430:	0800548b 	.word	0x0800548b
 8005434:	080054b5 	.word	0x080054b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543e:	2b03      	cmp	r3, #3
 8005440:	d107      	bne.n	8005452 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005442:	f107 030e 	add.w	r3, r7, #14
 8005446:	2202      	movs	r2, #2
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fdeb 	bl	8007026 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005450:	e058      	b.n	8005504 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fd75 	bl	8006f44 <USBD_CtlError>
        ret = USBD_FAIL;
 800545a:	2303      	movs	r3, #3
 800545c:	77fb      	strb	r3, [r7, #31]
      break;
 800545e:	e051      	b.n	8005504 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	885b      	ldrh	r3, [r3, #2]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b21      	cmp	r3, #33	; 0x21
 800546a:	d107      	bne.n	800547c <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <USBD_DFU_Setup+0x1d4>)
 800546e:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	88db      	ldrh	r3, [r3, #6]
 8005474:	2b09      	cmp	r3, #9
 8005476:	bf28      	it	cs
 8005478:	2309      	movcs	r3, #9
 800547a:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800547c:	8afb      	ldrh	r3, [r7, #22]
 800547e:	461a      	mov	r2, r3
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 fdcf 	bl	8007026 <USBD_CtlSendData>
      break;
 8005488:	e03c      	b.n	8005504 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005490:	2b03      	cmp	r3, #3
 8005492:	d108      	bne.n	80054a6 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800549a:	2201      	movs	r2, #1
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 fdc1 	bl	8007026 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054a4:	e02e      	b.n	8005504 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 fd4b 	bl	8006f44 <USBD_CtlError>
        ret = USBD_FAIL;
 80054ae:	2303      	movs	r3, #3
 80054b0:	77fb      	strb	r3, [r7, #31]
      break;
 80054b2:	e027      	b.n	8005504 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	885b      	ldrh	r3, [r3, #2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d107      	bne.n	80054d8 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	885b      	ldrh	r3, [r3, #2]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80054d6:	e015      	b.n	8005504 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 fd32 	bl	8006f44 <USBD_CtlError>
          ret = USBD_FAIL;
 80054e0:	2303      	movs	r3, #3
 80054e2:	77fb      	strb	r3, [r7, #31]
      break;
 80054e4:	e00e      	b.n	8005504 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fd2b 	bl	8006f44 <USBD_CtlError>
        ret = USBD_FAIL;
 80054ee:	2303      	movs	r3, #3
 80054f0:	77fb      	strb	r3, [r7, #31]
      break;
 80054f2:	e007      	b.n	8005504 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 fd24 	bl	8006f44 <USBD_CtlError>
      ret = USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	77fb      	strb	r3, [r7, #31]
      break;
 8005500:	e000      	b.n	8005504 <USBD_DFU_Setup+0x1b8>
      break;
 8005502:	bf00      	nop
    }
    break;
 8005504:	e006      	b.n	8005514 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fd1b 	bl	8006f44 <USBD_CtlError>
    ret = USBD_FAIL;
 800550e:	2303      	movs	r3, #3
 8005510:	77fb      	strb	r3, [r7, #31]
    break;
 8005512:	bf00      	nop
  }

  return (uint8_t)ret;
 8005514:	7ffb      	ldrb	r3, [r7, #31]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000005a 	.word	0x2000005a

08005524 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	221b      	movs	r2, #27
 8005530:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8005532:	4b03      	ldr	r3, [pc, #12]	; (8005540 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000048 	.word	0x20000048

08005544 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800556a:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005572:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800557a:	2b04      	cmp	r3, #4
 800557c:	f040 80bc 	bne.w	80056f8 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005586:	2b00      	cmp	r3, #0
 8005588:	d17a      	bne.n	8005680 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005590:	2b01      	cmp	r3, #1
 8005592:	f000 8092 	beq.w	80056ba <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800559c:	2b05      	cmp	r3, #5
 800559e:	d15c      	bne.n	800565a <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b21      	cmp	r3, #33	; 0x21
 80055a6:	d124      	bne.n	80055f2 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	461a      	mov	r2, r3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	789b      	ldrb	r3, [r3, #2]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	441a      	add	r2, r3
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	441a      	add	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	791b      	ldrb	r3, [r3, #4]
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	441a      	add	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80055f0:	e063      	b.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b41      	cmp	r3, #65	; 0x41
 80055f8:	d15f      	bne.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	461a      	mov	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	789b      	ldrb	r3, [r3, #2]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	441a      	add	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	441a      	add	r2, r3
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	791b      	ldrb	r3, [r3, #4]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	441a      	add	r2, r3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d031      	beq.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8005656:	2303      	movs	r3, #3
 8005658:	e057      	b.n	800570a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2200      	movs	r2, #0
 800565e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2200      	movs	r2, #0
 8005666:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800566e:	2301      	movs	r3, #1
 8005670:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fc63 	bl	8006f44 <USBD_CtlError>
 800567e:	e01c      	b.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005686:	2b01      	cmp	r3, #1
 8005688:	d917      	bls.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <USBD_DFU_EP0_TxReady+0x1b8>)
 8005692:	4413      	add	r3, r2
 8005694:	029a      	lsls	r2, r3, #10
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	69f8      	ldr	r0, [r7, #28]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80056ae:	4798      	blx	r3
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e027      	b.n	800570a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2203      	movs	r2, #3
 80056ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80056f6:	e007      	b.n	8005708 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80056fe:	2b07      	cmp	r3, #7
 8005700:	d102      	bne.n	8005708 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fb5e 	bl	8005dc4 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	003ffffe 	.word	0x003ffffe

08005718 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	220a      	movs	r2, #10
 800573c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000064 	.word	0x20000064

08005750 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	460b      	mov	r3, r1
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005764:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d808      	bhi.n	800577e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4905      	ldr	r1, [pc, #20]	; (8005788 <USBD_DFU_GetUsrStringDesc+0x38>)
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fbf6 	bl	8006f66 <USBD_GetString>
    return USBD_StrDesc;
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <USBD_DFU_GetUsrStringDesc+0x38>)
 800577c:	e000      	b.n	8005780 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800577e:	2300      	movs	r3, #0
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000170 	.word	0x20000170

0800578c <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800579c:	2303      	movs	r3, #3
 800579e:	e004      	b.n	80057aa <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c8:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d013      	beq.n	80057fc <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d00e      	beq.n	80057fc <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d009      	beq.n	80057fc <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d004      	beq.n	80057fc <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80057f8:	2b09      	cmp	r3, #9
 80057fa:	d125      	bne.n	8005848 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <DFU_Detach+0xbc>)
 800584a:	7d5b      	ldrb	r3, [r3, #21]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb62 	bl	8005f1e <USBD_Stop>
    (void)USBD_Start(pdev);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fb53 	bl	8005f06 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8005860:	e004      	b.n	800586c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	885b      	ldrh	r3, [r3, #2]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fb fa84 	bl	8000d74 <HAL_Delay>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000048 	.word	0x20000048

08005878 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005888:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	88db      	ldrh	r3, [r3, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d02d      	beq.n	80058ee <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005898:	2b02      	cmp	r3, #2
 800589a:	d004      	beq.n	80058a6 <DFU_Download+0x2e>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d11e      	bne.n	80058e4 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	885b      	ldrh	r3, [r3, #2]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	88db      	ldrh	r3, [r3, #6]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058da:	461a      	mov	r2, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 fbce 	bl	800707e <USBD_CtlPrepareRx>
 80058e2:	e02e      	b.n	8005942 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fb2c 	bl	8006f44 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80058ec:	e029      	b.n	8005942 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d004      	beq.n	8005902 <DFU_Download+0x8a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d11a      	bne.n	8005938 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2206      	movs	r2, #6
 800590e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005936:	e004      	b.n	8005942 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fb02 	bl	8006f44 <USBD_CtlError>
}
 8005940:	e7ff      	b.n	8005942 <DFU_Download+0xca>
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005964:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80a9 	beq.w	8005ac2 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005976:	2b02      	cmp	r3, #2
 8005978:	d005      	beq.n	8005986 <DFU_Upload+0x3a>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005980:	2b09      	cmp	r3, #9
 8005982:	f040 8091 	bne.w	8005aa8 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	885b      	ldrh	r3, [r3, #2]
 800598a:	461a      	mov	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d12c      	bne.n	8005a02 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d901      	bls.n	80059b6 <DFU_Upload+0x6a>
 80059b2:	2202      	movs	r2, #2
 80059b4:	e000      	b.n	80059b8 <DFU_Upload+0x6c>
 80059b6:	2209      	movs	r2, #9
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2221      	movs	r2, #33	; 0x21
 80059ec:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2241      	movs	r2, #65	; 0x41
 80059f2:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2203      	movs	r2, #3
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fb13 	bl	8007026 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005a00:	e076      	b.n	8005af0 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d932      	bls.n	8005a72 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2209      	movs	r2, #9
 8005a10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <DFU_Upload+0x1ac>)
 8005a40:	4413      	add	r3, r2
 8005a42:	029a      	lsls	r2, r3, #10
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8005a5c:	4798      	blx	r3
 8005a5e:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a66:	461a      	mov	r2, r3
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 fadb 	bl	8007026 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005a70:	e03e      	b.n	8005af0 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	220f      	movs	r2, #15
 8005a76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fa4f 	bl	8006f44 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8005aa6:	e023      	b.n	8005af0 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fa42 	bl	8006f44 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8005ac0:	e016      	b.n	8005af0 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8005aee:	e7ff      	b.n	8005af0 <DFU_Upload+0x1a4>
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	003ffffe 	.word	0x003ffffe

08005afc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b12:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d002      	beq.n	8005b24 <DFU_GetStatus+0x28>
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d051      	beq.n	8005bc6 <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8005b22:	e08e      	b.n	8005c42 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d034      	beq.n	8005b98 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10e      	bne.n	8005b82 <DFU_GetStatus+0x86>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b41      	cmp	r3, #65	; 0x41
 8005b6a:	d10a      	bne.n	8005b82 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4798      	blx	r3
    break;
 8005b80:	e05f      	b.n	8005c42 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005b92:	2101      	movs	r1, #1
 8005b94:	4798      	blx	r3
    break;
 8005b96:	e054      	b.n	8005c42 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8005bc4:	e03d      	b.n	8005c42 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d116      	bne.n	8005bfe <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8005bfc:	e020      	b.n	8005c40 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <DFU_GetStatus+0x160>)
 8005c0a:	7d1b      	ldrb	r3, [r3, #20]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8005c40:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8005c48:	2206      	movs	r2, #6
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f9ea 	bl	8007026 <USBD_CtlSendData>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000048 	.word	0x20000048

08005c60 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005c76:	2b0a      	cmp	r3, #10
 8005c78:	d11e      	bne.n	8005cb8 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 8005cb6:	e01d      	b.n	8005cf4 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	220a      	movs	r2, #10
 8005cbc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	220e      	movs	r2, #14
 8005cc4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d16:	2201      	movs	r2, #1
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f983 	bl	8007026 <USBD_CtlSendData>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d36:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d013      	beq.n	8005d6a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d00e      	beq.n	8005d6a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d009      	beq.n	8005d6a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d004      	beq.n	8005d6a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d125      	bne.n	8005db6 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dd2:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <DFU_Leave+0x90>)
 8005dde:	7d1b      	ldrb	r3, [r3, #20]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d016      	beq.n	8005e16 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2206      	movs	r2, #6
 8005dec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8005e14:	e01a      	b.n	8005e4c <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2208      	movs	r2, #8
 8005e1a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f86b 	bl	8005f1e <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8005e48:	f7ff f9d8 	bl	80051fc <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000048 	.word	0x20000048

08005e58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e025      	b.n	8005ebc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	79fa      	ldrb	r2, [r7, #7]
 8005eae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f001 fc1b 	bl	80076ec <USBD_LL_Init>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e010      	b.n	8005efe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f107 020e 	add.w	r2, r7, #14
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fc3c 	bl	800778c <USBD_LL_Start>
 8005f14:	4603      	mov	r3, r0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	4611      	mov	r1, r2
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 fc33 	bl	80077c2 <USBD_LL_Stop>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
  }

  return USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 ff68 	bl	8006ed0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b01      	cmp	r3, #1
 8006022:	d00e      	beq.n	8006042 <USBD_LL_SetupStage+0x5a>
 8006024:	2b01      	cmp	r3, #1
 8006026:	d302      	bcc.n	800602e <USBD_LL_SetupStage+0x46>
 8006028:	2b02      	cmp	r3, #2
 800602a:	d014      	beq.n	8006056 <USBD_LL_SetupStage+0x6e>
 800602c:	e01d      	b.n	800606a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa18 	bl	800646c <USBD_StdDevReq>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e020      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa7c 	bl	8006548 <USBD_StdItfReq>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e016      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fab8 	bl	80065d4 <USBD_StdEPReq>
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e00c      	b.n	8006084 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fbe3 	bl	8007844 <USBD_LL_StallEP>
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
      break;
 8006082:	bf00      	nop
  }

  return ret;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	460b      	mov	r3, r1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d137      	bne.n	8006112 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d14a      	bne.n	800614a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d913      	bls.n	80060e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	1ad2      	subs	r2, r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bf28      	it	cs
 80060da:	4613      	movcs	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 ffe9 	bl	80070b8 <USBD_CtlContinueRx>
 80060e6:	e030      	b.n	800614a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d105      	bne.n	800610a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 ffe5 	bl	80070da <USBD_CtlSendStatus>
 8006110:	e01b      	b.n	800614a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d013      	beq.n	8006146 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006124:	2b03      	cmp	r3, #3
 8006126:	d10e      	bne.n	8006146 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	7afa      	ldrb	r2, [r7, #11]
 8006132:	4611      	mov	r1, r2
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	e002      	b.n	800614c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e000      	b.n	800614c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	460b      	mov	r3, r1
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d16a      	bne.n	800623e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3314      	adds	r3, #20
 800616c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006174:	2b02      	cmp	r3, #2
 8006176:	d155      	bne.n	8006224 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d914      	bls.n	80061ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	461a      	mov	r2, r3
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 ff5e 	bl	800705c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a0:	2300      	movs	r3, #0
 80061a2:	2200      	movs	r2, #0
 80061a4:	2100      	movs	r1, #0
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 fbf6 	bl	8007998 <USBD_LL_PrepareReceive>
 80061ac:	e03a      	b.n	8006224 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d11c      	bne.n	80061f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d316      	bcc.n	80061f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d20f      	bcs.n	80061f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 ff3f 	bl	800705c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e6:	2300      	movs	r3, #0
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 fbd3 	bl	8007998 <USBD_LL_PrepareReceive>
 80061f2:	e017      	b.n	8006224 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006206:	2b03      	cmp	r3, #3
 8006208:	d105      	bne.n	8006216 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f001 fb13 	bl	8007844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 ff6e 	bl	8007100 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d123      	bne.n	8006276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff fe9b 	bl	8005f6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800623c:	e01b      	b.n	8006276 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006250:	2b03      	cmp	r3, #3
 8006252:	d10e      	bne.n	8006272 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	7afa      	ldrb	r2, [r7, #11]
 800625e:	4611      	mov	r1, r2
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	e002      	b.n	8006278 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e000      	b.n	8006278 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6852      	ldr	r2, [r2, #4]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	4611      	mov	r1, r2
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	2200      	movs	r2, #0
 80062c8:	2100      	movs	r1, #0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fa94 	bl	80077f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2240      	movs	r2, #64	; 0x40
 80062dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	2200      	movs	r2, #0
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fa86 	bl	80077f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635a:	2b04      	cmp	r3, #4
 800635c:	d105      	bne.n	800636a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006386:	2b03      	cmp	r3, #3
 8006388:	d10b      	bne.n	80063a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
  }

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800644c:	8a3b      	ldrh	r3, [r7, #16]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	b21a      	sxth	r2, r3
 8006452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006456:	4313      	orrs	r3, r2
 8006458:	b21b      	sxth	r3, r3
 800645a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800645c:	89fb      	ldrh	r3, [r7, #14]
}
 800645e:	4618      	mov	r0, r3
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006482:	2b20      	cmp	r3, #32
 8006484:	d004      	beq.n	8006490 <USBD_StdDevReq+0x24>
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d002      	beq.n	8006490 <USBD_StdDevReq+0x24>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <USBD_StdDevReq+0x38>
 800648e:	e050      	b.n	8006532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
    break;
 80064a2:	e04b      	b.n	800653c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d83c      	bhi.n	8006526 <USBD_StdDevReq+0xba>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <USBD_StdDevReq+0x48>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	08006509 	.word	0x08006509
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	08006527 	.word	0x08006527
 80064c0:	08006513 	.word	0x08006513
 80064c4:	08006527 	.word	0x08006527
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	08006527 	.word	0x08006527
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	080064f1 	.word	0x080064f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9ce 	bl	8006880 <USBD_GetDescriptor>
      break;
 80064e4:	e024      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb6f 	bl	8006bcc <USBD_SetAddress>
      break;
 80064ee:	e01f      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fbac 	bl	8006c50 <USBD_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e018      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc49 	bl	8006d98 <USBD_GetConfig>
      break;
 8006506:	e013      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc78 	bl	8006e00 <USBD_GetStatus>
      break;
 8006510:	e00e      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fca6 	bl	8006e66 <USBD_SetFeature>
      break;
 800651a:	e009      	b.n	8006530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fcb5 	bl	8006e8e <USBD_ClrFeature>
      break;
 8006524:	e004      	b.n	8006530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fd0b 	bl	8006f44 <USBD_CtlError>
      break;
 800652e:	bf00      	nop
    }
    break;
 8006530:	e004      	b.n	800653c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd05 	bl	8006f44 <USBD_CtlError>
    break;
 800653a:	bf00      	nop
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800655e:	2b20      	cmp	r3, #32
 8006560:	d003      	beq.n	800656a <USBD_StdItfReq+0x22>
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d001      	beq.n	800656a <USBD_StdItfReq+0x22>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d12a      	bne.n	80065c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006570:	3b01      	subs	r3, #1
 8006572:	2b02      	cmp	r3, #2
 8006574:	d81d      	bhi.n	80065b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d813      	bhi.n	80065a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d110      	bne.n	80065bc <USBD_StdItfReq+0x74>
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd9a 	bl	80070da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80065a6:	e009      	b.n	80065bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fcca 	bl	8006f44 <USBD_CtlError>
      break;
 80065b0:	e004      	b.n	80065bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fcc5 	bl	8006f44 <USBD_CtlError>
      break;
 80065ba:	e000      	b.n	80065be <USBD_StdItfReq+0x76>
      break;
 80065bc:	bf00      	nop
    }
    break;
 80065be:	e004      	b.n	80065ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fcbe 	bl	8006f44 <USBD_CtlError>
    break;
 80065c8:	bf00      	nop
  }

  return ret;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	889b      	ldrh	r3, [r3, #4]
 80065e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d004      	beq.n	80065fe <USBD_StdEPReq+0x2a>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d002      	beq.n	80065fe <USBD_StdEPReq+0x2a>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <USBD_StdEPReq+0x3e>
 80065fc:	e135      	b.n	800686a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
    break;
 8006610:	e130      	b.n	8006874 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d03e      	beq.n	8006698 <USBD_StdEPReq+0xc4>
 800661a:	2b03      	cmp	r3, #3
 800661c:	d002      	beq.n	8006624 <USBD_StdEPReq+0x50>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d077      	beq.n	8006712 <USBD_StdEPReq+0x13e>
 8006622:	e11c      	b.n	800685e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662a:	2b02      	cmp	r3, #2
 800662c:	d002      	beq.n	8006634 <USBD_StdEPReq+0x60>
 800662e:	2b03      	cmp	r3, #3
 8006630:	d015      	beq.n	800665e <USBD_StdEPReq+0x8a>
 8006632:	e02b      	b.n	800668c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <USBD_StdEPReq+0x80>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d009      	beq.n	8006654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f8fd 	bl	8007844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f8f9 	bl	8007844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006652:	e020      	b.n	8006696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc74 	bl	8006f44 <USBD_CtlError>
        break;
 800665c:	e01b      	b.n	8006696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10e      	bne.n	8006684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <USBD_StdEPReq+0xb0>
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b80      	cmp	r3, #128	; 0x80
 8006670:	d008      	beq.n	8006684 <USBD_StdEPReq+0xb0>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f8e0 	bl	8007844 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fd28 	bl	80070da <USBD_CtlSendStatus>

        break;
 800668a:	e004      	b.n	8006696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fc58 	bl	8006f44 <USBD_CtlError>
        break;
 8006694:	bf00      	nop
      }
      break;
 8006696:	e0e7      	b.n	8006868 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d002      	beq.n	80066a8 <USBD_StdEPReq+0xd4>
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d015      	beq.n	80066d2 <USBD_StdEPReq+0xfe>
 80066a6:	e02d      	b.n	8006704 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <USBD_StdEPReq+0xf4>
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d009      	beq.n	80066c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f8c3 	bl	8007844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f8bf 	bl	8007844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066c6:	e023      	b.n	8006710 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc3a 	bl	8006f44 <USBD_CtlError>
        break;
 80066d0:	e01e      	b.n	8006710 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	885b      	ldrh	r3, [r3, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d119      	bne.n	800670e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f8ca 	bl	8007882 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fcf3 	bl	80070da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
        }
        break;
 8006702:	e004      	b.n	800670e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fc1c 	bl	8006f44 <USBD_CtlError>
        break;
 800670c:	e000      	b.n	8006710 <USBD_StdEPReq+0x13c>
        break;
 800670e:	bf00      	nop
      }
      break;
 8006710:	e0aa      	b.n	8006868 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	2b02      	cmp	r3, #2
 800671a:	d002      	beq.n	8006722 <USBD_StdEPReq+0x14e>
 800671c:	2b03      	cmp	r3, #3
 800671e:	d032      	beq.n	8006786 <USBD_StdEPReq+0x1b2>
 8006720:	e097      	b.n	8006852 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <USBD_StdEPReq+0x164>
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d004      	beq.n	8006738 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fc07 	bl	8006f44 <USBD_CtlError>
          break;
 8006736:	e091      	b.n	800685c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673c:	2b00      	cmp	r3, #0
 800673e:	da0b      	bge.n	8006758 <USBD_StdEPReq+0x184>
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	3310      	adds	r3, #16
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	e00b      	b.n	8006770 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2202      	movs	r2, #2
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc51 	bl	8007026 <USBD_CtlSendData>
        break;
 8006784:	e06a      	b.n	800685c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678a:	2b00      	cmp	r3, #0
 800678c:	da11      	bge.n	80067b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d117      	bne.n	80067d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fbca 	bl	8006f44 <USBD_CtlError>
            break;
 80067b0:	e054      	b.n	800685c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fbb7 	bl	8006f44 <USBD_CtlError>
            break;
 80067d6:	e041      	b.n	800685c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da0b      	bge.n	80067f8 <USBD_StdEPReq+0x224>
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	3310      	adds	r3, #16
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	e00b      	b.n	8006810 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	3304      	adds	r3, #4
 8006810:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <USBD_StdEPReq+0x24a>
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	d103      	bne.n	8006826 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e00e      	b.n	8006844 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f848 	bl	80078c0 <USBD_LL_IsStallEP>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	e002      	b.n	8006844 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2202      	movs	r2, #2
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fbeb 	bl	8007026 <USBD_CtlSendData>
          break;
 8006850:	e004      	b.n	800685c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb75 	bl	8006f44 <USBD_CtlError>
        break;
 800685a:	bf00      	nop
      }
      break;
 800685c:	e004      	b.n	8006868 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb6f 	bl	8006f44 <USBD_CtlError>
      break;
 8006866:	bf00      	nop
    }
    break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb69 	bl	8006f44 <USBD_CtlError>
    break;
 8006872:	bf00      	nop
  }

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	2b0e      	cmp	r3, #14
 80068a2:	f200 8165 	bhi.w	8006b70 <USBD_GetDescriptor+0x2f0>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <USBD_GetDescriptor+0x2c>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	0800691d 	.word	0x0800691d
 80068b0:	08006935 	.word	0x08006935
 80068b4:	08006975 	.word	0x08006975
 80068b8:	08006b71 	.word	0x08006b71
 80068bc:	08006b71 	.word	0x08006b71
 80068c0:	08006b11 	.word	0x08006b11
 80068c4:	08006b3d 	.word	0x08006b3d
 80068c8:	08006b71 	.word	0x08006b71
 80068cc:	08006b71 	.word	0x08006b71
 80068d0:	08006b71 	.word	0x08006b71
 80068d4:	08006b71 	.word	0x08006b71
 80068d8:	08006b71 	.word	0x08006b71
 80068dc:	08006b71 	.word	0x08006b71
 80068e0:	08006b71 	.word	0x08006b71
 80068e4:	080068e9 	.word	0x080068e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800690a:	e139      	b.n	8006b80 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb18 	bl	8006f44 <USBD_CtlError>
      err++;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	3301      	adds	r3, #1
 8006918:	72fb      	strb	r3, [r7, #11]
    break;
 800691a:	e131      	b.n	8006b80 <USBD_GetDescriptor+0x300>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7c12      	ldrb	r2, [r2, #16]
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
    break;
 8006932:	e125      	b.n	8006b80 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7c1b      	ldrb	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10d      	bne.n	8006958 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f107 0208 	add.w	r2, r7, #8
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	2202      	movs	r2, #2
 8006954:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006956:	e113      	b.n	8006b80 <USBD_GetDescriptor+0x300>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	f107 0208 	add.w	r2, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
    break;
 8006972:	e105      	b.n	8006b80 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	885b      	ldrh	r3, [r3, #2]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b05      	cmp	r3, #5
 800697c:	f200 80ac 	bhi.w	8006ad8 <USBD_GetDescriptor+0x258>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <USBD_GetDescriptor+0x108>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069a1 	.word	0x080069a1
 800698c:	080069d5 	.word	0x080069d5
 8006990:	08006a09 	.word	0x08006a09
 8006994:	08006a3d 	.word	0x08006a3d
 8006998:	08006a71 	.word	0x08006a71
 800699c:	08006aa5 	.word	0x08006aa5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069c2:	e0a4      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fabc 	bl	8006f44 <USBD_CtlError>
        err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
      break;
 80069d2:	e09c      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069f6:	e08a      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 faa2 	bl	8006f44 <USBD_CtlError>
        err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
      break;
 8006a06:	e082      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a2a:	e070      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa88 	bl	8006f44 <USBD_CtlError>
        err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
      break;
 8006a3a:	e068      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a5e:	e056      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa6e 	bl	8006f44 <USBD_CtlError>
        err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a6e:	e04e      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	7c12      	ldrb	r2, [r2, #16]
 8006a88:	f107 0108 	add.w	r1, r7, #8
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
 8006a90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a92:	e03c      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa54 	bl	8006f44 <USBD_CtlError>
        err++;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa2:	e034      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	7c12      	ldrb	r2, [r2, #16]
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac6:	e022      	b.n	8006b0e <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa3a 	bl	8006f44 <USBD_CtlError>
        err++;
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad6:	e01a      	b.n	8006b0e <USBD_GetDescriptor+0x28e>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <USBD_GetDescriptor+0x27e>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	8852      	ldrh	r2, [r2, #2]
 8006af0:	b2d1      	uxtb	r1, r2
 8006af2:	f107 0208 	add.w	r2, r7, #8
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 8006afc:	e006      	b.n	8006b0c <USBD_GetDescriptor+0x28c>
        USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa1f 	bl	8006f44 <USBD_CtlError>
        err++;
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b0c:	bf00      	nop
    }
    break;
 8006b0e:	e037      	b.n	8006b80 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USBD_GetDescriptor+0x2ac>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	f107 0208 	add.w	r2, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b2a:	e029      	b.n	8006b80 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa08 	bl	8006f44 <USBD_CtlError>
      err++;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	3301      	adds	r3, #1
 8006b38:	72fb      	strb	r3, [r7, #11]
    break;
 8006b3a:	e021      	b.n	8006b80 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7c1b      	ldrb	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10d      	bne.n	8006b60 <USBD_GetDescriptor+0x2e0>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	f107 0208 	add.w	r2, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	2207      	movs	r2, #7
 8006b5c:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b5e:	e00f      	b.n	8006b80 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9ee 	bl	8006f44 <USBD_CtlError>
      err++;
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	72fb      	strb	r3, [r7, #11]
    break;
 8006b6e:	e007      	b.n	8006b80 <USBD_GetDescriptor+0x300>

  default:
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9e6 	bl	8006f44 <USBD_CtlError>
    err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
    break;
 8006b7e:	bf00      	nop
  }

  if (err != 0U)
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11e      	bne.n	8006bc4 <USBD_GetDescriptor+0x344>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	88db      	ldrh	r3, [r3, #6]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d016      	beq.n	8006bbc <USBD_GetDescriptor+0x33c>
    {
      if (len != 0U)
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <USBD_GetDescriptor+0x332>
      {
        len = MIN(len, req->wLength);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	88da      	ldrh	r2, [r3, #6]
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	bf28      	it	cs
 8006b9e:	4613      	movcs	r3, r2
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ba4:	893b      	ldrh	r3, [r7, #8]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa3b 	bl	8007026 <USBD_CtlSendData>
 8006bb0:	e009      	b.n	8006bc6 <USBD_GetDescriptor+0x346>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9c5 	bl	8006f44 <USBD_CtlError>
 8006bba:	e004      	b.n	8006bc6 <USBD_GetDescriptor+0x346>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa8c 	bl	80070da <USBD_CtlSendStatus>
 8006bc2:	e000      	b.n	8006bc6 <USBD_GetDescriptor+0x346>
    return;
 8006bc4:	bf00      	nop
    }
  }
}
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	889b      	ldrh	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d130      	bne.n	8006c40 <USBD_SetAddress+0x74>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d12c      	bne.n	8006c40 <USBD_SetAddress+0x74>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d828      	bhi.n	8006c40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	885b      	ldrh	r3, [r3, #2]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d104      	bne.n	8006c0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f99c 	bl	8006f44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	e01c      	b.n	8006c48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	7bfa      	ldrb	r2, [r7, #15]
 8006c12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fe7c 	bl	8007918 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fa5a 	bl	80070da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c34:	e008      	b.n	8006c48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3e:	e003      	b.n	8006c48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f97e 	bl	8006f44 <USBD_CtlError>
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	885b      	ldrh	r3, [r3, #2]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	4b4b      	ldr	r3, [pc, #300]	; (8006d94 <USBD_SetConfig+0x144>)
 8006c66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c68:	4b4a      	ldr	r3, [pc, #296]	; (8006d94 <USBD_SetConfig+0x144>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d905      	bls.n	8006c7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f966 	bl	8006f44 <USBD_CtlError>
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e087      	b.n	8006d8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d002      	beq.n	8006c8c <USBD_SetConfig+0x3c>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d025      	beq.n	8006cd6 <USBD_SetConfig+0x86>
 8006c8a:	e071      	b.n	8006d70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006c8c:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <USBD_SetConfig+0x144>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01c      	beq.n	8006cce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006c94:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <USBD_SetConfig+0x144>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <USBD_SetConfig+0x144>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff f96b 	bl	8005f80 <USBD_SetClassConfig>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f944 	bl	8006f44 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cbc:	e065      	b.n	8006d8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa0b 	bl	80070da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ccc:	e05d      	b.n	8006d8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa03 	bl	80070da <USBD_CtlSendStatus>
    break;
 8006cd4:	e059      	b.n	8006d8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <USBD_SetConfig+0x144>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d112      	bne.n	8006d04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <USBD_SetConfig+0x144>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <USBD_SetConfig+0x144>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff f95e 	bl	8005fb8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f9ec 	bl	80070da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d02:	e042      	b.n	8006d8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <USBD_SetConfig+0x144>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d02a      	beq.n	8006d68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff f94c 	bl	8005fb8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <USBD_SetConfig+0x144>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d2a:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <USBD_SetConfig+0x144>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff f925 	bl	8005f80 <USBD_SetClassConfig>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8fe 	bl	8006f44 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff f931 	bl	8005fb8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d5e:	e014      	b.n	8006d8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9ba 	bl	80070da <USBD_CtlSendStatus>
    break;
 8006d66:	e010      	b.n	8006d8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9b6 	bl	80070da <USBD_CtlSendStatus>
    break;
 8006d6e:	e00c      	b.n	8006d8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8e6 	bl	8006f44 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <USBD_SetConfig+0x144>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff f91a 	bl	8005fb8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	73fb      	strb	r3, [r7, #15]
    break;
 8006d88:	bf00      	nop
  }

  return ret;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	2000026f 	.word	0x2000026f

08006d98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d004      	beq.n	8006db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f8c9 	bl	8006f44 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006db2:	e021      	b.n	8006df8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	db17      	blt.n	8006dee <USBD_GetConfig+0x56>
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dd02      	ble.n	8006dc8 <USBD_GetConfig+0x30>
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d00b      	beq.n	8006dde <USBD_GetConfig+0x46>
 8006dc6:	e012      	b.n	8006dee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f925 	bl	8007026 <USBD_CtlSendData>
      break;
 8006ddc:	e00c      	b.n	8006df8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2201      	movs	r2, #1
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f91d 	bl	8007026 <USBD_CtlSendData>
      break;
 8006dec:	e004      	b.n	8006df8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f8a7 	bl	8006f44 <USBD_CtlError>
      break;
 8006df6:	bf00      	nop
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e10:	3b01      	subs	r3, #1
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d81e      	bhi.n	8006e54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d004      	beq.n	8006e28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f88f 	bl	8006f44 <USBD_CtlError>
      break;
 8006e26:	e01a      	b.n	8006e5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f043 0202 	orr.w	r2, r3, #2
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	330c      	adds	r3, #12
 8006e48:	2202      	movs	r2, #2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8ea 	bl	8007026 <USBD_CtlSendData>
    break;
 8006e52:	e004      	b.n	8006e5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f874 	bl	8006f44 <USBD_CtlError>
    break;
 8006e5c:	bf00      	nop
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	885b      	ldrh	r3, [r3, #2]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d106      	bne.n	8006e86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f92a 	bl	80070da <USBD_CtlSendStatus>
  }
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d80b      	bhi.n	8006ebc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10c      	bne.n	8006ec6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f910 	bl	80070da <USBD_CtlSendStatus>
      }
      break;
 8006eba:	e004      	b.n	8006ec6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f840 	bl	8006f44 <USBD_CtlError>
      break;
 8006ec4:	e000      	b.n	8006ec8 <USBD_ClrFeature+0x3a>
      break;
 8006ec6:	bf00      	nop
  }
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff fa97 	bl	800642e <SWAPBYTE>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff fa8a 	bl	800642e <SWAPBYTE>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff fa7d 	bl	800642e <SWAPBYTE>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	80da      	strh	r2, [r3, #6]
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc77 	bl	8007844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f56:	2100      	movs	r1, #0
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fc73 	bl	8007844 <USBD_LL_StallEP>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d036      	beq.n	8006fea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f80:	6938      	ldr	r0, [r7, #16]
 8006f82:	f000 f836 	bl	8006ff2 <USBD_GetLen>
 8006f86:	4603      	mov	r3, r0
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4413      	add	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4413      	add	r3, r2
 8006fac:	2203      	movs	r2, #3
 8006fae:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fb6:	e013      	b.n	8006fe0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	613b      	str	r3, [r7, #16]
    idx++;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e7      	bne.n	8006fb8 <USBD_GetString+0x52>
 8006fe8:	e000      	b.n	8006fec <USBD_GetString+0x86>
    return;
 8006fea:	bf00      	nop
  }
}
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007002:	e005      	b.n	8007010 <USBD_GetLen+0x1e>
  {
    len++;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	3301      	adds	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	3301      	adds	r3, #1
 800700e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f5      	bne.n	8007004 <USBD_GetLen+0x12>
  }

  return len;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2202      	movs	r2, #2
 8007036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	2100      	movs	r1, #0
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fc82 	bl	8007956 <USBD_LL_Transmit>

  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fc71 	bl	8007956 <USBD_LL_Transmit>

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2203      	movs	r2, #3
 800708e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fc75 	bl	8007998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	2100      	movs	r1, #0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fc64 	bl	8007998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2204      	movs	r2, #4
 80070e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070ea:	2300      	movs	r3, #0
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fc30 	bl	8007956 <USBD_LL_Transmit>

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2205      	movs	r2, #5
 800710c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fc3e 	bl	8007998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800712c:	2200      	movs	r2, #0
 800712e:	4912      	ldr	r1, [pc, #72]	; (8007178 <MX_USB_DEVICE_Init+0x50>)
 8007130:	4812      	ldr	r0, [pc, #72]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007132:	f7fe fe91 	bl	8005e58 <USBD_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800713c:	f7f9 fbf2 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8007140:	490f      	ldr	r1, [pc, #60]	; (8007180 <MX_USB_DEVICE_Init+0x58>)
 8007142:	480e      	ldr	r0, [pc, #56]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007144:	f7fe febe 	bl	8005ec4 <USBD_RegisterClass>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800714e:	f7f9 fbe9 	bl	8000924 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007152:	490c      	ldr	r1, [pc, #48]	; (8007184 <MX_USB_DEVICE_Init+0x5c>)
 8007154:	4809      	ldr	r0, [pc, #36]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007156:	f7fe fb19 	bl	800578c <USBD_DFU_RegisterMedia>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007160:	f7f9 fbe0 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007166:	f7fe fece 	bl	8005f06 <USBD_Start>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007170:	f7f9 fbd8 	bl	8000924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007174:	bf00      	nop
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000070 	.word	0x20000070
 800717c:	200002bc 	.word	0x200002bc
 8007180:	2000000c 	.word	0x2000000c
 8007184:	200000d0 	.word	0x200000d0

08007188 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2212      	movs	r2, #18
 8007198:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20000090 	.word	0x20000090

080071ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2204      	movs	r2, #4
 80071bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	200000b0 	.word	0x200000b0

080071d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <USBD_FS_ProductStrDescriptor+0x34>)
 80071e6:	4808      	ldr	r0, [pc, #32]	; (8007208 <USBD_FS_ProductStrDescriptor+0x38>)
 80071e8:	f7ff febd 	bl	8006f66 <USBD_GetString>
 80071ec:	e004      	b.n	80071f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <USBD_FS_ProductStrDescriptor+0x34>)
 80071f2:	4805      	ldr	r0, [pc, #20]	; (8007208 <USBD_FS_ProductStrDescriptor+0x38>)
 80071f4:	f7ff feb7 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000058c 	.word	0x2000058c
 8007208:	08008a98 	.word	0x08008a98

0800720c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	4904      	ldr	r1, [pc, #16]	; (800722c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800721c:	4804      	ldr	r0, [pc, #16]	; (8007230 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800721e:	f7ff fea2 	bl	8006f66 <USBD_GetString>
  return USBD_StrDesc;
 8007222:	4b02      	ldr	r3, [pc, #8]	; (800722c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2000058c 	.word	0x2000058c
 8007230:	08008ab8 	.word	0x08008ab8

08007234 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	221a      	movs	r2, #26
 8007244:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007246:	f000 f855 	bl	80072f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800724a:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	200000b4 	.word	0x200000b4

08007258 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d105      	bne.n	8007276 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4907      	ldr	r1, [pc, #28]	; (800728c <USBD_FS_ConfigStrDescriptor+0x34>)
 800726e:	4808      	ldr	r0, [pc, #32]	; (8007290 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007270:	f7ff fe79 	bl	8006f66 <USBD_GetString>
 8007274:	e004      	b.n	8007280 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	4904      	ldr	r1, [pc, #16]	; (800728c <USBD_FS_ConfigStrDescriptor+0x34>)
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800727c:	f7ff fe73 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007280:	4b02      	ldr	r3, [pc, #8]	; (800728c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	2000058c 	.word	0x2000058c
 8007290:	08008acc 	.word	0x08008acc

08007294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	6039      	str	r1, [r7, #0]
 800729e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	4907      	ldr	r1, [pc, #28]	; (80072c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072aa:	4808      	ldr	r0, [pc, #32]	; (80072cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072ac:	f7ff fe5b 	bl	8006f66 <USBD_GetString>
 80072b0:	e004      	b.n	80072bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4904      	ldr	r1, [pc, #16]	; (80072c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072b6:	4805      	ldr	r0, [pc, #20]	; (80072cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072b8:	f7ff fe55 	bl	8006f66 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2000058c 	.word	0x2000058c
 80072cc:	08008ad8 	.word	0x08008ad8

080072d0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	220c      	movs	r2, #12
 80072e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80072e2:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	200000a4 	.word	0x200000a4

080072f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <Get_SerialNum+0x44>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <Get_SerialNum+0x48>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007306:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <Get_SerialNum+0x4c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800731a:	2208      	movs	r2, #8
 800731c:	4909      	ldr	r1, [pc, #36]	; (8007344 <Get_SerialNum+0x50>)
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f814 	bl	800734c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007324:	2204      	movs	r2, #4
 8007326:	4908      	ldr	r1, [pc, #32]	; (8007348 <Get_SerialNum+0x54>)
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 f80f 	bl	800734c <IntToUnicode>
  }
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	1fff7a10 	.word	0x1fff7a10
 800733c:	1fff7a14 	.word	0x1fff7a14
 8007340:	1fff7a18 	.word	0x1fff7a18
 8007344:	200000b6 	.word	0x200000b6
 8007348:	200000c6 	.word	0x200000c6

0800734c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	e027      	b.n	80073b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	0f1b      	lsrs	r3, r3, #28
 8007368:	2b09      	cmp	r3, #9
 800736a:	d80b      	bhi.n	8007384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0f1b      	lsrs	r3, r3, #28
 8007370:	b2da      	uxtb	r2, r3
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4619      	mov	r1, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	440b      	add	r3, r1
 800737c:	3230      	adds	r2, #48	; 0x30
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e00a      	b.n	800739a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	0f1b      	lsrs	r3, r3, #28
 8007388:	b2da      	uxtb	r2, r3
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4619      	mov	r1, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	440b      	add	r3, r1
 8007394:	3237      	adds	r2, #55	; 0x37
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	3301      	adds	r3, #1
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	3301      	adds	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
 80073b4:	7dfa      	ldrb	r2, [r7, #23]
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d3d3      	bcc.n	8007364 <IntToUnicode+0x18>
  }
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80073cc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80073dc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80073de:	4618      	mov	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80073f0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800740a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8007424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	460b      	mov	r3, r1
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d000      	beq.n	8007448 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8007446:	e000      	b.n	800744a <MEM_If_GetStatus_FS+0x18>
    break;
 8007448:	bf00      	nop
  }
  return (USBD_OK);
 800744a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007478:	d147      	bne.n	800750a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	4b25      	ldr	r3, [pc, #148]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	4a24      	ldr	r2, [pc, #144]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b22      	ldr	r3, [pc, #136]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007496:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800749a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749c:	2302      	movs	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a4:	2303      	movs	r3, #3
 80074a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074a8:	230a      	movs	r3, #10
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4619      	mov	r1, r3
 80074b2:	4819      	ldr	r0, [pc, #100]	; (8007518 <HAL_PCD_MspInit+0xc0>)
 80074b4:	f7f9 fd92 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80074b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074be:	2300      	movs	r3, #0
 80074c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80074c6:	f107 0314 	add.w	r3, r7, #20
 80074ca:	4619      	mov	r1, r3
 80074cc:	4812      	ldr	r0, [pc, #72]	; (8007518 <HAL_PCD_MspInit+0xc0>)
 80074ce:	f7f9 fd85 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074d2:	4b10      	ldr	r3, [pc, #64]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	4a0f      	ldr	r2, [pc, #60]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 80074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074dc:	6353      	str	r3, [r2, #52]	; 0x34
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	4a0b      	ldr	r2, [pc, #44]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 80074e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ec:	6453      	str	r3, [r2, #68]	; 0x44
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_PCD_MspInit+0xbc>)
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074fa:	2200      	movs	r2, #0
 80074fc:	2100      	movs	r1, #0
 80074fe:	2043      	movs	r0, #67	; 0x43
 8007500:	f7f9 fd35 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007504:	2043      	movs	r0, #67	; 0x43
 8007506:	f7f9 fd4e 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800750a:	bf00      	nop
 800750c:	3728      	adds	r7, #40	; 0x28
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800
 8007518:	40020000 	.word	0x40020000

0800751c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007530:	4619      	mov	r1, r3
 8007532:	4610      	mov	r0, r2
 8007534:	f7fe fd58 	bl	8005fe8 <USBD_LL_SetupStage>
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	4619      	mov	r1, r3
 800756a:	f7fe fd90 	bl	800608e <USBD_LL_DataOutStage>
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	3348      	adds	r3, #72	; 0x48
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	4619      	mov	r1, r3
 800759e:	f7fe fdd9 	bl	8006154 <USBD_LL_DataInStage>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fedd 	bl	8006378 <USBD_LL_SOF>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d001      	beq.n	80075de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075da:	f7f9 f9a3 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075e4:	7bfa      	ldrb	r2, [r7, #15]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fe8a 	bl	8006302 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fe43 	bl	8006280 <USBD_LL_Reset>
}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fe85 	bl	8006322 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <HAL_PCD_SuspendCallback+0x48>)
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	4a03      	ldr	r2, [pc, #12]	; (800764c <HAL_PCD_SuspendCallback+0x48>)
 800763e:	f043 0306 	orr.w	r3, r3, #6
 8007642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	e000ed00 	.word	0xe000ed00

08007650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fe74 	bl	800634c <USBD_LL_Resume>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fe9f 	bl	80063c6 <USBD_LL_IsoOUTIncomplete>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fe80 	bl	80063ac <USBD_LL_IsoINIncomplete>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fe8c 	bl	80063e0 <USBD_LL_DevConnected>
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fe89 	bl	80063f6 <USBD_LL_DevDisconnected>
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d13f      	bne.n	800777c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076fc:	4a22      	ldr	r2, [pc, #136]	; (8007788 <USBD_LL_Init+0x9c>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a20      	ldr	r2, [pc, #128]	; (8007788 <USBD_LL_Init+0x9c>)
 8007708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800770c:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <USBD_LL_Init+0x9c>)
 800770e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007714:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <USBD_LL_Init+0x9c>)
 8007716:	2206      	movs	r2, #6
 8007718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <USBD_LL_Init+0x9c>)
 800771c:	2202      	movs	r2, #2
 800771e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007720:	4b19      	ldr	r3, [pc, #100]	; (8007788 <USBD_LL_Init+0x9c>)
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007726:	4b18      	ldr	r3, [pc, #96]	; (8007788 <USBD_LL_Init+0x9c>)
 8007728:	2202      	movs	r2, #2
 800772a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800772c:	4b16      	ldr	r3, [pc, #88]	; (8007788 <USBD_LL_Init+0x9c>)
 800772e:	2201      	movs	r2, #1
 8007730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <USBD_LL_Init+0x9c>)
 8007734:	2200      	movs	r2, #0
 8007736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <USBD_LL_Init+0x9c>)
 800773a:	2200      	movs	r2, #0
 800773c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <USBD_LL_Init+0x9c>)
 8007740:	2201      	movs	r2, #1
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007744:	4b10      	ldr	r3, [pc, #64]	; (8007788 <USBD_LL_Init+0x9c>)
 8007746:	2201      	movs	r2, #1
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <USBD_LL_Init+0x9c>)
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007750:	480d      	ldr	r0, [pc, #52]	; (8007788 <USBD_LL_Init+0x9c>)
 8007752:	f7f9 fdee 	bl	8001332 <HAL_PCD_Init>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800775c:	f7f9 f8e2 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	4809      	ldr	r0, [pc, #36]	; (8007788 <USBD_LL_Init+0x9c>)
 8007764:	f7fa ff57 	bl	8002616 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	2100      	movs	r1, #0
 800776c:	4806      	ldr	r0, [pc, #24]	; (8007788 <USBD_LL_Init+0x9c>)
 800776e:	f7fa ff0b 	bl	8002588 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	2101      	movs	r1, #1
 8007776:	4804      	ldr	r0, [pc, #16]	; (8007788 <USBD_LL_Init+0x9c>)
 8007778:	f7fa ff06 	bl	8002588 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	2000078c 	.word	0x2000078c

0800778c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7f9 fee9 	bl	800157a <HAL_PCD_Start>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 f962 	bl	8007a78 <USBD_Get_USB_Status>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7f9 ff01 	bl	80015e0 <HAL_PCD_Stop>
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 f947 	bl	8007a78 <USBD_Get_USB_Status>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	70fb      	strb	r3, [r7, #3]
 800780a:	460b      	mov	r3, r1
 800780c:	70bb      	strb	r3, [r7, #2]
 800780e:	4613      	mov	r3, r2
 8007810:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007820:	78bb      	ldrb	r3, [r7, #2]
 8007822:	883a      	ldrh	r2, [r7, #0]
 8007824:	78f9      	ldrb	r1, [r7, #3]
 8007826:	f7fa fb18 	bl	8001e5a <HAL_PCD_EP_Open>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 f921 	bl	8007a78 <USBD_Get_USB_Status>
 8007836:	4603      	mov	r3, r0
 8007838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800783a:	7bbb      	ldrb	r3, [r7, #14]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7fa fbf6 	bl	8002054 <HAL_PCD_EP_SetStall>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f902 	bl	8007a78 <USBD_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fa fc3b 	bl	800211c <HAL_PCD_EP_ClrStall>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f8e3 	bl	8007a78 <USBD_Get_USB_Status>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da0b      	bge.n	80078f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	333e      	adds	r3, #62	; 0x3e
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	e00b      	b.n	800790c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078fa:	68f9      	ldr	r1, [r7, #12]
 80078fc:	4613      	mov	r3, r2
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800790a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f7fa fa6a 	bl	8001e10 <HAL_PCD_SetAddress>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f898 	bl	8007a78 <USBD_Get_USB_Status>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800794c:	7bbb      	ldrb	r3, [r7, #14]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	460b      	mov	r3, r1
 8007964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007974:	7af9      	ldrb	r1, [r7, #11]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	f7fa fb21 	bl	8001fc0 <HAL_PCD_EP_Transmit>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f877 	bl	8007a78 <USBD_Get_USB_Status>
 800798a:	4603      	mov	r3, r0
 800798c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800798e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	460b      	mov	r3, r1
 80079a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079b6:	7af9      	ldrb	r1, [r7, #11]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	f7fa fab5 	bl	8001f2a <HAL_PCD_EP_Receive>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f856 	bl	8007a78 <USBD_Get_USB_Status>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_PCDEx_LPM_Callback+0x18>
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d01f      	beq.n	8007a32 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80079f2:	e03b      	b.n	8007a6c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80079fc:	f7f8 ff0e 	bl	800081c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a06:	f023 0306 	bic.w	r3, r3, #6
 8007a0a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fc8e 	bl	800634c <USBD_LL_Resume>
    break;
 8007a30:	e01c      	b.n	8007a6c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fc66 	bl	8006322 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	4a04      	ldr	r2, [pc, #16]	; (8007a74 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a64:	f043 0306 	orr.w	r3, r3, #6
 8007a68:	6113      	str	r3, [r2, #16]
    break;
 8007a6a:	bf00      	nop
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	e000ed00 	.word	0xe000ed00

08007a78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d817      	bhi.n	8007abc <USBD_Get_USB_Status+0x44>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <USBD_Get_USB_Status+0x1c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aab 	.word	0x08007aab
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ab7 	.word	0x08007ab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa8:	e00b      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	73fb      	strb	r3, [r7, #15]
    break;
 8007aae:	e008      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab4:	e005      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aba:	e002      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac0:	bf00      	nop
  }
  return usb_status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <__errno>:
 8007ad0:	4b01      	ldr	r3, [pc, #4]	; (8007ad8 <__errno+0x8>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	200000ec 	.word	0x200000ec

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4e0d      	ldr	r6, [pc, #52]	; (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1ba4      	subs	r4, r4, r6
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	42a5      	cmp	r5, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4e0b      	ldr	r6, [pc, #44]	; (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	; (8007b20 <__libc_init_array+0x44>)
 8007af0:	f000 ff78 	bl	80089e4 <_init>
 8007af4:	1ba4      	subs	r4, r4, r6
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2500      	movs	r5, #0
 8007afa:	42a5      	cmp	r5, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b04:	4798      	blx	r3
 8007b06:	3501      	adds	r5, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b0e:	4798      	blx	r3
 8007b10:	3501      	adds	r5, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	08008bdc 	.word	0x08008bdc
 8007b18:	08008bdc 	.word	0x08008bdc
 8007b1c:	08008bdc 	.word	0x08008bdc
 8007b20:	08008be0 	.word	0x08008be0

08007b24 <malloc>:
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <malloc+0xc>)
 8007b26:	4601      	mov	r1, r0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f000 b861 	b.w	8007bf0 <_malloc_r>
 8007b2e:	bf00      	nop
 8007b30:	200000ec 	.word	0x200000ec

08007b34 <free>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <free+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f000 b80b 	b.w	8007b54 <_free_r>
 8007b3e:	bf00      	nop
 8007b40:	200000ec 	.word	0x200000ec

08007b44 <memset>:
 8007b44:	4402      	add	r2, r0
 8007b46:	4603      	mov	r3, r0
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d100      	bne.n	8007b4e <memset+0xa>
 8007b4c:	4770      	bx	lr
 8007b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b52:	e7f9      	b.n	8007b48 <memset+0x4>

08007b54 <_free_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4605      	mov	r5, r0
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d045      	beq.n	8007be8 <_free_r+0x94>
 8007b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b60:	1f0c      	subs	r4, r1, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfb8      	it	lt
 8007b66:	18e4      	addlt	r4, r4, r3
 8007b68:	f000 fbc6 	bl	80082f8 <__malloc_lock>
 8007b6c:	4a1f      	ldr	r2, [pc, #124]	; (8007bec <_free_r+0x98>)
 8007b6e:	6813      	ldr	r3, [r2, #0]
 8007b70:	4610      	mov	r0, r2
 8007b72:	b933      	cbnz	r3, 8007b82 <_free_r+0x2e>
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6014      	str	r4, [r2, #0]
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f000 bbbc 	b.w	80082fa <__malloc_unlock>
 8007b82:	42a3      	cmp	r3, r4
 8007b84:	d90c      	bls.n	8007ba0 <_free_r+0x4c>
 8007b86:	6821      	ldr	r1, [r4, #0]
 8007b88:	1862      	adds	r2, r4, r1
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	bf04      	itt	eq
 8007b8e:	681a      	ldreq	r2, [r3, #0]
 8007b90:	685b      	ldreq	r3, [r3, #4]
 8007b92:	6063      	str	r3, [r4, #4]
 8007b94:	bf04      	itt	eq
 8007b96:	1852      	addeq	r2, r2, r1
 8007b98:	6022      	streq	r2, [r4, #0]
 8007b9a:	6004      	str	r4, [r0, #0]
 8007b9c:	e7ec      	b.n	8007b78 <_free_r+0x24>
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	b10a      	cbz	r2, 8007ba8 <_free_r+0x54>
 8007ba4:	42a2      	cmp	r2, r4
 8007ba6:	d9fa      	bls.n	8007b9e <_free_r+0x4a>
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	1858      	adds	r0, r3, r1
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d10b      	bne.n	8007bc8 <_free_r+0x74>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	4401      	add	r1, r0
 8007bb4:	1858      	adds	r0, r3, r1
 8007bb6:	4282      	cmp	r2, r0
 8007bb8:	6019      	str	r1, [r3, #0]
 8007bba:	d1dd      	bne.n	8007b78 <_free_r+0x24>
 8007bbc:	6810      	ldr	r0, [r2, #0]
 8007bbe:	6852      	ldr	r2, [r2, #4]
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	4401      	add	r1, r0
 8007bc4:	6019      	str	r1, [r3, #0]
 8007bc6:	e7d7      	b.n	8007b78 <_free_r+0x24>
 8007bc8:	d902      	bls.n	8007bd0 <_free_r+0x7c>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	e7d3      	b.n	8007b78 <_free_r+0x24>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	1821      	adds	r1, r4, r0
 8007bd4:	428a      	cmp	r2, r1
 8007bd6:	bf04      	itt	eq
 8007bd8:	6811      	ldreq	r1, [r2, #0]
 8007bda:	6852      	ldreq	r2, [r2, #4]
 8007bdc:	6062      	str	r2, [r4, #4]
 8007bde:	bf04      	itt	eq
 8007be0:	1809      	addeq	r1, r1, r0
 8007be2:	6021      	streq	r1, [r4, #0]
 8007be4:	605c      	str	r4, [r3, #4]
 8007be6:	e7c7      	b.n	8007b78 <_free_r+0x24>
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	bf00      	nop
 8007bec:	20000270 	.word	0x20000270

08007bf0 <_malloc_r>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	1ccd      	adds	r5, r1, #3
 8007bf4:	f025 0503 	bic.w	r5, r5, #3
 8007bf8:	3508      	adds	r5, #8
 8007bfa:	2d0c      	cmp	r5, #12
 8007bfc:	bf38      	it	cc
 8007bfe:	250c      	movcc	r5, #12
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	4606      	mov	r6, r0
 8007c04:	db01      	blt.n	8007c0a <_malloc_r+0x1a>
 8007c06:	42a9      	cmp	r1, r5
 8007c08:	d903      	bls.n	8007c12 <_malloc_r+0x22>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	6033      	str	r3, [r6, #0]
 8007c0e:	2000      	movs	r0, #0
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	f000 fb71 	bl	80082f8 <__malloc_lock>
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <_malloc_r+0xac>)
 8007c18:	6814      	ldr	r4, [r2, #0]
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	b991      	cbnz	r1, 8007c44 <_malloc_r+0x54>
 8007c1e:	4c20      	ldr	r4, [pc, #128]	; (8007ca0 <_malloc_r+0xb0>)
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	b91b      	cbnz	r3, 8007c2c <_malloc_r+0x3c>
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f8b9 	bl	8007d9c <_sbrk_r>
 8007c2a:	6020      	str	r0, [r4, #0]
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 f8b4 	bl	8007d9c <_sbrk_r>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d124      	bne.n	8007c82 <_malloc_r+0x92>
 8007c38:	230c      	movs	r3, #12
 8007c3a:	6033      	str	r3, [r6, #0]
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f000 fb5c 	bl	80082fa <__malloc_unlock>
 8007c42:	e7e4      	b.n	8007c0e <_malloc_r+0x1e>
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	1b5b      	subs	r3, r3, r5
 8007c48:	d418      	bmi.n	8007c7c <_malloc_r+0x8c>
 8007c4a:	2b0b      	cmp	r3, #11
 8007c4c:	d90f      	bls.n	8007c6e <_malloc_r+0x7e>
 8007c4e:	600b      	str	r3, [r1, #0]
 8007c50:	50cd      	str	r5, [r1, r3]
 8007c52:	18cc      	adds	r4, r1, r3
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 fb50 	bl	80082fa <__malloc_unlock>
 8007c5a:	f104 000b 	add.w	r0, r4, #11
 8007c5e:	1d23      	adds	r3, r4, #4
 8007c60:	f020 0007 	bic.w	r0, r0, #7
 8007c64:	1ac3      	subs	r3, r0, r3
 8007c66:	d0d3      	beq.n	8007c10 <_malloc_r+0x20>
 8007c68:	425a      	negs	r2, r3
 8007c6a:	50e2      	str	r2, [r4, r3]
 8007c6c:	e7d0      	b.n	8007c10 <_malloc_r+0x20>
 8007c6e:	428c      	cmp	r4, r1
 8007c70:	684b      	ldr	r3, [r1, #4]
 8007c72:	bf16      	itet	ne
 8007c74:	6063      	strne	r3, [r4, #4]
 8007c76:	6013      	streq	r3, [r2, #0]
 8007c78:	460c      	movne	r4, r1
 8007c7a:	e7eb      	b.n	8007c54 <_malloc_r+0x64>
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6849      	ldr	r1, [r1, #4]
 8007c80:	e7cc      	b.n	8007c1c <_malloc_r+0x2c>
 8007c82:	1cc4      	adds	r4, r0, #3
 8007c84:	f024 0403 	bic.w	r4, r4, #3
 8007c88:	42a0      	cmp	r0, r4
 8007c8a:	d005      	beq.n	8007c98 <_malloc_r+0xa8>
 8007c8c:	1a21      	subs	r1, r4, r0
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f000 f884 	bl	8007d9c <_sbrk_r>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d0cf      	beq.n	8007c38 <_malloc_r+0x48>
 8007c98:	6025      	str	r5, [r4, #0]
 8007c9a:	e7db      	b.n	8007c54 <_malloc_r+0x64>
 8007c9c:	20000270 	.word	0x20000270
 8007ca0:	20000274 	.word	0x20000274

08007ca4 <iprintf>:
 8007ca4:	b40f      	push	{r0, r1, r2, r3}
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <iprintf+0x2c>)
 8007ca8:	b513      	push	{r0, r1, r4, lr}
 8007caa:	681c      	ldr	r4, [r3, #0]
 8007cac:	b124      	cbz	r4, 8007cb8 <iprintf+0x14>
 8007cae:	69a3      	ldr	r3, [r4, #24]
 8007cb0:	b913      	cbnz	r3, 8007cb8 <iprintf+0x14>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fa32 	bl	800811c <__sinit>
 8007cb8:	ab05      	add	r3, sp, #20
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	68a1      	ldr	r1, [r4, #8]
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fb45 	bl	8008350 <_vfiprintf_r>
 8007cc6:	b002      	add	sp, #8
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	200000ec 	.word	0x200000ec

08007cd4 <_puts_r>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	460e      	mov	r6, r1
 8007cd8:	4605      	mov	r5, r0
 8007cda:	b118      	cbz	r0, 8007ce4 <_puts_r+0x10>
 8007cdc:	6983      	ldr	r3, [r0, #24]
 8007cde:	b90b      	cbnz	r3, 8007ce4 <_puts_r+0x10>
 8007ce0:	f000 fa1c 	bl	800811c <__sinit>
 8007ce4:	69ab      	ldr	r3, [r5, #24]
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	b913      	cbnz	r3, 8007cf0 <_puts_r+0x1c>
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 fa16 	bl	800811c <__sinit>
 8007cf0:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <_puts_r+0xac>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d117      	bne.n	8007d26 <_puts_r+0x52>
 8007cf6:	686c      	ldr	r4, [r5, #4]
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	071b      	lsls	r3, r3, #28
 8007cfc:	d51d      	bpl.n	8007d3a <_puts_r+0x66>
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	b1db      	cbz	r3, 8007d3a <_puts_r+0x66>
 8007d02:	3e01      	subs	r6, #1
 8007d04:	68a3      	ldr	r3, [r4, #8]
 8007d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	b9e9      	cbnz	r1, 8007d4c <_puts_r+0x78>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	da2e      	bge.n	8007d72 <_puts_r+0x9e>
 8007d14:	4622      	mov	r2, r4
 8007d16:	210a      	movs	r1, #10
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f84f 	bl	8007dbc <__swbuf_r>
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d011      	beq.n	8007d46 <_puts_r+0x72>
 8007d22:	200a      	movs	r0, #10
 8007d24:	e011      	b.n	8007d4a <_puts_r+0x76>
 8007d26:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <_puts_r+0xb0>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	d101      	bne.n	8007d30 <_puts_r+0x5c>
 8007d2c:	68ac      	ldr	r4, [r5, #8]
 8007d2e:	e7e3      	b.n	8007cf8 <_puts_r+0x24>
 8007d30:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <_puts_r+0xb4>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	bf08      	it	eq
 8007d36:	68ec      	ldreq	r4, [r5, #12]
 8007d38:	e7de      	b.n	8007cf8 <_puts_r+0x24>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f88f 	bl	8007e60 <__swsetup_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d0dd      	beq.n	8007d02 <_puts_r+0x2e>
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da04      	bge.n	8007d5a <_puts_r+0x86>
 8007d50:	69a2      	ldr	r2, [r4, #24]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	dc06      	bgt.n	8007d64 <_puts_r+0x90>
 8007d56:	290a      	cmp	r1, #10
 8007d58:	d004      	beq.n	8007d64 <_puts_r+0x90>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	6022      	str	r2, [r4, #0]
 8007d60:	7019      	strb	r1, [r3, #0]
 8007d62:	e7cf      	b.n	8007d04 <_puts_r+0x30>
 8007d64:	4622      	mov	r2, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f828 	bl	8007dbc <__swbuf_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d1c9      	bne.n	8007d04 <_puts_r+0x30>
 8007d70:	e7e9      	b.n	8007d46 <_puts_r+0x72>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	200a      	movs	r0, #10
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	6022      	str	r2, [r4, #0]
 8007d7a:	7018      	strb	r0, [r3, #0]
 8007d7c:	e7e5      	b.n	8007d4a <_puts_r+0x76>
 8007d7e:	bf00      	nop
 8007d80:	08008b60 	.word	0x08008b60
 8007d84:	08008b80 	.word	0x08008b80
 8007d88:	08008b40 	.word	0x08008b40

08007d8c <puts>:
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <puts+0xc>)
 8007d8e:	4601      	mov	r1, r0
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f7ff bf9f 	b.w	8007cd4 <_puts_r>
 8007d96:	bf00      	nop
 8007d98:	200000ec 	.word	0x200000ec

08007d9c <_sbrk_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4c06      	ldr	r4, [pc, #24]	; (8007db8 <_sbrk_r+0x1c>)
 8007da0:	2300      	movs	r3, #0
 8007da2:	4605      	mov	r5, r0
 8007da4:	4608      	mov	r0, r1
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	f7f8 fe8a 	bl	8000ac0 <_sbrk>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_sbrk_r+0x1a>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_sbrk_r+0x1a>
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	20000b94 	.word	0x20000b94

08007dbc <__swbuf_r>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	460e      	mov	r6, r1
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b118      	cbz	r0, 8007dce <__swbuf_r+0x12>
 8007dc6:	6983      	ldr	r3, [r0, #24]
 8007dc8:	b90b      	cbnz	r3, 8007dce <__swbuf_r+0x12>
 8007dca:	f000 f9a7 	bl	800811c <__sinit>
 8007dce:	4b21      	ldr	r3, [pc, #132]	; (8007e54 <__swbuf_r+0x98>)
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	d12a      	bne.n	8007e2a <__swbuf_r+0x6e>
 8007dd4:	686c      	ldr	r4, [r5, #4]
 8007dd6:	69a3      	ldr	r3, [r4, #24]
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	071a      	lsls	r2, r3, #28
 8007dde:	d52e      	bpl.n	8007e3e <__swbuf_r+0x82>
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	b363      	cbz	r3, 8007e3e <__swbuf_r+0x82>
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	6820      	ldr	r0, [r4, #0]
 8007de8:	1ac0      	subs	r0, r0, r3
 8007dea:	6963      	ldr	r3, [r4, #20]
 8007dec:	b2f6      	uxtb	r6, r6
 8007dee:	4283      	cmp	r3, r0
 8007df0:	4637      	mov	r7, r6
 8007df2:	dc04      	bgt.n	8007dfe <__swbuf_r+0x42>
 8007df4:	4621      	mov	r1, r4
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 f926 	bl	8008048 <_fflush_r>
 8007dfc:	bb28      	cbnz	r0, 8007e4a <__swbuf_r+0x8e>
 8007dfe:	68a3      	ldr	r3, [r4, #8]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	60a3      	str	r3, [r4, #8]
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	701e      	strb	r6, [r3, #0]
 8007e0c:	6963      	ldr	r3, [r4, #20]
 8007e0e:	3001      	adds	r0, #1
 8007e10:	4283      	cmp	r3, r0
 8007e12:	d004      	beq.n	8007e1e <__swbuf_r+0x62>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	07db      	lsls	r3, r3, #31
 8007e18:	d519      	bpl.n	8007e4e <__swbuf_r+0x92>
 8007e1a:	2e0a      	cmp	r6, #10
 8007e1c:	d117      	bne.n	8007e4e <__swbuf_r+0x92>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 f911 	bl	8008048 <_fflush_r>
 8007e26:	b190      	cbz	r0, 8007e4e <__swbuf_r+0x92>
 8007e28:	e00f      	b.n	8007e4a <__swbuf_r+0x8e>
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <__swbuf_r+0x9c>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d101      	bne.n	8007e34 <__swbuf_r+0x78>
 8007e30:	68ac      	ldr	r4, [r5, #8]
 8007e32:	e7d0      	b.n	8007dd6 <__swbuf_r+0x1a>
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <__swbuf_r+0xa0>)
 8007e36:	429c      	cmp	r4, r3
 8007e38:	bf08      	it	eq
 8007e3a:	68ec      	ldreq	r4, [r5, #12]
 8007e3c:	e7cb      	b.n	8007dd6 <__swbuf_r+0x1a>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 f80d 	bl	8007e60 <__swsetup_r>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0cc      	beq.n	8007de4 <__swbuf_r+0x28>
 8007e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e4e:	4638      	mov	r0, r7
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	08008b60 	.word	0x08008b60
 8007e58:	08008b80 	.word	0x08008b80
 8007e5c:	08008b40 	.word	0x08008b40

08007e60 <__swsetup_r>:
 8007e60:	4b32      	ldr	r3, [pc, #200]	; (8007f2c <__swsetup_r+0xcc>)
 8007e62:	b570      	push	{r4, r5, r6, lr}
 8007e64:	681d      	ldr	r5, [r3, #0]
 8007e66:	4606      	mov	r6, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	b125      	cbz	r5, 8007e76 <__swsetup_r+0x16>
 8007e6c:	69ab      	ldr	r3, [r5, #24]
 8007e6e:	b913      	cbnz	r3, 8007e76 <__swsetup_r+0x16>
 8007e70:	4628      	mov	r0, r5
 8007e72:	f000 f953 	bl	800811c <__sinit>
 8007e76:	4b2e      	ldr	r3, [pc, #184]	; (8007f30 <__swsetup_r+0xd0>)
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	d10f      	bne.n	8007e9c <__swsetup_r+0x3c>
 8007e7c:	686c      	ldr	r4, [r5, #4]
 8007e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	0715      	lsls	r5, r2, #28
 8007e86:	d42c      	bmi.n	8007ee2 <__swsetup_r+0x82>
 8007e88:	06d0      	lsls	r0, r2, #27
 8007e8a:	d411      	bmi.n	8007eb0 <__swsetup_r+0x50>
 8007e8c:	2209      	movs	r2, #9
 8007e8e:	6032      	str	r2, [r6, #0]
 8007e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9a:	e03e      	b.n	8007f1a <__swsetup_r+0xba>
 8007e9c:	4b25      	ldr	r3, [pc, #148]	; (8007f34 <__swsetup_r+0xd4>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d101      	bne.n	8007ea6 <__swsetup_r+0x46>
 8007ea2:	68ac      	ldr	r4, [r5, #8]
 8007ea4:	e7eb      	b.n	8007e7e <__swsetup_r+0x1e>
 8007ea6:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <__swsetup_r+0xd8>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	bf08      	it	eq
 8007eac:	68ec      	ldreq	r4, [r5, #12]
 8007eae:	e7e6      	b.n	8007e7e <__swsetup_r+0x1e>
 8007eb0:	0751      	lsls	r1, r2, #29
 8007eb2:	d512      	bpl.n	8007eda <__swsetup_r+0x7a>
 8007eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb6:	b141      	cbz	r1, 8007eca <__swsetup_r+0x6a>
 8007eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	d002      	beq.n	8007ec6 <__swsetup_r+0x66>
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f7ff fe47 	bl	8007b54 <_free_r>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f043 0308 	orr.w	r3, r3, #8
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	b94b      	cbnz	r3, 8007efa <__swsetup_r+0x9a>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	d003      	beq.n	8007efa <__swsetup_r+0x9a>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f000 f9bf 	bl	8008278 <__smakebuf_r>
 8007efa:	89a2      	ldrh	r2, [r4, #12]
 8007efc:	f012 0301 	ands.w	r3, r2, #1
 8007f00:	d00c      	beq.n	8007f1c <__swsetup_r+0xbc>
 8007f02:	2300      	movs	r3, #0
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	6963      	ldr	r3, [r4, #20]
 8007f08:	425b      	negs	r3, r3
 8007f0a:	61a3      	str	r3, [r4, #24]
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b953      	cbnz	r3, 8007f26 <__swsetup_r+0xc6>
 8007f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f18:	d1ba      	bne.n	8007e90 <__swsetup_r+0x30>
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	0792      	lsls	r2, r2, #30
 8007f1e:	bf58      	it	pl
 8007f20:	6963      	ldrpl	r3, [r4, #20]
 8007f22:	60a3      	str	r3, [r4, #8]
 8007f24:	e7f2      	b.n	8007f0c <__swsetup_r+0xac>
 8007f26:	2000      	movs	r0, #0
 8007f28:	e7f7      	b.n	8007f1a <__swsetup_r+0xba>
 8007f2a:	bf00      	nop
 8007f2c:	200000ec 	.word	0x200000ec
 8007f30:	08008b60 	.word	0x08008b60
 8007f34:	08008b80 	.word	0x08008b80
 8007f38:	08008b40 	.word	0x08008b40

08007f3c <__sflush_r>:
 8007f3c:	898a      	ldrh	r2, [r1, #12]
 8007f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f42:	4605      	mov	r5, r0
 8007f44:	0710      	lsls	r0, r2, #28
 8007f46:	460c      	mov	r4, r1
 8007f48:	d458      	bmi.n	8007ffc <__sflush_r+0xc0>
 8007f4a:	684b      	ldr	r3, [r1, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dc05      	bgt.n	8007f5c <__sflush_r+0x20>
 8007f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dc02      	bgt.n	8007f5c <__sflush_r+0x20>
 8007f56:	2000      	movs	r0, #0
 8007f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d0f9      	beq.n	8007f56 <__sflush_r+0x1a>
 8007f62:	2300      	movs	r3, #0
 8007f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f68:	682f      	ldr	r7, [r5, #0]
 8007f6a:	6a21      	ldr	r1, [r4, #32]
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	d032      	beq.n	8007fd6 <__sflush_r+0x9a>
 8007f70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	075a      	lsls	r2, r3, #29
 8007f76:	d505      	bpl.n	8007f84 <__sflush_r+0x48>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	1ac0      	subs	r0, r0, r3
 8007f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f7e:	b10b      	cbz	r3, 8007f84 <__sflush_r+0x48>
 8007f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f82:	1ac0      	subs	r0, r0, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	4602      	mov	r2, r0
 8007f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f8a:	6a21      	ldr	r1, [r4, #32]
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	47b0      	blx	r6
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	d106      	bne.n	8007fa4 <__sflush_r+0x68>
 8007f96:	6829      	ldr	r1, [r5, #0]
 8007f98:	291d      	cmp	r1, #29
 8007f9a:	d848      	bhi.n	800802e <__sflush_r+0xf2>
 8007f9c:	4a29      	ldr	r2, [pc, #164]	; (8008044 <__sflush_r+0x108>)
 8007f9e:	40ca      	lsrs	r2, r1
 8007fa0:	07d6      	lsls	r6, r2, #31
 8007fa2:	d544      	bpl.n	800802e <__sflush_r+0xf2>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6062      	str	r2, [r4, #4]
 8007fa8:	04d9      	lsls	r1, r3, #19
 8007faa:	6922      	ldr	r2, [r4, #16]
 8007fac:	6022      	str	r2, [r4, #0]
 8007fae:	d504      	bpl.n	8007fba <__sflush_r+0x7e>
 8007fb0:	1c42      	adds	r2, r0, #1
 8007fb2:	d101      	bne.n	8007fb8 <__sflush_r+0x7c>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b903      	cbnz	r3, 8007fba <__sflush_r+0x7e>
 8007fb8:	6560      	str	r0, [r4, #84]	; 0x54
 8007fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fbc:	602f      	str	r7, [r5, #0]
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	d0c9      	beq.n	8007f56 <__sflush_r+0x1a>
 8007fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	d002      	beq.n	8007fd0 <__sflush_r+0x94>
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f7ff fdc2 	bl	8007b54 <_free_r>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fd4:	e7c0      	b.n	8007f58 <__sflush_r+0x1c>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b0      	blx	r6
 8007fdc:	1c41      	adds	r1, r0, #1
 8007fde:	d1c8      	bne.n	8007f72 <__sflush_r+0x36>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0c5      	beq.n	8007f72 <__sflush_r+0x36>
 8007fe6:	2b1d      	cmp	r3, #29
 8007fe8:	d001      	beq.n	8007fee <__sflush_r+0xb2>
 8007fea:	2b16      	cmp	r3, #22
 8007fec:	d101      	bne.n	8007ff2 <__sflush_r+0xb6>
 8007fee:	602f      	str	r7, [r5, #0]
 8007ff0:	e7b1      	b.n	8007f56 <__sflush_r+0x1a>
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	e7ad      	b.n	8007f58 <__sflush_r+0x1c>
 8007ffc:	690f      	ldr	r7, [r1, #16]
 8007ffe:	2f00      	cmp	r7, #0
 8008000:	d0a9      	beq.n	8007f56 <__sflush_r+0x1a>
 8008002:	0793      	lsls	r3, r2, #30
 8008004:	680e      	ldr	r6, [r1, #0]
 8008006:	bf08      	it	eq
 8008008:	694b      	ldreq	r3, [r1, #20]
 800800a:	600f      	str	r7, [r1, #0]
 800800c:	bf18      	it	ne
 800800e:	2300      	movne	r3, #0
 8008010:	eba6 0807 	sub.w	r8, r6, r7
 8008014:	608b      	str	r3, [r1, #8]
 8008016:	f1b8 0f00 	cmp.w	r8, #0
 800801a:	dd9c      	ble.n	8007f56 <__sflush_r+0x1a>
 800801c:	4643      	mov	r3, r8
 800801e:	463a      	mov	r2, r7
 8008020:	6a21      	ldr	r1, [r4, #32]
 8008022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008024:	4628      	mov	r0, r5
 8008026:	47b0      	blx	r6
 8008028:	2800      	cmp	r0, #0
 800802a:	dc06      	bgt.n	800803a <__sflush_r+0xfe>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e78e      	b.n	8007f58 <__sflush_r+0x1c>
 800803a:	4407      	add	r7, r0
 800803c:	eba8 0800 	sub.w	r8, r8, r0
 8008040:	e7e9      	b.n	8008016 <__sflush_r+0xda>
 8008042:	bf00      	nop
 8008044:	20400001 	.word	0x20400001

08008048 <_fflush_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	690b      	ldr	r3, [r1, #16]
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	b1db      	cbz	r3, 800808a <_fflush_r+0x42>
 8008052:	b118      	cbz	r0, 800805c <_fflush_r+0x14>
 8008054:	6983      	ldr	r3, [r0, #24]
 8008056:	b90b      	cbnz	r3, 800805c <_fflush_r+0x14>
 8008058:	f000 f860 	bl	800811c <__sinit>
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <_fflush_r+0x48>)
 800805e:	429c      	cmp	r4, r3
 8008060:	d109      	bne.n	8008076 <_fflush_r+0x2e>
 8008062:	686c      	ldr	r4, [r5, #4]
 8008064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008068:	b17b      	cbz	r3, 800808a <_fflush_r+0x42>
 800806a:	4621      	mov	r1, r4
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008072:	f7ff bf63 	b.w	8007f3c <__sflush_r>
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <_fflush_r+0x4c>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d101      	bne.n	8008080 <_fflush_r+0x38>
 800807c:	68ac      	ldr	r4, [r5, #8]
 800807e:	e7f1      	b.n	8008064 <_fflush_r+0x1c>
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <_fflush_r+0x50>)
 8008082:	429c      	cmp	r4, r3
 8008084:	bf08      	it	eq
 8008086:	68ec      	ldreq	r4, [r5, #12]
 8008088:	e7ec      	b.n	8008064 <_fflush_r+0x1c>
 800808a:	2000      	movs	r0, #0
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	08008b60 	.word	0x08008b60
 8008094:	08008b80 	.word	0x08008b80
 8008098:	08008b40 	.word	0x08008b40

0800809c <std>:
 800809c:	2300      	movs	r3, #0
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
 80080a2:	e9c0 3300 	strd	r3, r3, [r0]
 80080a6:	6083      	str	r3, [r0, #8]
 80080a8:	8181      	strh	r1, [r0, #12]
 80080aa:	6643      	str	r3, [r0, #100]	; 0x64
 80080ac:	81c2      	strh	r2, [r0, #14]
 80080ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b2:	6183      	str	r3, [r0, #24]
 80080b4:	4619      	mov	r1, r3
 80080b6:	2208      	movs	r2, #8
 80080b8:	305c      	adds	r0, #92	; 0x5c
 80080ba:	f7ff fd43 	bl	8007b44 <memset>
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <std+0x38>)
 80080c0:	6263      	str	r3, [r4, #36]	; 0x24
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <std+0x3c>)
 80080c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <std+0x40>)
 80080c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <std+0x44>)
 80080cc:	6224      	str	r4, [r4, #32]
 80080ce:	6323      	str	r3, [r4, #48]	; 0x30
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	0800888d 	.word	0x0800888d
 80080d8:	080088af 	.word	0x080088af
 80080dc:	080088e7 	.word	0x080088e7
 80080e0:	0800890b 	.word	0x0800890b

080080e4 <_cleanup_r>:
 80080e4:	4901      	ldr	r1, [pc, #4]	; (80080ec <_cleanup_r+0x8>)
 80080e6:	f000 b885 	b.w	80081f4 <_fwalk_reent>
 80080ea:	bf00      	nop
 80080ec:	08008049 	.word	0x08008049

080080f0 <__sfmoreglue>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	1e4a      	subs	r2, r1, #1
 80080f4:	2568      	movs	r5, #104	; 0x68
 80080f6:	4355      	muls	r5, r2
 80080f8:	460e      	mov	r6, r1
 80080fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080fe:	f7ff fd77 	bl	8007bf0 <_malloc_r>
 8008102:	4604      	mov	r4, r0
 8008104:	b140      	cbz	r0, 8008118 <__sfmoreglue+0x28>
 8008106:	2100      	movs	r1, #0
 8008108:	e9c0 1600 	strd	r1, r6, [r0]
 800810c:	300c      	adds	r0, #12
 800810e:	60a0      	str	r0, [r4, #8]
 8008110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008114:	f7ff fd16 	bl	8007b44 <memset>
 8008118:	4620      	mov	r0, r4
 800811a:	bd70      	pop	{r4, r5, r6, pc}

0800811c <__sinit>:
 800811c:	6983      	ldr	r3, [r0, #24]
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	bb33      	cbnz	r3, 8008172 <__sinit+0x56>
 8008124:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008128:	6503      	str	r3, [r0, #80]	; 0x50
 800812a:	4b12      	ldr	r3, [pc, #72]	; (8008174 <__sinit+0x58>)
 800812c:	4a12      	ldr	r2, [pc, #72]	; (8008178 <__sinit+0x5c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6282      	str	r2, [r0, #40]	; 0x28
 8008132:	4298      	cmp	r0, r3
 8008134:	bf04      	itt	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	6183      	streq	r3, [r0, #24]
 800813a:	f000 f81f 	bl	800817c <__sfp>
 800813e:	6060      	str	r0, [r4, #4]
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f81b 	bl	800817c <__sfp>
 8008146:	60a0      	str	r0, [r4, #8]
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f817 	bl	800817c <__sfp>
 800814e:	2200      	movs	r2, #0
 8008150:	60e0      	str	r0, [r4, #12]
 8008152:	2104      	movs	r1, #4
 8008154:	6860      	ldr	r0, [r4, #4]
 8008156:	f7ff ffa1 	bl	800809c <std>
 800815a:	2201      	movs	r2, #1
 800815c:	2109      	movs	r1, #9
 800815e:	68a0      	ldr	r0, [r4, #8]
 8008160:	f7ff ff9c 	bl	800809c <std>
 8008164:	2202      	movs	r2, #2
 8008166:	2112      	movs	r1, #18
 8008168:	68e0      	ldr	r0, [r4, #12]
 800816a:	f7ff ff97 	bl	800809c <std>
 800816e:	2301      	movs	r3, #1
 8008170:	61a3      	str	r3, [r4, #24]
 8008172:	bd10      	pop	{r4, pc}
 8008174:	08008b3c 	.word	0x08008b3c
 8008178:	080080e5 	.word	0x080080e5

0800817c <__sfp>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <__sfp+0x70>)
 8008180:	681e      	ldr	r6, [r3, #0]
 8008182:	69b3      	ldr	r3, [r6, #24]
 8008184:	4607      	mov	r7, r0
 8008186:	b913      	cbnz	r3, 800818e <__sfp+0x12>
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff ffc7 	bl	800811c <__sinit>
 800818e:	3648      	adds	r6, #72	; 0x48
 8008190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008194:	3b01      	subs	r3, #1
 8008196:	d503      	bpl.n	80081a0 <__sfp+0x24>
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	b133      	cbz	r3, 80081aa <__sfp+0x2e>
 800819c:	6836      	ldr	r6, [r6, #0]
 800819e:	e7f7      	b.n	8008190 <__sfp+0x14>
 80081a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081a4:	b16d      	cbz	r5, 80081c2 <__sfp+0x46>
 80081a6:	3468      	adds	r4, #104	; 0x68
 80081a8:	e7f4      	b.n	8008194 <__sfp+0x18>
 80081aa:	2104      	movs	r1, #4
 80081ac:	4638      	mov	r0, r7
 80081ae:	f7ff ff9f 	bl	80080f0 <__sfmoreglue>
 80081b2:	6030      	str	r0, [r6, #0]
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d1f1      	bne.n	800819c <__sfp+0x20>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4604      	mov	r4, r0
 80081be:	4620      	mov	r0, r4
 80081c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c2:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <__sfp+0x74>)
 80081c4:	6665      	str	r5, [r4, #100]	; 0x64
 80081c6:	e9c4 5500 	strd	r5, r5, [r4]
 80081ca:	60a5      	str	r5, [r4, #8]
 80081cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081d4:	2208      	movs	r2, #8
 80081d6:	4629      	mov	r1, r5
 80081d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081dc:	f7ff fcb2 	bl	8007b44 <memset>
 80081e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081e8:	e7e9      	b.n	80081be <__sfp+0x42>
 80081ea:	bf00      	nop
 80081ec:	08008b3c 	.word	0x08008b3c
 80081f0:	ffff0001 	.word	0xffff0001

080081f4 <_fwalk_reent>:
 80081f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f8:	4680      	mov	r8, r0
 80081fa:	4689      	mov	r9, r1
 80081fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008200:	2600      	movs	r6, #0
 8008202:	b914      	cbnz	r4, 800820a <_fwalk_reent+0x16>
 8008204:	4630      	mov	r0, r6
 8008206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800820e:	3f01      	subs	r7, #1
 8008210:	d501      	bpl.n	8008216 <_fwalk_reent+0x22>
 8008212:	6824      	ldr	r4, [r4, #0]
 8008214:	e7f5      	b.n	8008202 <_fwalk_reent+0xe>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d907      	bls.n	800822c <_fwalk_reent+0x38>
 800821c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008220:	3301      	adds	r3, #1
 8008222:	d003      	beq.n	800822c <_fwalk_reent+0x38>
 8008224:	4629      	mov	r1, r5
 8008226:	4640      	mov	r0, r8
 8008228:	47c8      	blx	r9
 800822a:	4306      	orrs	r6, r0
 800822c:	3568      	adds	r5, #104	; 0x68
 800822e:	e7ee      	b.n	800820e <_fwalk_reent+0x1a>

08008230 <__swhatbuf_r>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	460e      	mov	r6, r1
 8008234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008238:	2900      	cmp	r1, #0
 800823a:	b096      	sub	sp, #88	; 0x58
 800823c:	4614      	mov	r4, r2
 800823e:	461d      	mov	r5, r3
 8008240:	da07      	bge.n	8008252 <__swhatbuf_r+0x22>
 8008242:	2300      	movs	r3, #0
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	89b3      	ldrh	r3, [r6, #12]
 8008248:	061a      	lsls	r2, r3, #24
 800824a:	d410      	bmi.n	800826e <__swhatbuf_r+0x3e>
 800824c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008250:	e00e      	b.n	8008270 <__swhatbuf_r+0x40>
 8008252:	466a      	mov	r2, sp
 8008254:	f000 fb80 	bl	8008958 <_fstat_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	dbf2      	blt.n	8008242 <__swhatbuf_r+0x12>
 800825c:	9a01      	ldr	r2, [sp, #4]
 800825e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008266:	425a      	negs	r2, r3
 8008268:	415a      	adcs	r2, r3
 800826a:	602a      	str	r2, [r5, #0]
 800826c:	e7ee      	b.n	800824c <__swhatbuf_r+0x1c>
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	2000      	movs	r0, #0
 8008272:	6023      	str	r3, [r4, #0]
 8008274:	b016      	add	sp, #88	; 0x58
 8008276:	bd70      	pop	{r4, r5, r6, pc}

08008278 <__smakebuf_r>:
 8008278:	898b      	ldrh	r3, [r1, #12]
 800827a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827c:	079d      	lsls	r5, r3, #30
 800827e:	4606      	mov	r6, r0
 8008280:	460c      	mov	r4, r1
 8008282:	d507      	bpl.n	8008294 <__smakebuf_r+0x1c>
 8008284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	2301      	movs	r3, #1
 800828e:	6163      	str	r3, [r4, #20]
 8008290:	b002      	add	sp, #8
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	ab01      	add	r3, sp, #4
 8008296:	466a      	mov	r2, sp
 8008298:	f7ff ffca 	bl	8008230 <__swhatbuf_r>
 800829c:	9900      	ldr	r1, [sp, #0]
 800829e:	4605      	mov	r5, r0
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7ff fca5 	bl	8007bf0 <_malloc_r>
 80082a6:	b948      	cbnz	r0, 80082bc <__smakebuf_r+0x44>
 80082a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d4ef      	bmi.n	8008290 <__smakebuf_r+0x18>
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	f043 0302 	orr.w	r3, r3, #2
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	e7e3      	b.n	8008284 <__smakebuf_r+0xc>
 80082bc:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <__smakebuf_r+0x7c>)
 80082be:	62b3      	str	r3, [r6, #40]	; 0x28
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	6163      	str	r3, [r4, #20]
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	6120      	str	r0, [r4, #16]
 80082d2:	b15b      	cbz	r3, 80082ec <__smakebuf_r+0x74>
 80082d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 fb4f 	bl	800897c <_isatty_r>
 80082de:	b128      	cbz	r0, 80082ec <__smakebuf_r+0x74>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	431d      	orrs	r5, r3
 80082f0:	81a5      	strh	r5, [r4, #12]
 80082f2:	e7cd      	b.n	8008290 <__smakebuf_r+0x18>
 80082f4:	080080e5 	.word	0x080080e5

080082f8 <__malloc_lock>:
 80082f8:	4770      	bx	lr

080082fa <__malloc_unlock>:
 80082fa:	4770      	bx	lr

080082fc <__sfputc_r>:
 80082fc:	6893      	ldr	r3, [r2, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	b410      	push	{r4}
 8008304:	6093      	str	r3, [r2, #8]
 8008306:	da08      	bge.n	800831a <__sfputc_r+0x1e>
 8008308:	6994      	ldr	r4, [r2, #24]
 800830a:	42a3      	cmp	r3, r4
 800830c:	db01      	blt.n	8008312 <__sfputc_r+0x16>
 800830e:	290a      	cmp	r1, #10
 8008310:	d103      	bne.n	800831a <__sfputc_r+0x1e>
 8008312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008316:	f7ff bd51 	b.w	8007dbc <__swbuf_r>
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	1c58      	adds	r0, r3, #1
 800831e:	6010      	str	r0, [r2, #0]
 8008320:	7019      	strb	r1, [r3, #0]
 8008322:	4608      	mov	r0, r1
 8008324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008328:	4770      	bx	lr

0800832a <__sfputs_r>:
 800832a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4614      	mov	r4, r2
 8008332:	18d5      	adds	r5, r2, r3
 8008334:	42ac      	cmp	r4, r5
 8008336:	d101      	bne.n	800833c <__sfputs_r+0x12>
 8008338:	2000      	movs	r0, #0
 800833a:	e007      	b.n	800834c <__sfputs_r+0x22>
 800833c:	463a      	mov	r2, r7
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4630      	mov	r0, r6
 8008344:	f7ff ffda 	bl	80082fc <__sfputc_r>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d1f3      	bne.n	8008334 <__sfputs_r+0xa>
 800834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008350 <_vfiprintf_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	b09d      	sub	sp, #116	; 0x74
 8008358:	4617      	mov	r7, r2
 800835a:	461d      	mov	r5, r3
 800835c:	4606      	mov	r6, r0
 800835e:	b118      	cbz	r0, 8008368 <_vfiprintf_r+0x18>
 8008360:	6983      	ldr	r3, [r0, #24]
 8008362:	b90b      	cbnz	r3, 8008368 <_vfiprintf_r+0x18>
 8008364:	f7ff feda 	bl	800811c <__sinit>
 8008368:	4b7c      	ldr	r3, [pc, #496]	; (800855c <_vfiprintf_r+0x20c>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d158      	bne.n	8008420 <_vfiprintf_r+0xd0>
 800836e:	6874      	ldr	r4, [r6, #4]
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	0718      	lsls	r0, r3, #28
 8008374:	d55e      	bpl.n	8008434 <_vfiprintf_r+0xe4>
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d05b      	beq.n	8008434 <_vfiprintf_r+0xe4>
 800837c:	2300      	movs	r3, #0
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	2320      	movs	r3, #32
 8008382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008386:	2330      	movs	r3, #48	; 0x30
 8008388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800838c:	9503      	str	r5, [sp, #12]
 800838e:	f04f 0b01 	mov.w	fp, #1
 8008392:	46b8      	mov	r8, r7
 8008394:	4645      	mov	r5, r8
 8008396:	f815 3b01 	ldrb.w	r3, [r5], #1
 800839a:	b10b      	cbz	r3, 80083a0 <_vfiprintf_r+0x50>
 800839c:	2b25      	cmp	r3, #37	; 0x25
 800839e:	d154      	bne.n	800844a <_vfiprintf_r+0xfa>
 80083a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80083a4:	d00b      	beq.n	80083be <_vfiprintf_r+0x6e>
 80083a6:	4653      	mov	r3, sl
 80083a8:	463a      	mov	r2, r7
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ffbc 	bl	800832a <__sfputs_r>
 80083b2:	3001      	adds	r0, #1
 80083b4:	f000 80c2 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	4453      	add	r3, sl
 80083bc:	9309      	str	r3, [sp, #36]	; 0x24
 80083be:	f898 3000 	ldrb.w	r3, [r8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 80ba 	beq.w	800853c <_vfiprintf_r+0x1ec>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 32ff 	mov.w	r2, #4294967295
 80083ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	9307      	str	r3, [sp, #28]
 80083d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083da:	931a      	str	r3, [sp, #104]	; 0x68
 80083dc:	46a8      	mov	r8, r5
 80083de:	2205      	movs	r2, #5
 80083e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80083e4:	485e      	ldr	r0, [pc, #376]	; (8008560 <_vfiprintf_r+0x210>)
 80083e6:	f7f7 ff13 	bl	8000210 <memchr>
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	bb78      	cbnz	r0, 800844e <_vfiprintf_r+0xfe>
 80083ee:	06d9      	lsls	r1, r3, #27
 80083f0:	bf44      	itt	mi
 80083f2:	2220      	movmi	r2, #32
 80083f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083f8:	071a      	lsls	r2, r3, #28
 80083fa:	bf44      	itt	mi
 80083fc:	222b      	movmi	r2, #43	; 0x2b
 80083fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008402:	782a      	ldrb	r2, [r5, #0]
 8008404:	2a2a      	cmp	r2, #42	; 0x2a
 8008406:	d02a      	beq.n	800845e <_vfiprintf_r+0x10e>
 8008408:	9a07      	ldr	r2, [sp, #28]
 800840a:	46a8      	mov	r8, r5
 800840c:	2000      	movs	r0, #0
 800840e:	250a      	movs	r5, #10
 8008410:	4641      	mov	r1, r8
 8008412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008416:	3b30      	subs	r3, #48	; 0x30
 8008418:	2b09      	cmp	r3, #9
 800841a:	d969      	bls.n	80084f0 <_vfiprintf_r+0x1a0>
 800841c:	b360      	cbz	r0, 8008478 <_vfiprintf_r+0x128>
 800841e:	e024      	b.n	800846a <_vfiprintf_r+0x11a>
 8008420:	4b50      	ldr	r3, [pc, #320]	; (8008564 <_vfiprintf_r+0x214>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d101      	bne.n	800842a <_vfiprintf_r+0xda>
 8008426:	68b4      	ldr	r4, [r6, #8]
 8008428:	e7a2      	b.n	8008370 <_vfiprintf_r+0x20>
 800842a:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <_vfiprintf_r+0x218>)
 800842c:	429c      	cmp	r4, r3
 800842e:	bf08      	it	eq
 8008430:	68f4      	ldreq	r4, [r6, #12]
 8008432:	e79d      	b.n	8008370 <_vfiprintf_r+0x20>
 8008434:	4621      	mov	r1, r4
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff fd12 	bl	8007e60 <__swsetup_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	d09d      	beq.n	800837c <_vfiprintf_r+0x2c>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	b01d      	add	sp, #116	; 0x74
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	46a8      	mov	r8, r5
 800844c:	e7a2      	b.n	8008394 <_vfiprintf_r+0x44>
 800844e:	4a44      	ldr	r2, [pc, #272]	; (8008560 <_vfiprintf_r+0x210>)
 8008450:	1a80      	subs	r0, r0, r2
 8008452:	fa0b f000 	lsl.w	r0, fp, r0
 8008456:	4318      	orrs	r0, r3
 8008458:	9004      	str	r0, [sp, #16]
 800845a:	4645      	mov	r5, r8
 800845c:	e7be      	b.n	80083dc <_vfiprintf_r+0x8c>
 800845e:	9a03      	ldr	r2, [sp, #12]
 8008460:	1d11      	adds	r1, r2, #4
 8008462:	6812      	ldr	r2, [r2, #0]
 8008464:	9103      	str	r1, [sp, #12]
 8008466:	2a00      	cmp	r2, #0
 8008468:	db01      	blt.n	800846e <_vfiprintf_r+0x11e>
 800846a:	9207      	str	r2, [sp, #28]
 800846c:	e004      	b.n	8008478 <_vfiprintf_r+0x128>
 800846e:	4252      	negs	r2, r2
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	9207      	str	r2, [sp, #28]
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	f898 3000 	ldrb.w	r3, [r8]
 800847c:	2b2e      	cmp	r3, #46	; 0x2e
 800847e:	d10e      	bne.n	800849e <_vfiprintf_r+0x14e>
 8008480:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008484:	2b2a      	cmp	r3, #42	; 0x2a
 8008486:	d138      	bne.n	80084fa <_vfiprintf_r+0x1aa>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9203      	str	r2, [sp, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	bfb8      	it	lt
 8008494:	f04f 33ff 	movlt.w	r3, #4294967295
 8008498:	f108 0802 	add.w	r8, r8, #2
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	4d33      	ldr	r5, [pc, #204]	; (800856c <_vfiprintf_r+0x21c>)
 80084a0:	f898 1000 	ldrb.w	r1, [r8]
 80084a4:	2203      	movs	r2, #3
 80084a6:	4628      	mov	r0, r5
 80084a8:	f7f7 feb2 	bl	8000210 <memchr>
 80084ac:	b140      	cbz	r0, 80084c0 <_vfiprintf_r+0x170>
 80084ae:	2340      	movs	r3, #64	; 0x40
 80084b0:	1b40      	subs	r0, r0, r5
 80084b2:	fa03 f000 	lsl.w	r0, r3, r0
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	4303      	orrs	r3, r0
 80084ba:	f108 0801 	add.w	r8, r8, #1
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	f898 1000 	ldrb.w	r1, [r8]
 80084c4:	482a      	ldr	r0, [pc, #168]	; (8008570 <_vfiprintf_r+0x220>)
 80084c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ca:	2206      	movs	r2, #6
 80084cc:	f108 0701 	add.w	r7, r8, #1
 80084d0:	f7f7 fe9e 	bl	8000210 <memchr>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d037      	beq.n	8008548 <_vfiprintf_r+0x1f8>
 80084d8:	4b26      	ldr	r3, [pc, #152]	; (8008574 <_vfiprintf_r+0x224>)
 80084da:	bb1b      	cbnz	r3, 8008524 <_vfiprintf_r+0x1d4>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	3308      	adds	r3, #8
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ea:	444b      	add	r3, r9
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	e750      	b.n	8008392 <_vfiprintf_r+0x42>
 80084f0:	fb05 3202 	mla	r2, r5, r2, r3
 80084f4:	2001      	movs	r0, #1
 80084f6:	4688      	mov	r8, r1
 80084f8:	e78a      	b.n	8008410 <_vfiprintf_r+0xc0>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f108 0801 	add.w	r8, r8, #1
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	4619      	mov	r1, r3
 8008504:	250a      	movs	r5, #10
 8008506:	4640      	mov	r0, r8
 8008508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850c:	3a30      	subs	r2, #48	; 0x30
 800850e:	2a09      	cmp	r2, #9
 8008510:	d903      	bls.n	800851a <_vfiprintf_r+0x1ca>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0c3      	beq.n	800849e <_vfiprintf_r+0x14e>
 8008516:	9105      	str	r1, [sp, #20]
 8008518:	e7c1      	b.n	800849e <_vfiprintf_r+0x14e>
 800851a:	fb05 2101 	mla	r1, r5, r1, r2
 800851e:	2301      	movs	r3, #1
 8008520:	4680      	mov	r8, r0
 8008522:	e7f0      	b.n	8008506 <_vfiprintf_r+0x1b6>
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4622      	mov	r2, r4
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <_vfiprintf_r+0x228>)
 800852c:	a904      	add	r1, sp, #16
 800852e:	4630      	mov	r0, r6
 8008530:	f3af 8000 	nop.w
 8008534:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008538:	4681      	mov	r9, r0
 800853a:	d1d5      	bne.n	80084e8 <_vfiprintf_r+0x198>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	065b      	lsls	r3, r3, #25
 8008540:	f53f af7e 	bmi.w	8008440 <_vfiprintf_r+0xf0>
 8008544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008546:	e77d      	b.n	8008444 <_vfiprintf_r+0xf4>
 8008548:	ab03      	add	r3, sp, #12
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4622      	mov	r2, r4
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <_vfiprintf_r+0x228>)
 8008550:	a904      	add	r1, sp, #16
 8008552:	4630      	mov	r0, r6
 8008554:	f000 f888 	bl	8008668 <_printf_i>
 8008558:	e7ec      	b.n	8008534 <_vfiprintf_r+0x1e4>
 800855a:	bf00      	nop
 800855c:	08008b60 	.word	0x08008b60
 8008560:	08008ba0 	.word	0x08008ba0
 8008564:	08008b80 	.word	0x08008b80
 8008568:	08008b40 	.word	0x08008b40
 800856c:	08008ba6 	.word	0x08008ba6
 8008570:	08008baa 	.word	0x08008baa
 8008574:	00000000 	.word	0x00000000
 8008578:	0800832b 	.word	0x0800832b

0800857c <_printf_common>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	4691      	mov	r9, r2
 8008582:	461f      	mov	r7, r3
 8008584:	688a      	ldr	r2, [r1, #8]
 8008586:	690b      	ldr	r3, [r1, #16]
 8008588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800858c:	4293      	cmp	r3, r2
 800858e:	bfb8      	it	lt
 8008590:	4613      	movlt	r3, r2
 8008592:	f8c9 3000 	str.w	r3, [r9]
 8008596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800859a:	4606      	mov	r6, r0
 800859c:	460c      	mov	r4, r1
 800859e:	b112      	cbz	r2, 80085a6 <_printf_common+0x2a>
 80085a0:	3301      	adds	r3, #1
 80085a2:	f8c9 3000 	str.w	r3, [r9]
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	0699      	lsls	r1, r3, #26
 80085aa:	bf42      	ittt	mi
 80085ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80085b0:	3302      	addmi	r3, #2
 80085b2:	f8c9 3000 	strmi.w	r3, [r9]
 80085b6:	6825      	ldr	r5, [r4, #0]
 80085b8:	f015 0506 	ands.w	r5, r5, #6
 80085bc:	d107      	bne.n	80085ce <_printf_common+0x52>
 80085be:	f104 0a19 	add.w	sl, r4, #25
 80085c2:	68e3      	ldr	r3, [r4, #12]
 80085c4:	f8d9 2000 	ldr.w	r2, [r9]
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	42ab      	cmp	r3, r5
 80085cc:	dc28      	bgt.n	8008620 <_printf_common+0xa4>
 80085ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	3300      	adds	r3, #0
 80085d6:	bf18      	it	ne
 80085d8:	2301      	movne	r3, #1
 80085da:	0692      	lsls	r2, r2, #26
 80085dc:	d42d      	bmi.n	800863a <_printf_common+0xbe>
 80085de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085e2:	4639      	mov	r1, r7
 80085e4:	4630      	mov	r0, r6
 80085e6:	47c0      	blx	r8
 80085e8:	3001      	adds	r0, #1
 80085ea:	d020      	beq.n	800862e <_printf_common+0xb2>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	68e5      	ldr	r5, [r4, #12]
 80085f0:	f8d9 2000 	ldr.w	r2, [r9]
 80085f4:	f003 0306 	and.w	r3, r3, #6
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	bf08      	it	eq
 80085fc:	1aad      	subeq	r5, r5, r2
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	6922      	ldr	r2, [r4, #16]
 8008602:	bf0c      	ite	eq
 8008604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008608:	2500      	movne	r5, #0
 800860a:	4293      	cmp	r3, r2
 800860c:	bfc4      	itt	gt
 800860e:	1a9b      	subgt	r3, r3, r2
 8008610:	18ed      	addgt	r5, r5, r3
 8008612:	f04f 0900 	mov.w	r9, #0
 8008616:	341a      	adds	r4, #26
 8008618:	454d      	cmp	r5, r9
 800861a:	d11a      	bne.n	8008652 <_printf_common+0xd6>
 800861c:	2000      	movs	r0, #0
 800861e:	e008      	b.n	8008632 <_printf_common+0xb6>
 8008620:	2301      	movs	r3, #1
 8008622:	4652      	mov	r2, sl
 8008624:	4639      	mov	r1, r7
 8008626:	4630      	mov	r0, r6
 8008628:	47c0      	blx	r8
 800862a:	3001      	adds	r0, #1
 800862c:	d103      	bne.n	8008636 <_printf_common+0xba>
 800862e:	f04f 30ff 	mov.w	r0, #4294967295
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	3501      	adds	r5, #1
 8008638:	e7c3      	b.n	80085c2 <_printf_common+0x46>
 800863a:	18e1      	adds	r1, r4, r3
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	2030      	movs	r0, #48	; 0x30
 8008640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008644:	4422      	add	r2, r4
 8008646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800864a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800864e:	3302      	adds	r3, #2
 8008650:	e7c5      	b.n	80085de <_printf_common+0x62>
 8008652:	2301      	movs	r3, #1
 8008654:	4622      	mov	r2, r4
 8008656:	4639      	mov	r1, r7
 8008658:	4630      	mov	r0, r6
 800865a:	47c0      	blx	r8
 800865c:	3001      	adds	r0, #1
 800865e:	d0e6      	beq.n	800862e <_printf_common+0xb2>
 8008660:	f109 0901 	add.w	r9, r9, #1
 8008664:	e7d8      	b.n	8008618 <_printf_common+0x9c>
	...

08008668 <_printf_i>:
 8008668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800866c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008670:	460c      	mov	r4, r1
 8008672:	7e09      	ldrb	r1, [r1, #24]
 8008674:	b085      	sub	sp, #20
 8008676:	296e      	cmp	r1, #110	; 0x6e
 8008678:	4617      	mov	r7, r2
 800867a:	4606      	mov	r6, r0
 800867c:	4698      	mov	r8, r3
 800867e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008680:	f000 80b3 	beq.w	80087ea <_printf_i+0x182>
 8008684:	d822      	bhi.n	80086cc <_printf_i+0x64>
 8008686:	2963      	cmp	r1, #99	; 0x63
 8008688:	d036      	beq.n	80086f8 <_printf_i+0x90>
 800868a:	d80a      	bhi.n	80086a2 <_printf_i+0x3a>
 800868c:	2900      	cmp	r1, #0
 800868e:	f000 80b9 	beq.w	8008804 <_printf_i+0x19c>
 8008692:	2958      	cmp	r1, #88	; 0x58
 8008694:	f000 8083 	beq.w	800879e <_printf_i+0x136>
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80086a0:	e032      	b.n	8008708 <_printf_i+0xa0>
 80086a2:	2964      	cmp	r1, #100	; 0x64
 80086a4:	d001      	beq.n	80086aa <_printf_i+0x42>
 80086a6:	2969      	cmp	r1, #105	; 0x69
 80086a8:	d1f6      	bne.n	8008698 <_printf_i+0x30>
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	0605      	lsls	r5, r0, #24
 80086b0:	f103 0104 	add.w	r1, r3, #4
 80086b4:	d52a      	bpl.n	800870c <_printf_i+0xa4>
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da03      	bge.n	80086c6 <_printf_i+0x5e>
 80086be:	222d      	movs	r2, #45	; 0x2d
 80086c0:	425b      	negs	r3, r3
 80086c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80086c6:	486f      	ldr	r0, [pc, #444]	; (8008884 <_printf_i+0x21c>)
 80086c8:	220a      	movs	r2, #10
 80086ca:	e039      	b.n	8008740 <_printf_i+0xd8>
 80086cc:	2973      	cmp	r1, #115	; 0x73
 80086ce:	f000 809d 	beq.w	800880c <_printf_i+0x1a4>
 80086d2:	d808      	bhi.n	80086e6 <_printf_i+0x7e>
 80086d4:	296f      	cmp	r1, #111	; 0x6f
 80086d6:	d020      	beq.n	800871a <_printf_i+0xb2>
 80086d8:	2970      	cmp	r1, #112	; 0x70
 80086da:	d1dd      	bne.n	8008698 <_printf_i+0x30>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	f043 0320 	orr.w	r3, r3, #32
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	e003      	b.n	80086ee <_printf_i+0x86>
 80086e6:	2975      	cmp	r1, #117	; 0x75
 80086e8:	d017      	beq.n	800871a <_printf_i+0xb2>
 80086ea:	2978      	cmp	r1, #120	; 0x78
 80086ec:	d1d4      	bne.n	8008698 <_printf_i+0x30>
 80086ee:	2378      	movs	r3, #120	; 0x78
 80086f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086f4:	4864      	ldr	r0, [pc, #400]	; (8008888 <_printf_i+0x220>)
 80086f6:	e055      	b.n	80087a4 <_printf_i+0x13c>
 80086f8:	6813      	ldr	r3, [r2, #0]
 80086fa:	1d19      	adds	r1, r3, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6011      	str	r1, [r2, #0]
 8008700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008708:	2301      	movs	r3, #1
 800870a:	e08c      	b.n	8008826 <_printf_i+0x1be>
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6011      	str	r1, [r2, #0]
 8008710:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008714:	bf18      	it	ne
 8008716:	b21b      	sxthne	r3, r3
 8008718:	e7cf      	b.n	80086ba <_printf_i+0x52>
 800871a:	6813      	ldr	r3, [r2, #0]
 800871c:	6825      	ldr	r5, [r4, #0]
 800871e:	1d18      	adds	r0, r3, #4
 8008720:	6010      	str	r0, [r2, #0]
 8008722:	0628      	lsls	r0, r5, #24
 8008724:	d501      	bpl.n	800872a <_printf_i+0xc2>
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	e002      	b.n	8008730 <_printf_i+0xc8>
 800872a:	0668      	lsls	r0, r5, #25
 800872c:	d5fb      	bpl.n	8008726 <_printf_i+0xbe>
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	4854      	ldr	r0, [pc, #336]	; (8008884 <_printf_i+0x21c>)
 8008732:	296f      	cmp	r1, #111	; 0x6f
 8008734:	bf14      	ite	ne
 8008736:	220a      	movne	r2, #10
 8008738:	2208      	moveq	r2, #8
 800873a:	2100      	movs	r1, #0
 800873c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008740:	6865      	ldr	r5, [r4, #4]
 8008742:	60a5      	str	r5, [r4, #8]
 8008744:	2d00      	cmp	r5, #0
 8008746:	f2c0 8095 	blt.w	8008874 <_printf_i+0x20c>
 800874a:	6821      	ldr	r1, [r4, #0]
 800874c:	f021 0104 	bic.w	r1, r1, #4
 8008750:	6021      	str	r1, [r4, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d13d      	bne.n	80087d2 <_printf_i+0x16a>
 8008756:	2d00      	cmp	r5, #0
 8008758:	f040 808e 	bne.w	8008878 <_printf_i+0x210>
 800875c:	4665      	mov	r5, ip
 800875e:	2a08      	cmp	r2, #8
 8008760:	d10b      	bne.n	800877a <_printf_i+0x112>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	07db      	lsls	r3, r3, #31
 8008766:	d508      	bpl.n	800877a <_printf_i+0x112>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	6862      	ldr	r2, [r4, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	bfde      	ittt	le
 8008770:	2330      	movle	r3, #48	; 0x30
 8008772:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008776:	f105 35ff 	addle.w	r5, r5, #4294967295
 800877a:	ebac 0305 	sub.w	r3, ip, r5
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	f8cd 8000 	str.w	r8, [sp]
 8008784:	463b      	mov	r3, r7
 8008786:	aa03      	add	r2, sp, #12
 8008788:	4621      	mov	r1, r4
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff fef6 	bl	800857c <_printf_common>
 8008790:	3001      	adds	r0, #1
 8008792:	d14d      	bne.n	8008830 <_printf_i+0x1c8>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	b005      	add	sp, #20
 800879a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800879e:	4839      	ldr	r0, [pc, #228]	; (8008884 <_printf_i+0x21c>)
 80087a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80087a4:	6813      	ldr	r3, [r2, #0]
 80087a6:	6821      	ldr	r1, [r4, #0]
 80087a8:	1d1d      	adds	r5, r3, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6015      	str	r5, [r2, #0]
 80087ae:	060a      	lsls	r2, r1, #24
 80087b0:	d50b      	bpl.n	80087ca <_printf_i+0x162>
 80087b2:	07ca      	lsls	r2, r1, #31
 80087b4:	bf44      	itt	mi
 80087b6:	f041 0120 	orrmi.w	r1, r1, #32
 80087ba:	6021      	strmi	r1, [r4, #0]
 80087bc:	b91b      	cbnz	r3, 80087c6 <_printf_i+0x15e>
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	f022 0220 	bic.w	r2, r2, #32
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	2210      	movs	r2, #16
 80087c8:	e7b7      	b.n	800873a <_printf_i+0xd2>
 80087ca:	064d      	lsls	r5, r1, #25
 80087cc:	bf48      	it	mi
 80087ce:	b29b      	uxthmi	r3, r3
 80087d0:	e7ef      	b.n	80087b2 <_printf_i+0x14a>
 80087d2:	4665      	mov	r5, ip
 80087d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087d8:	fb02 3311 	mls	r3, r2, r1, r3
 80087dc:	5cc3      	ldrb	r3, [r0, r3]
 80087de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80087e2:	460b      	mov	r3, r1
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d1f5      	bne.n	80087d4 <_printf_i+0x16c>
 80087e8:	e7b9      	b.n	800875e <_printf_i+0xf6>
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	6961      	ldr	r1, [r4, #20]
 80087f0:	1d18      	adds	r0, r3, #4
 80087f2:	6010      	str	r0, [r2, #0]
 80087f4:	0628      	lsls	r0, r5, #24
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	d501      	bpl.n	80087fe <_printf_i+0x196>
 80087fa:	6019      	str	r1, [r3, #0]
 80087fc:	e002      	b.n	8008804 <_printf_i+0x19c>
 80087fe:	066a      	lsls	r2, r5, #25
 8008800:	d5fb      	bpl.n	80087fa <_printf_i+0x192>
 8008802:	8019      	strh	r1, [r3, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	4665      	mov	r5, ip
 800880a:	e7b9      	b.n	8008780 <_printf_i+0x118>
 800880c:	6813      	ldr	r3, [r2, #0]
 800880e:	1d19      	adds	r1, r3, #4
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	681d      	ldr	r5, [r3, #0]
 8008814:	6862      	ldr	r2, [r4, #4]
 8008816:	2100      	movs	r1, #0
 8008818:	4628      	mov	r0, r5
 800881a:	f7f7 fcf9 	bl	8000210 <memchr>
 800881e:	b108      	cbz	r0, 8008824 <_printf_i+0x1bc>
 8008820:	1b40      	subs	r0, r0, r5
 8008822:	6060      	str	r0, [r4, #4]
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	2300      	movs	r3, #0
 800882a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882e:	e7a7      	b.n	8008780 <_printf_i+0x118>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	462a      	mov	r2, r5
 8008834:	4639      	mov	r1, r7
 8008836:	4630      	mov	r0, r6
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d0aa      	beq.n	8008794 <_printf_i+0x12c>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	079b      	lsls	r3, r3, #30
 8008842:	d413      	bmi.n	800886c <_printf_i+0x204>
 8008844:	68e0      	ldr	r0, [r4, #12]
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	4298      	cmp	r0, r3
 800884a:	bfb8      	it	lt
 800884c:	4618      	movlt	r0, r3
 800884e:	e7a3      	b.n	8008798 <_printf_i+0x130>
 8008850:	2301      	movs	r3, #1
 8008852:	464a      	mov	r2, r9
 8008854:	4639      	mov	r1, r7
 8008856:	4630      	mov	r0, r6
 8008858:	47c0      	blx	r8
 800885a:	3001      	adds	r0, #1
 800885c:	d09a      	beq.n	8008794 <_printf_i+0x12c>
 800885e:	3501      	adds	r5, #1
 8008860:	68e3      	ldr	r3, [r4, #12]
 8008862:	9a03      	ldr	r2, [sp, #12]
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	42ab      	cmp	r3, r5
 8008868:	dcf2      	bgt.n	8008850 <_printf_i+0x1e8>
 800886a:	e7eb      	b.n	8008844 <_printf_i+0x1dc>
 800886c:	2500      	movs	r5, #0
 800886e:	f104 0919 	add.w	r9, r4, #25
 8008872:	e7f5      	b.n	8008860 <_printf_i+0x1f8>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ac      	bne.n	80087d2 <_printf_i+0x16a>
 8008878:	7803      	ldrb	r3, [r0, #0]
 800887a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800887e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008882:	e76c      	b.n	800875e <_printf_i+0xf6>
 8008884:	08008bb1 	.word	0x08008bb1
 8008888:	08008bc2 	.word	0x08008bc2

0800888c <__sread>:
 800888c:	b510      	push	{r4, lr}
 800888e:	460c      	mov	r4, r1
 8008890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008894:	f000 f894 	bl	80089c0 <_read_r>
 8008898:	2800      	cmp	r0, #0
 800889a:	bfab      	itete	ge
 800889c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800889e:	89a3      	ldrhlt	r3, [r4, #12]
 80088a0:	181b      	addge	r3, r3, r0
 80088a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088a6:	bfac      	ite	ge
 80088a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088aa:	81a3      	strhlt	r3, [r4, #12]
 80088ac:	bd10      	pop	{r4, pc}

080088ae <__swrite>:
 80088ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b2:	461f      	mov	r7, r3
 80088b4:	898b      	ldrh	r3, [r1, #12]
 80088b6:	05db      	lsls	r3, r3, #23
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	4616      	mov	r6, r2
 80088be:	d505      	bpl.n	80088cc <__swrite+0x1e>
 80088c0:	2302      	movs	r3, #2
 80088c2:	2200      	movs	r2, #0
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	f000 f868 	bl	800899c <_lseek_r>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	4632      	mov	r2, r6
 80088da:	463b      	mov	r3, r7
 80088dc:	4628      	mov	r0, r5
 80088de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e2:	f000 b817 	b.w	8008914 <_write_r>

080088e6 <__sseek>:
 80088e6:	b510      	push	{r4, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ee:	f000 f855 	bl	800899c <_lseek_r>
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	bf15      	itete	ne
 80088f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80088fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008902:	81a3      	strheq	r3, [r4, #12]
 8008904:	bf18      	it	ne
 8008906:	81a3      	strhne	r3, [r4, #12]
 8008908:	bd10      	pop	{r4, pc}

0800890a <__sclose>:
 800890a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890e:	f000 b813 	b.w	8008938 <_close_r>
	...

08008914 <_write_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4c07      	ldr	r4, [pc, #28]	; (8008934 <_write_r+0x20>)
 8008918:	4605      	mov	r5, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	6022      	str	r2, [r4, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f8 f87b 	bl	8000a1e <_write>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_write_r+0x1e>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	b103      	cbz	r3, 8008932 <_write_r+0x1e>
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20000b94 	.word	0x20000b94

08008938 <_close_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4c06      	ldr	r4, [pc, #24]	; (8008954 <_close_r+0x1c>)
 800893c:	2300      	movs	r3, #0
 800893e:	4605      	mov	r5, r0
 8008940:	4608      	mov	r0, r1
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	f7f8 f887 	bl	8000a56 <_close>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_close_r+0x1a>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	b103      	cbz	r3, 8008952 <_close_r+0x1a>
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	20000b94 	.word	0x20000b94

08008958 <_fstat_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4c07      	ldr	r4, [pc, #28]	; (8008978 <_fstat_r+0x20>)
 800895c:	2300      	movs	r3, #0
 800895e:	4605      	mov	r5, r0
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	f7f8 f882 	bl	8000a6e <_fstat>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d102      	bne.n	8008974 <_fstat_r+0x1c>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	b103      	cbz	r3, 8008974 <_fstat_r+0x1c>
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	bf00      	nop
 8008978:	20000b94 	.word	0x20000b94

0800897c <_isatty_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4c06      	ldr	r4, [pc, #24]	; (8008998 <_isatty_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4605      	mov	r5, r0
 8008984:	4608      	mov	r0, r1
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	f7f8 f881 	bl	8000a8e <_isatty>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_isatty_r+0x1a>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	b103      	cbz	r3, 8008996 <_isatty_r+0x1a>
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20000b94 	.word	0x20000b94

0800899c <_lseek_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4c07      	ldr	r4, [pc, #28]	; (80089bc <_lseek_r+0x20>)
 80089a0:	4605      	mov	r5, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	6022      	str	r2, [r4, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f8 f87a 	bl	8000aa4 <_lseek>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_lseek_r+0x1e>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_lseek_r+0x1e>
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	20000b94 	.word	0x20000b94

080089c0 <_read_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4c07      	ldr	r4, [pc, #28]	; (80089e0 <_read_r+0x20>)
 80089c4:	4605      	mov	r5, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f8 f808 	bl	80009e4 <_read>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_read_r+0x1e>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	b103      	cbz	r3, 80089de <_read_r+0x1e>
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000b94 	.word	0x20000b94

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
